// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// AdminKnownCurrency is an object representing the database table.
type AdminKnownCurrency struct {
	ID               int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name             string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	IssuerPublicKey  string    `boil:"issuer_public_key" json:"issuer_public_key" toml:"issuer_public_key" yaml:"issuer_public_key"`
	AssetCode        string    `boil:"asset_code" json:"asset_code" toml:"asset_code" yaml:"asset_code"`
	ShortDescription string    `boil:"short_description" json:"short_description" toml:"short_description" yaml:"short_description"`
	LongDescription  string    `boil:"long_description" json:"long_description" toml:"long_description" yaml:"long_description"`
	OrderIndex       int       `boil:"order_index" json:"order_index" toml:"order_index" yaml:"order_index"`
	CreatedAt        time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt        time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UpdatedBy        string    `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`

	R *adminKnownCurrencyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L adminKnownCurrencyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AdminKnownCurrencyColumns = struct {
	ID               string
	Name             string
	IssuerPublicKey  string
	AssetCode        string
	ShortDescription string
	LongDescription  string
	OrderIndex       string
	CreatedAt        string
	UpdatedAt        string
	UpdatedBy        string
}{
	ID:               "id",
	Name:             "name",
	IssuerPublicKey:  "issuer_public_key",
	AssetCode:        "asset_code",
	ShortDescription: "short_description",
	LongDescription:  "long_description",
	OrderIndex:       "order_index",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
	UpdatedBy:        "updated_by",
}

// AdminKnownCurrencyRels is where relationship names are stored.
var AdminKnownCurrencyRels = struct {
}{}

// adminKnownCurrencyR is where relationships are stored.
type adminKnownCurrencyR struct {
}

// NewStruct creates a new relationship struct
func (*adminKnownCurrencyR) NewStruct() *adminKnownCurrencyR {
	return &adminKnownCurrencyR{}
}

// adminKnownCurrencyL is where Load methods for each relationship are stored.
type adminKnownCurrencyL struct{}

var (
	adminKnownCurrencyColumns               = []string{"id", "name", "issuer_public_key", "asset_code", "short_description", "long_description", "order_index", "created_at", "updated_at", "updated_by"}
	adminKnownCurrencyColumnsWithoutDefault = []string{"name", "issuer_public_key", "asset_code", "short_description", "long_description", "order_index", "updated_by"}
	adminKnownCurrencyColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	adminKnownCurrencyPrimaryKeyColumns     = []string{"id"}
)

type (
	// AdminKnownCurrencySlice is an alias for a slice of pointers to AdminKnownCurrency.
	// This should generally be used opposed to []AdminKnownCurrency.
	AdminKnownCurrencySlice []*AdminKnownCurrency
	// AdminKnownCurrencyHook is the signature for custom AdminKnownCurrency hook methods
	AdminKnownCurrencyHook func(boil.Executor, *AdminKnownCurrency) error

	adminKnownCurrencyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	adminKnownCurrencyType                 = reflect.TypeOf(&AdminKnownCurrency{})
	adminKnownCurrencyMapping              = queries.MakeStructMapping(adminKnownCurrencyType)
	adminKnownCurrencyPrimaryKeyMapping, _ = queries.BindMapping(adminKnownCurrencyType, adminKnownCurrencyMapping, adminKnownCurrencyPrimaryKeyColumns)
	adminKnownCurrencyInsertCacheMut       sync.RWMutex
	adminKnownCurrencyInsertCache          = make(map[string]insertCache)
	adminKnownCurrencyUpdateCacheMut       sync.RWMutex
	adminKnownCurrencyUpdateCache          = make(map[string]updateCache)
	adminKnownCurrencyUpsertCacheMut       sync.RWMutex
	adminKnownCurrencyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var adminKnownCurrencyBeforeInsertHooks []AdminKnownCurrencyHook
var adminKnownCurrencyBeforeUpdateHooks []AdminKnownCurrencyHook
var adminKnownCurrencyBeforeDeleteHooks []AdminKnownCurrencyHook
var adminKnownCurrencyBeforeUpsertHooks []AdminKnownCurrencyHook

var adminKnownCurrencyAfterInsertHooks []AdminKnownCurrencyHook
var adminKnownCurrencyAfterSelectHooks []AdminKnownCurrencyHook
var adminKnownCurrencyAfterUpdateHooks []AdminKnownCurrencyHook
var adminKnownCurrencyAfterDeleteHooks []AdminKnownCurrencyHook
var adminKnownCurrencyAfterUpsertHooks []AdminKnownCurrencyHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AdminKnownCurrency) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range adminKnownCurrencyBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AdminKnownCurrency) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range adminKnownCurrencyBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AdminKnownCurrency) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range adminKnownCurrencyBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AdminKnownCurrency) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range adminKnownCurrencyBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AdminKnownCurrency) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range adminKnownCurrencyAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AdminKnownCurrency) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range adminKnownCurrencyAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AdminKnownCurrency) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range adminKnownCurrencyAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AdminKnownCurrency) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range adminKnownCurrencyAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AdminKnownCurrency) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range adminKnownCurrencyAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAdminKnownCurrencyHook registers your hook function for all future operations.
func AddAdminKnownCurrencyHook(hookPoint boil.HookPoint, adminKnownCurrencyHook AdminKnownCurrencyHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		adminKnownCurrencyBeforeInsertHooks = append(adminKnownCurrencyBeforeInsertHooks, adminKnownCurrencyHook)
	case boil.BeforeUpdateHook:
		adminKnownCurrencyBeforeUpdateHooks = append(adminKnownCurrencyBeforeUpdateHooks, adminKnownCurrencyHook)
	case boil.BeforeDeleteHook:
		adminKnownCurrencyBeforeDeleteHooks = append(adminKnownCurrencyBeforeDeleteHooks, adminKnownCurrencyHook)
	case boil.BeforeUpsertHook:
		adminKnownCurrencyBeforeUpsertHooks = append(adminKnownCurrencyBeforeUpsertHooks, adminKnownCurrencyHook)
	case boil.AfterInsertHook:
		adminKnownCurrencyAfterInsertHooks = append(adminKnownCurrencyAfterInsertHooks, adminKnownCurrencyHook)
	case boil.AfterSelectHook:
		adminKnownCurrencyAfterSelectHooks = append(adminKnownCurrencyAfterSelectHooks, adminKnownCurrencyHook)
	case boil.AfterUpdateHook:
		adminKnownCurrencyAfterUpdateHooks = append(adminKnownCurrencyAfterUpdateHooks, adminKnownCurrencyHook)
	case boil.AfterDeleteHook:
		adminKnownCurrencyAfterDeleteHooks = append(adminKnownCurrencyAfterDeleteHooks, adminKnownCurrencyHook)
	case boil.AfterUpsertHook:
		adminKnownCurrencyAfterUpsertHooks = append(adminKnownCurrencyAfterUpsertHooks, adminKnownCurrencyHook)
	}
}

// OneG returns a single adminKnownCurrency record from the query using the global executor.
func (q adminKnownCurrencyQuery) OneG() (*AdminKnownCurrency, error) {
	return q.One(boil.GetDB())
}

// One returns a single adminKnownCurrency record from the query.
func (q adminKnownCurrencyQuery) One(exec boil.Executor) (*AdminKnownCurrency, error) {
	o := &AdminKnownCurrency{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for admin_known_currencies")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all AdminKnownCurrency records from the query using the global executor.
func (q adminKnownCurrencyQuery) AllG() (AdminKnownCurrencySlice, error) {
	return q.All(boil.GetDB())
}

// All returns all AdminKnownCurrency records from the query.
func (q adminKnownCurrencyQuery) All(exec boil.Executor) (AdminKnownCurrencySlice, error) {
	var o []*AdminKnownCurrency

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AdminKnownCurrency slice")
	}

	if len(adminKnownCurrencyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all AdminKnownCurrency records in the query, and panics on error.
func (q adminKnownCurrencyQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all AdminKnownCurrency records in the query.
func (q adminKnownCurrencyQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count admin_known_currencies rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q adminKnownCurrencyQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q adminKnownCurrencyQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if admin_known_currencies exists")
	}

	return count > 0, nil
}

// AdminKnownCurrencies retrieves all the records using an executor.
func AdminKnownCurrencies(mods ...qm.QueryMod) adminKnownCurrencyQuery {
	mods = append(mods, qm.From("\"admin_known_currencies\""))
	return adminKnownCurrencyQuery{NewQuery(mods...)}
}

// FindAdminKnownCurrencyG retrieves a single record by ID.
func FindAdminKnownCurrencyG(iD int, selectCols ...string) (*AdminKnownCurrency, error) {
	return FindAdminKnownCurrency(boil.GetDB(), iD, selectCols...)
}

// FindAdminKnownCurrency retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAdminKnownCurrency(exec boil.Executor, iD int, selectCols ...string) (*AdminKnownCurrency, error) {
	adminKnownCurrencyObj := &AdminKnownCurrency{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"admin_known_currencies\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, adminKnownCurrencyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from admin_known_currencies")
	}

	return adminKnownCurrencyObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AdminKnownCurrency) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AdminKnownCurrency) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no admin_known_currencies provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(adminKnownCurrencyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	adminKnownCurrencyInsertCacheMut.RLock()
	cache, cached := adminKnownCurrencyInsertCache[key]
	adminKnownCurrencyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			adminKnownCurrencyColumns,
			adminKnownCurrencyColumnsWithDefault,
			adminKnownCurrencyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(adminKnownCurrencyType, adminKnownCurrencyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(adminKnownCurrencyType, adminKnownCurrencyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"admin_known_currencies\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"admin_known_currencies\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into admin_known_currencies")
	}

	if !cached {
		adminKnownCurrencyInsertCacheMut.Lock()
		adminKnownCurrencyInsertCache[key] = cache
		adminKnownCurrencyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single AdminKnownCurrency record using the global executor.
// See Update for more documentation.
func (o *AdminKnownCurrency) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the AdminKnownCurrency.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AdminKnownCurrency) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	adminKnownCurrencyUpdateCacheMut.RLock()
	cache, cached := adminKnownCurrencyUpdateCache[key]
	adminKnownCurrencyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			adminKnownCurrencyColumns,
			adminKnownCurrencyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update admin_known_currencies, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"admin_known_currencies\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, adminKnownCurrencyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(adminKnownCurrencyType, adminKnownCurrencyMapping, append(wl, adminKnownCurrencyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update admin_known_currencies row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for admin_known_currencies")
	}

	if !cached {
		adminKnownCurrencyUpdateCacheMut.Lock()
		adminKnownCurrencyUpdateCache[key] = cache
		adminKnownCurrencyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q adminKnownCurrencyQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for admin_known_currencies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for admin_known_currencies")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AdminKnownCurrencySlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AdminKnownCurrencySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), adminKnownCurrencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"admin_known_currencies\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, adminKnownCurrencyPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in adminKnownCurrency slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all adminKnownCurrency")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AdminKnownCurrency) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AdminKnownCurrency) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no admin_known_currencies provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(adminKnownCurrencyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	adminKnownCurrencyUpsertCacheMut.RLock()
	cache, cached := adminKnownCurrencyUpsertCache[key]
	adminKnownCurrencyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			adminKnownCurrencyColumns,
			adminKnownCurrencyColumnsWithDefault,
			adminKnownCurrencyColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			adminKnownCurrencyColumns,
			adminKnownCurrencyPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert admin_known_currencies, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(adminKnownCurrencyPrimaryKeyColumns))
			copy(conflict, adminKnownCurrencyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"admin_known_currencies\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(adminKnownCurrencyType, adminKnownCurrencyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(adminKnownCurrencyType, adminKnownCurrencyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert admin_known_currencies")
	}

	if !cached {
		adminKnownCurrencyUpsertCacheMut.Lock()
		adminKnownCurrencyUpsertCache[key] = cache
		adminKnownCurrencyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single AdminKnownCurrency record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AdminKnownCurrency) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single AdminKnownCurrency record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AdminKnownCurrency) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AdminKnownCurrency provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), adminKnownCurrencyPrimaryKeyMapping)
	sql := "DELETE FROM \"admin_known_currencies\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from admin_known_currencies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for admin_known_currencies")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q adminKnownCurrencyQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no adminKnownCurrencyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from admin_known_currencies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for admin_known_currencies")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AdminKnownCurrencySlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AdminKnownCurrencySlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AdminKnownCurrency slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(adminKnownCurrencyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), adminKnownCurrencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"admin_known_currencies\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, adminKnownCurrencyPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from adminKnownCurrency slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for admin_known_currencies")
	}

	if len(adminKnownCurrencyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AdminKnownCurrency) ReloadG() error {
	if o == nil {
		return errors.New("models: no AdminKnownCurrency provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AdminKnownCurrency) Reload(exec boil.Executor) error {
	ret, err := FindAdminKnownCurrency(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AdminKnownCurrencySlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty AdminKnownCurrencySlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AdminKnownCurrencySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AdminKnownCurrencySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), adminKnownCurrencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"admin_known_currencies\".* FROM \"admin_known_currencies\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, adminKnownCurrencyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AdminKnownCurrencySlice")
	}

	*o = slice

	return nil
}

// AdminKnownCurrencyExistsG checks if the AdminKnownCurrency row exists.
func AdminKnownCurrencyExistsG(iD int) (bool, error) {
	return AdminKnownCurrencyExists(boil.GetDB(), iD)
}

// AdminKnownCurrencyExists checks if the AdminKnownCurrency row exists.
func AdminKnownCurrencyExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"admin_known_currencies\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if admin_known_currencies exists")
	}

	return exists, nil
}
