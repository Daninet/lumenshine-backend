// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// AdminStellarAccount is an object representing the database table.
type AdminStellarAccount struct {
	ID          int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	PublicKey   string    `boil:"public_key" json:"public_key" toml:"public_key" yaml:"public_key"`
	Name        string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	Type        string    `boil:"type" json:"type" toml:"type" yaml:"type"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UpdatedBy   string    `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`

	R *adminStellarAccountR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L adminStellarAccountL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AdminStellarAccountColumns = struct {
	ID          string
	PublicKey   string
	Name        string
	Description string
	Type        string
	CreatedAt   string
	UpdatedAt   string
	UpdatedBy   string
}{
	ID:          "id",
	PublicKey:   "public_key",
	Name:        "name",
	Description: "description",
	Type:        "type",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	UpdatedBy:   "updated_by",
}

// adminStellarAccountR is where relationships are stored.
type adminStellarAccountR struct {
	IssuerPublicKeyAdminStellarAssets          AdminStellarAssetSlice
	StellarAccountPublicKeyAdminStellarSigners AdminStellarSignerSlice
}

// adminStellarAccountL is where Load methods for each relationship are stored.
type adminStellarAccountL struct{}

var (
	adminStellarAccountColumns               = []string{"id", "public_key", "name", "description", "type", "created_at", "updated_at", "updated_by"}
	adminStellarAccountColumnsWithoutDefault = []string{"public_key", "name", "description", "type", "updated_by"}
	adminStellarAccountColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	adminStellarAccountPrimaryKeyColumns     = []string{"id"}
)

type (
	// AdminStellarAccountSlice is an alias for a slice of pointers to AdminStellarAccount.
	// This should generally be used opposed to []AdminStellarAccount.
	AdminStellarAccountSlice []*AdminStellarAccount
	// AdminStellarAccountHook is the signature for custom AdminStellarAccount hook methods
	AdminStellarAccountHook func(boil.Executor, *AdminStellarAccount) error

	adminStellarAccountQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	adminStellarAccountType                 = reflect.TypeOf(&AdminStellarAccount{})
	adminStellarAccountMapping              = queries.MakeStructMapping(adminStellarAccountType)
	adminStellarAccountPrimaryKeyMapping, _ = queries.BindMapping(adminStellarAccountType, adminStellarAccountMapping, adminStellarAccountPrimaryKeyColumns)
	adminStellarAccountInsertCacheMut       sync.RWMutex
	adminStellarAccountInsertCache          = make(map[string]insertCache)
	adminStellarAccountUpdateCacheMut       sync.RWMutex
	adminStellarAccountUpdateCache          = make(map[string]updateCache)
	adminStellarAccountUpsertCacheMut       sync.RWMutex
	adminStellarAccountUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var adminStellarAccountBeforeInsertHooks []AdminStellarAccountHook
var adminStellarAccountBeforeUpdateHooks []AdminStellarAccountHook
var adminStellarAccountBeforeDeleteHooks []AdminStellarAccountHook
var adminStellarAccountBeforeUpsertHooks []AdminStellarAccountHook

var adminStellarAccountAfterInsertHooks []AdminStellarAccountHook
var adminStellarAccountAfterSelectHooks []AdminStellarAccountHook
var adminStellarAccountAfterUpdateHooks []AdminStellarAccountHook
var adminStellarAccountAfterDeleteHooks []AdminStellarAccountHook
var adminStellarAccountAfterUpsertHooks []AdminStellarAccountHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AdminStellarAccount) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range adminStellarAccountBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AdminStellarAccount) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range adminStellarAccountBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AdminStellarAccount) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range adminStellarAccountBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AdminStellarAccount) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range adminStellarAccountBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AdminStellarAccount) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range adminStellarAccountAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AdminStellarAccount) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range adminStellarAccountAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AdminStellarAccount) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range adminStellarAccountAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AdminStellarAccount) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range adminStellarAccountAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AdminStellarAccount) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range adminStellarAccountAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAdminStellarAccountHook registers your hook function for all future operations.
func AddAdminStellarAccountHook(hookPoint boil.HookPoint, adminStellarAccountHook AdminStellarAccountHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		adminStellarAccountBeforeInsertHooks = append(adminStellarAccountBeforeInsertHooks, adminStellarAccountHook)
	case boil.BeforeUpdateHook:
		adminStellarAccountBeforeUpdateHooks = append(adminStellarAccountBeforeUpdateHooks, adminStellarAccountHook)
	case boil.BeforeDeleteHook:
		adminStellarAccountBeforeDeleteHooks = append(adminStellarAccountBeforeDeleteHooks, adminStellarAccountHook)
	case boil.BeforeUpsertHook:
		adminStellarAccountBeforeUpsertHooks = append(adminStellarAccountBeforeUpsertHooks, adminStellarAccountHook)
	case boil.AfterInsertHook:
		adminStellarAccountAfterInsertHooks = append(adminStellarAccountAfterInsertHooks, adminStellarAccountHook)
	case boil.AfterSelectHook:
		adminStellarAccountAfterSelectHooks = append(adminStellarAccountAfterSelectHooks, adminStellarAccountHook)
	case boil.AfterUpdateHook:
		adminStellarAccountAfterUpdateHooks = append(adminStellarAccountAfterUpdateHooks, adminStellarAccountHook)
	case boil.AfterDeleteHook:
		adminStellarAccountAfterDeleteHooks = append(adminStellarAccountAfterDeleteHooks, adminStellarAccountHook)
	case boil.AfterUpsertHook:
		adminStellarAccountAfterUpsertHooks = append(adminStellarAccountAfterUpsertHooks, adminStellarAccountHook)
	}
}

// OneP returns a single adminStellarAccount record from the query, and panics on error.
func (q adminStellarAccountQuery) OneP() *AdminStellarAccount {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single adminStellarAccount record from the query.
func (q adminStellarAccountQuery) One() (*AdminStellarAccount, error) {
	o := &AdminStellarAccount{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for admin_stellar_account")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all AdminStellarAccount records from the query, and panics on error.
func (q adminStellarAccountQuery) AllP() AdminStellarAccountSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all AdminStellarAccount records from the query.
func (q adminStellarAccountQuery) All() (AdminStellarAccountSlice, error) {
	var o []*AdminStellarAccount

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AdminStellarAccount slice")
	}

	if len(adminStellarAccountAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all AdminStellarAccount records in the query, and panics on error.
func (q adminStellarAccountQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all AdminStellarAccount records in the query.
func (q adminStellarAccountQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count admin_stellar_account rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q adminStellarAccountQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q adminStellarAccountQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if admin_stellar_account exists")
	}

	return count > 0, nil
}

// IssuerPublicKeyAdminStellarAssetsG retrieves all the admin_stellar_asset's admin stellar asset via issuer_public_key_id column.
func (o *AdminStellarAccount) IssuerPublicKeyAdminStellarAssetsG(mods ...qm.QueryMod) adminStellarAssetQuery {
	return o.IssuerPublicKeyAdminStellarAssets(boil.GetDB(), mods...)
}

// IssuerPublicKeyAdminStellarAssets retrieves all the admin_stellar_asset's admin stellar asset with an executor via issuer_public_key_id column.
func (o *AdminStellarAccount) IssuerPublicKeyAdminStellarAssets(exec boil.Executor, mods ...qm.QueryMod) adminStellarAssetQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"admin_stellar_asset\".\"issuer_public_key_id\"=?", o.PublicKey),
	)

	query := AdminStellarAssets(exec, queryMods...)
	queries.SetFrom(query.Query, "\"admin_stellar_asset\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"admin_stellar_asset\".*"})
	}

	return query
}

// StellarAccountPublicKeyAdminStellarSignersG retrieves all the admin_stellar_signer's admin stellar signer via stellar_account_public_key_id column.
func (o *AdminStellarAccount) StellarAccountPublicKeyAdminStellarSignersG(mods ...qm.QueryMod) adminStellarSignerQuery {
	return o.StellarAccountPublicKeyAdminStellarSigners(boil.GetDB(), mods...)
}

// StellarAccountPublicKeyAdminStellarSigners retrieves all the admin_stellar_signer's admin stellar signer with an executor via stellar_account_public_key_id column.
func (o *AdminStellarAccount) StellarAccountPublicKeyAdminStellarSigners(exec boil.Executor, mods ...qm.QueryMod) adminStellarSignerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"admin_stellar_signer\".\"stellar_account_public_key_id\"=?", o.PublicKey),
	)

	query := AdminStellarSigners(exec, queryMods...)
	queries.SetFrom(query.Query, "\"admin_stellar_signer\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"admin_stellar_signer\".*"})
	}

	return query
}

// LoadIssuerPublicKeyAdminStellarAssets allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (adminStellarAccountL) LoadIssuerPublicKeyAdminStellarAssets(e boil.Executor, singular bool, maybeAdminStellarAccount interface{}) error {
	var slice []*AdminStellarAccount
	var object *AdminStellarAccount

	count := 1
	if singular {
		object = maybeAdminStellarAccount.(*AdminStellarAccount)
	} else {
		slice = *maybeAdminStellarAccount.(*[]*AdminStellarAccount)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &adminStellarAccountR{}
		}
		args[0] = object.PublicKey
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &adminStellarAccountR{}
			}
			args[i] = obj.PublicKey
		}
	}

	query := fmt.Sprintf(
		"select * from \"admin_stellar_asset\" where \"issuer_public_key_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load admin_stellar_asset")
	}
	defer results.Close()

	var resultSlice []*AdminStellarAsset
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice admin_stellar_asset")
	}

	if len(adminStellarAssetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IssuerPublicKeyAdminStellarAssets = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PublicKey == foreign.IssuerPublicKeyID {
				local.R.IssuerPublicKeyAdminStellarAssets = append(local.R.IssuerPublicKeyAdminStellarAssets, foreign)
				break
			}
		}
	}

	return nil
}

// LoadStellarAccountPublicKeyAdminStellarSigners allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (adminStellarAccountL) LoadStellarAccountPublicKeyAdminStellarSigners(e boil.Executor, singular bool, maybeAdminStellarAccount interface{}) error {
	var slice []*AdminStellarAccount
	var object *AdminStellarAccount

	count := 1
	if singular {
		object = maybeAdminStellarAccount.(*AdminStellarAccount)
	} else {
		slice = *maybeAdminStellarAccount.(*[]*AdminStellarAccount)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &adminStellarAccountR{}
		}
		args[0] = object.PublicKey
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &adminStellarAccountR{}
			}
			args[i] = obj.PublicKey
		}
	}

	query := fmt.Sprintf(
		"select * from \"admin_stellar_signer\" where \"stellar_account_public_key_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load admin_stellar_signer")
	}
	defer results.Close()

	var resultSlice []*AdminStellarSigner
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice admin_stellar_signer")
	}

	if len(adminStellarSignerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.StellarAccountPublicKeyAdminStellarSigners = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PublicKey == foreign.StellarAccountPublicKeyID {
				local.R.StellarAccountPublicKeyAdminStellarSigners = append(local.R.StellarAccountPublicKeyAdminStellarSigners, foreign)
				break
			}
		}
	}

	return nil
}

// AddIssuerPublicKeyAdminStellarAssetsG adds the given related objects to the existing relationships
// of the admin_stellar_account, optionally inserting them as new records.
// Appends related to o.R.IssuerPublicKeyAdminStellarAssets.
// Sets related.R.IssuerPublicKey appropriately.
// Uses the global database handle.
func (o *AdminStellarAccount) AddIssuerPublicKeyAdminStellarAssetsG(insert bool, related ...*AdminStellarAsset) error {
	return o.AddIssuerPublicKeyAdminStellarAssets(boil.GetDB(), insert, related...)
}

// AddIssuerPublicKeyAdminStellarAssetsP adds the given related objects to the existing relationships
// of the admin_stellar_account, optionally inserting them as new records.
// Appends related to o.R.IssuerPublicKeyAdminStellarAssets.
// Sets related.R.IssuerPublicKey appropriately.
// Panics on error.
func (o *AdminStellarAccount) AddIssuerPublicKeyAdminStellarAssetsP(exec boil.Executor, insert bool, related ...*AdminStellarAsset) {
	if err := o.AddIssuerPublicKeyAdminStellarAssets(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddIssuerPublicKeyAdminStellarAssetsGP adds the given related objects to the existing relationships
// of the admin_stellar_account, optionally inserting them as new records.
// Appends related to o.R.IssuerPublicKeyAdminStellarAssets.
// Sets related.R.IssuerPublicKey appropriately.
// Uses the global database handle and panics on error.
func (o *AdminStellarAccount) AddIssuerPublicKeyAdminStellarAssetsGP(insert bool, related ...*AdminStellarAsset) {
	if err := o.AddIssuerPublicKeyAdminStellarAssets(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddIssuerPublicKeyAdminStellarAssets adds the given related objects to the existing relationships
// of the admin_stellar_account, optionally inserting them as new records.
// Appends related to o.R.IssuerPublicKeyAdminStellarAssets.
// Sets related.R.IssuerPublicKey appropriately.
func (o *AdminStellarAccount) AddIssuerPublicKeyAdminStellarAssets(exec boil.Executor, insert bool, related ...*AdminStellarAsset) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IssuerPublicKeyID = o.PublicKey
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"admin_stellar_asset\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"issuer_public_key_id"}),
				strmangle.WhereClause("\"", "\"", 2, adminStellarAssetPrimaryKeyColumns),
			)
			values := []interface{}{o.PublicKey, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IssuerPublicKeyID = o.PublicKey
		}
	}

	if o.R == nil {
		o.R = &adminStellarAccountR{
			IssuerPublicKeyAdminStellarAssets: related,
		}
	} else {
		o.R.IssuerPublicKeyAdminStellarAssets = append(o.R.IssuerPublicKeyAdminStellarAssets, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &adminStellarAssetR{
				IssuerPublicKey: o,
			}
		} else {
			rel.R.IssuerPublicKey = o
		}
	}
	return nil
}

// AddStellarAccountPublicKeyAdminStellarSignersG adds the given related objects to the existing relationships
// of the admin_stellar_account, optionally inserting them as new records.
// Appends related to o.R.StellarAccountPublicKeyAdminStellarSigners.
// Sets related.R.StellarAccountPublicKey appropriately.
// Uses the global database handle.
func (o *AdminStellarAccount) AddStellarAccountPublicKeyAdminStellarSignersG(insert bool, related ...*AdminStellarSigner) error {
	return o.AddStellarAccountPublicKeyAdminStellarSigners(boil.GetDB(), insert, related...)
}

// AddStellarAccountPublicKeyAdminStellarSignersP adds the given related objects to the existing relationships
// of the admin_stellar_account, optionally inserting them as new records.
// Appends related to o.R.StellarAccountPublicKeyAdminStellarSigners.
// Sets related.R.StellarAccountPublicKey appropriately.
// Panics on error.
func (o *AdminStellarAccount) AddStellarAccountPublicKeyAdminStellarSignersP(exec boil.Executor, insert bool, related ...*AdminStellarSigner) {
	if err := o.AddStellarAccountPublicKeyAdminStellarSigners(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddStellarAccountPublicKeyAdminStellarSignersGP adds the given related objects to the existing relationships
// of the admin_stellar_account, optionally inserting them as new records.
// Appends related to o.R.StellarAccountPublicKeyAdminStellarSigners.
// Sets related.R.StellarAccountPublicKey appropriately.
// Uses the global database handle and panics on error.
func (o *AdminStellarAccount) AddStellarAccountPublicKeyAdminStellarSignersGP(insert bool, related ...*AdminStellarSigner) {
	if err := o.AddStellarAccountPublicKeyAdminStellarSigners(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddStellarAccountPublicKeyAdminStellarSigners adds the given related objects to the existing relationships
// of the admin_stellar_account, optionally inserting them as new records.
// Appends related to o.R.StellarAccountPublicKeyAdminStellarSigners.
// Sets related.R.StellarAccountPublicKey appropriately.
func (o *AdminStellarAccount) AddStellarAccountPublicKeyAdminStellarSigners(exec boil.Executor, insert bool, related ...*AdminStellarSigner) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StellarAccountPublicKeyID = o.PublicKey
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"admin_stellar_signer\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"stellar_account_public_key_id"}),
				strmangle.WhereClause("\"", "\"", 2, adminStellarSignerPrimaryKeyColumns),
			)
			values := []interface{}{o.PublicKey, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StellarAccountPublicKeyID = o.PublicKey
		}
	}

	if o.R == nil {
		o.R = &adminStellarAccountR{
			StellarAccountPublicKeyAdminStellarSigners: related,
		}
	} else {
		o.R.StellarAccountPublicKeyAdminStellarSigners = append(o.R.StellarAccountPublicKeyAdminStellarSigners, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &adminStellarSignerR{
				StellarAccountPublicKey: o,
			}
		} else {
			rel.R.StellarAccountPublicKey = o
		}
	}
	return nil
}

// AdminStellarAccountsG retrieves all records.
func AdminStellarAccountsG(mods ...qm.QueryMod) adminStellarAccountQuery {
	return AdminStellarAccounts(boil.GetDB(), mods...)
}

// AdminStellarAccounts retrieves all the records using an executor.
func AdminStellarAccounts(exec boil.Executor, mods ...qm.QueryMod) adminStellarAccountQuery {
	mods = append(mods, qm.From("\"admin_stellar_account\""))
	return adminStellarAccountQuery{NewQuery(exec, mods...)}
}

// FindAdminStellarAccountG retrieves a single record by ID.
func FindAdminStellarAccountG(id int, selectCols ...string) (*AdminStellarAccount, error) {
	return FindAdminStellarAccount(boil.GetDB(), id, selectCols...)
}

// FindAdminStellarAccountGP retrieves a single record by ID, and panics on error.
func FindAdminStellarAccountGP(id int, selectCols ...string) *AdminStellarAccount {
	retobj, err := FindAdminStellarAccount(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindAdminStellarAccount retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAdminStellarAccount(exec boil.Executor, id int, selectCols ...string) (*AdminStellarAccount, error) {
	adminStellarAccountObj := &AdminStellarAccount{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"admin_stellar_account\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(adminStellarAccountObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from admin_stellar_account")
	}

	return adminStellarAccountObj, nil
}

// FindAdminStellarAccountP retrieves a single record by ID with an executor, and panics on error.
func FindAdminStellarAccountP(exec boil.Executor, id int, selectCols ...string) *AdminStellarAccount {
	retobj, err := FindAdminStellarAccount(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AdminStellarAccount) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *AdminStellarAccount) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *AdminStellarAccount) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *AdminStellarAccount) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no admin_stellar_account provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(adminStellarAccountColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	adminStellarAccountInsertCacheMut.RLock()
	cache, cached := adminStellarAccountInsertCache[key]
	adminStellarAccountInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			adminStellarAccountColumns,
			adminStellarAccountColumnsWithDefault,
			adminStellarAccountColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(adminStellarAccountType, adminStellarAccountMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(adminStellarAccountType, adminStellarAccountMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"admin_stellar_account\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"admin_stellar_account\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into admin_stellar_account")
	}

	if !cached {
		adminStellarAccountInsertCacheMut.Lock()
		adminStellarAccountInsertCache[key] = cache
		adminStellarAccountInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single AdminStellarAccount record. See Update for
// whitelist behavior description.
func (o *AdminStellarAccount) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single AdminStellarAccount record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *AdminStellarAccount) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the AdminStellarAccount, and panics on error.
// See Update for whitelist behavior description.
func (o *AdminStellarAccount) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the AdminStellarAccount.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *AdminStellarAccount) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	adminStellarAccountUpdateCacheMut.RLock()
	cache, cached := adminStellarAccountUpdateCache[key]
	adminStellarAccountUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			adminStellarAccountColumns,
			adminStellarAccountPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update admin_stellar_account, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"admin_stellar_account\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, adminStellarAccountPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(adminStellarAccountType, adminStellarAccountMapping, append(wl, adminStellarAccountPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update admin_stellar_account row")
	}

	if !cached {
		adminStellarAccountUpdateCacheMut.Lock()
		adminStellarAccountUpdateCache[key] = cache
		adminStellarAccountUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q adminStellarAccountQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q adminStellarAccountQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for admin_stellar_account")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AdminStellarAccountSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o AdminStellarAccountSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o AdminStellarAccountSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AdminStellarAccountSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), adminStellarAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"admin_stellar_account\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, adminStellarAccountPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in adminStellarAccount slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AdminStellarAccount) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *AdminStellarAccount) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *AdminStellarAccount) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *AdminStellarAccount) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no admin_stellar_account provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(adminStellarAccountColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	adminStellarAccountUpsertCacheMut.RLock()
	cache, cached := adminStellarAccountUpsertCache[key]
	adminStellarAccountUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			adminStellarAccountColumns,
			adminStellarAccountColumnsWithDefault,
			adminStellarAccountColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			adminStellarAccountColumns,
			adminStellarAccountPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert admin_stellar_account, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(adminStellarAccountPrimaryKeyColumns))
			copy(conflict, adminStellarAccountPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"admin_stellar_account\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(adminStellarAccountType, adminStellarAccountMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(adminStellarAccountType, adminStellarAccountMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert admin_stellar_account")
	}

	if !cached {
		adminStellarAccountUpsertCacheMut.Lock()
		adminStellarAccountUpsertCache[key] = cache
		adminStellarAccountUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single AdminStellarAccount record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *AdminStellarAccount) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single AdminStellarAccount record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AdminStellarAccount) DeleteG() error {
	if o == nil {
		return errors.New("models: no AdminStellarAccount provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single AdminStellarAccount record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *AdminStellarAccount) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single AdminStellarAccount record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AdminStellarAccount) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no AdminStellarAccount provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), adminStellarAccountPrimaryKeyMapping)
	sql := "DELETE FROM \"admin_stellar_account\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from admin_stellar_account")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q adminStellarAccountQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q adminStellarAccountQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no adminStellarAccountQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from admin_stellar_account")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o AdminStellarAccountSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o AdminStellarAccountSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no AdminStellarAccount slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o AdminStellarAccountSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AdminStellarAccountSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no AdminStellarAccount slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(adminStellarAccountBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), adminStellarAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"admin_stellar_account\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, adminStellarAccountPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from adminStellarAccount slice")
	}

	if len(adminStellarAccountAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *AdminStellarAccount) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *AdminStellarAccount) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AdminStellarAccount) ReloadG() error {
	if o == nil {
		return errors.New("models: no AdminStellarAccount provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AdminStellarAccount) Reload(exec boil.Executor) error {
	ret, err := FindAdminStellarAccount(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *AdminStellarAccountSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *AdminStellarAccountSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AdminStellarAccountSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty AdminStellarAccountSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AdminStellarAccountSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	adminStellarAccounts := AdminStellarAccountSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), adminStellarAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"admin_stellar_account\".* FROM \"admin_stellar_account\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, adminStellarAccountPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&adminStellarAccounts)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AdminStellarAccountSlice")
	}

	*o = adminStellarAccounts

	return nil
}

// AdminStellarAccountExists checks if the AdminStellarAccount row exists.
func AdminStellarAccountExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"admin_stellar_account\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if admin_stellar_account exists")
	}

	return exists, nil
}

// AdminStellarAccountExistsG checks if the AdminStellarAccount row exists.
func AdminStellarAccountExistsG(id int) (bool, error) {
	return AdminStellarAccountExists(boil.GetDB(), id)
}

// AdminStellarAccountExistsGP checks if the AdminStellarAccount row exists. Panics on error.
func AdminStellarAccountExistsGP(id int) bool {
	e, err := AdminStellarAccountExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// AdminStellarAccountExistsP checks if the AdminStellarAccount row exists. Panics on error.
func AdminStellarAccountExistsP(exec boil.Executor, id int) bool {
	e, err := AdminStellarAccountExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
