// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// AdminGroup is an object representing the database table.
type AdminGroup struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UpdatedBy string    `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`

	R *adminGroupR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L adminGroupL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AdminGroupColumns = struct {
	ID        string
	Name      string
	CreatedAt string
	UpdatedAt string
	UpdatedBy string
}{
	ID:        "id",
	Name:      "name",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	UpdatedBy: "updated_by",
}

// AdminGroupRels is where relationship names are stored.
var AdminGroupRels = struct {
	GroupAdminUsergroups string
}{
	GroupAdminUsergroups: "GroupAdminUsergroups",
}

// adminGroupR is where relationships are stored.
type adminGroupR struct {
	GroupAdminUsergroups AdminUsergroupSlice
}

// NewStruct creates a new relationship struct
func (*adminGroupR) NewStruct() *adminGroupR {
	return &adminGroupR{}
}

// adminGroupL is where Load methods for each relationship are stored.
type adminGroupL struct{}

var (
	adminGroupColumns               = []string{"id", "name", "created_at", "updated_at", "updated_by"}
	adminGroupColumnsWithoutDefault = []string{"name", "updated_by"}
	adminGroupColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	adminGroupPrimaryKeyColumns     = []string{"id"}
)

type (
	// AdminGroupSlice is an alias for a slice of pointers to AdminGroup.
	// This should generally be used opposed to []AdminGroup.
	AdminGroupSlice []*AdminGroup
	// AdminGroupHook is the signature for custom AdminGroup hook methods
	AdminGroupHook func(boil.Executor, *AdminGroup) error

	adminGroupQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	adminGroupType                 = reflect.TypeOf(&AdminGroup{})
	adminGroupMapping              = queries.MakeStructMapping(adminGroupType)
	adminGroupPrimaryKeyMapping, _ = queries.BindMapping(adminGroupType, adminGroupMapping, adminGroupPrimaryKeyColumns)
	adminGroupInsertCacheMut       sync.RWMutex
	adminGroupInsertCache          = make(map[string]insertCache)
	adminGroupUpdateCacheMut       sync.RWMutex
	adminGroupUpdateCache          = make(map[string]updateCache)
	adminGroupUpsertCacheMut       sync.RWMutex
	adminGroupUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var adminGroupBeforeInsertHooks []AdminGroupHook
var adminGroupBeforeUpdateHooks []AdminGroupHook
var adminGroupBeforeDeleteHooks []AdminGroupHook
var adminGroupBeforeUpsertHooks []AdminGroupHook

var adminGroupAfterInsertHooks []AdminGroupHook
var adminGroupAfterSelectHooks []AdminGroupHook
var adminGroupAfterUpdateHooks []AdminGroupHook
var adminGroupAfterDeleteHooks []AdminGroupHook
var adminGroupAfterUpsertHooks []AdminGroupHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AdminGroup) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range adminGroupBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AdminGroup) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range adminGroupBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AdminGroup) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range adminGroupBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AdminGroup) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range adminGroupBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AdminGroup) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range adminGroupAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AdminGroup) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range adminGroupAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AdminGroup) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range adminGroupAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AdminGroup) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range adminGroupAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AdminGroup) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range adminGroupAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAdminGroupHook registers your hook function for all future operations.
func AddAdminGroupHook(hookPoint boil.HookPoint, adminGroupHook AdminGroupHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		adminGroupBeforeInsertHooks = append(adminGroupBeforeInsertHooks, adminGroupHook)
	case boil.BeforeUpdateHook:
		adminGroupBeforeUpdateHooks = append(adminGroupBeforeUpdateHooks, adminGroupHook)
	case boil.BeforeDeleteHook:
		adminGroupBeforeDeleteHooks = append(adminGroupBeforeDeleteHooks, adminGroupHook)
	case boil.BeforeUpsertHook:
		adminGroupBeforeUpsertHooks = append(adminGroupBeforeUpsertHooks, adminGroupHook)
	case boil.AfterInsertHook:
		adminGroupAfterInsertHooks = append(adminGroupAfterInsertHooks, adminGroupHook)
	case boil.AfterSelectHook:
		adminGroupAfterSelectHooks = append(adminGroupAfterSelectHooks, adminGroupHook)
	case boil.AfterUpdateHook:
		adminGroupAfterUpdateHooks = append(adminGroupAfterUpdateHooks, adminGroupHook)
	case boil.AfterDeleteHook:
		adminGroupAfterDeleteHooks = append(adminGroupAfterDeleteHooks, adminGroupHook)
	case boil.AfterUpsertHook:
		adminGroupAfterUpsertHooks = append(adminGroupAfterUpsertHooks, adminGroupHook)
	}
}

// OneG returns a single adminGroup record from the query using the global executor.
func (q adminGroupQuery) OneG() (*AdminGroup, error) {
	return q.One(boil.GetDB())
}

// One returns a single adminGroup record from the query.
func (q adminGroupQuery) One(exec boil.Executor) (*AdminGroup, error) {
	o := &AdminGroup{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for admin_group")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all AdminGroup records from the query using the global executor.
func (q adminGroupQuery) AllG() (AdminGroupSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all AdminGroup records from the query.
func (q adminGroupQuery) All(exec boil.Executor) (AdminGroupSlice, error) {
	var o []*AdminGroup

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AdminGroup slice")
	}

	if len(adminGroupAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all AdminGroup records in the query, and panics on error.
func (q adminGroupQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all AdminGroup records in the query.
func (q adminGroupQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count admin_group rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q adminGroupQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q adminGroupQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if admin_group exists")
	}

	return count > 0, nil
}

// GroupAdminUsergroups retrieves all the admin_usergroup's AdminUsergroups with an executor via group_id column.
func (o *AdminGroup) GroupAdminUsergroups(mods ...qm.QueryMod) adminUsergroupQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"admin_usergroup\".\"group_id\"=?", o.ID),
	)

	query := AdminUsergroups(queryMods...)
	queries.SetFrom(query.Query, "\"admin_usergroup\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"admin_usergroup\".*"})
	}

	return query
}

// LoadGroupAdminUsergroups allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (adminGroupL) LoadGroupAdminUsergroups(e boil.Executor, singular bool, maybeAdminGroup interface{}, mods queries.Applicator) error {
	var slice []*AdminGroup
	var object *AdminGroup

	if singular {
		object = maybeAdminGroup.(*AdminGroup)
	} else {
		slice = *maybeAdminGroup.(*[]*AdminGroup)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &adminGroupR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &adminGroupR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`admin_usergroup`), qm.WhereIn(`group_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load admin_usergroup")
	}

	var resultSlice []*AdminUsergroup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice admin_usergroup")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on admin_usergroup")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for admin_usergroup")
	}

	if len(adminUsergroupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GroupAdminUsergroups = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &adminUsergroupR{}
			}
			foreign.R.Group = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.GroupID {
				local.R.GroupAdminUsergroups = append(local.R.GroupAdminUsergroups, foreign)
				if foreign.R == nil {
					foreign.R = &adminUsergroupR{}
				}
				foreign.R.Group = local
				break
			}
		}
	}

	return nil
}

// AddGroupAdminUsergroupsG adds the given related objects to the existing relationships
// of the admin_group, optionally inserting them as new records.
// Appends related to o.R.GroupAdminUsergroups.
// Sets related.R.Group appropriately.
// Uses the global database handle.
func (o *AdminGroup) AddGroupAdminUsergroupsG(insert bool, related ...*AdminUsergroup) error {
	return o.AddGroupAdminUsergroups(boil.GetDB(), insert, related...)
}

// AddGroupAdminUsergroups adds the given related objects to the existing relationships
// of the admin_group, optionally inserting them as new records.
// Appends related to o.R.GroupAdminUsergroups.
// Sets related.R.Group appropriately.
func (o *AdminGroup) AddGroupAdminUsergroups(exec boil.Executor, insert bool, related ...*AdminUsergroup) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GroupID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"admin_usergroup\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"group_id"}),
				strmangle.WhereClause("\"", "\"", 2, adminUsergroupPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GroupID = o.ID
		}
	}

	if o.R == nil {
		o.R = &adminGroupR{
			GroupAdminUsergroups: related,
		}
	} else {
		o.R.GroupAdminUsergroups = append(o.R.GroupAdminUsergroups, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &adminUsergroupR{
				Group: o,
			}
		} else {
			rel.R.Group = o
		}
	}
	return nil
}

// AdminGroups retrieves all the records using an executor.
func AdminGroups(mods ...qm.QueryMod) adminGroupQuery {
	mods = append(mods, qm.From("\"admin_group\""))
	return adminGroupQuery{NewQuery(mods...)}
}

// FindAdminGroupG retrieves a single record by ID.
func FindAdminGroupG(iD int, selectCols ...string) (*AdminGroup, error) {
	return FindAdminGroup(boil.GetDB(), iD, selectCols...)
}

// FindAdminGroup retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAdminGroup(exec boil.Executor, iD int, selectCols ...string) (*AdminGroup, error) {
	adminGroupObj := &AdminGroup{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"admin_group\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, adminGroupObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from admin_group")
	}

	return adminGroupObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AdminGroup) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AdminGroup) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no admin_group provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(adminGroupColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	adminGroupInsertCacheMut.RLock()
	cache, cached := adminGroupInsertCache[key]
	adminGroupInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			adminGroupColumns,
			adminGroupColumnsWithDefault,
			adminGroupColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(adminGroupType, adminGroupMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(adminGroupType, adminGroupMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"admin_group\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"admin_group\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into admin_group")
	}

	if !cached {
		adminGroupInsertCacheMut.Lock()
		adminGroupInsertCache[key] = cache
		adminGroupInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single AdminGroup record using the global executor.
// See Update for more documentation.
func (o *AdminGroup) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the AdminGroup.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AdminGroup) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	adminGroupUpdateCacheMut.RLock()
	cache, cached := adminGroupUpdateCache[key]
	adminGroupUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			adminGroupColumns,
			adminGroupPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update admin_group, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"admin_group\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, adminGroupPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(adminGroupType, adminGroupMapping, append(wl, adminGroupPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update admin_group row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for admin_group")
	}

	if !cached {
		adminGroupUpdateCacheMut.Lock()
		adminGroupUpdateCache[key] = cache
		adminGroupUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q adminGroupQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for admin_group")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for admin_group")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AdminGroupSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AdminGroupSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), adminGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"admin_group\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, adminGroupPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in adminGroup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all adminGroup")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AdminGroup) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AdminGroup) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no admin_group provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(adminGroupColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	adminGroupUpsertCacheMut.RLock()
	cache, cached := adminGroupUpsertCache[key]
	adminGroupUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			adminGroupColumns,
			adminGroupColumnsWithDefault,
			adminGroupColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			adminGroupColumns,
			adminGroupPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert admin_group, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(adminGroupPrimaryKeyColumns))
			copy(conflict, adminGroupPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"admin_group\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(adminGroupType, adminGroupMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(adminGroupType, adminGroupMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert admin_group")
	}

	if !cached {
		adminGroupUpsertCacheMut.Lock()
		adminGroupUpsertCache[key] = cache
		adminGroupUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single AdminGroup record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AdminGroup) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single AdminGroup record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AdminGroup) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AdminGroup provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), adminGroupPrimaryKeyMapping)
	sql := "DELETE FROM \"admin_group\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from admin_group")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for admin_group")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q adminGroupQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no adminGroupQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from admin_group")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for admin_group")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AdminGroupSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AdminGroupSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AdminGroup slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(adminGroupBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), adminGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"admin_group\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, adminGroupPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from adminGroup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for admin_group")
	}

	if len(adminGroupAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AdminGroup) ReloadG() error {
	if o == nil {
		return errors.New("models: no AdminGroup provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AdminGroup) Reload(exec boil.Executor) error {
	ret, err := FindAdminGroup(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AdminGroupSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty AdminGroupSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AdminGroupSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AdminGroupSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), adminGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"admin_group\".* FROM \"admin_group\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, adminGroupPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AdminGroupSlice")
	}

	*o = slice

	return nil
}

// AdminGroupExistsG checks if the AdminGroup row exists.
func AdminGroupExistsG(iD int) (bool, error) {
	return AdminGroupExists(boil.GetDB(), iD)
}

// AdminGroupExists checks if the AdminGroup row exists.
func AdminGroupExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"admin_group\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if admin_group exists")
	}

	return exists, nil
}
