// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// AdminUser is an object representing the database table.
type AdminUser struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Forename  string    `boil:"forename" json:"forename" toml:"forename" yaml:"forename"`
	Lastname  string    `boil:"lastname" json:"lastname" toml:"lastname" yaml:"lastname"`
	Email     string    `boil:"email" json:"email" toml:"email" yaml:"email"`
	Phone     string    `boil:"phone" json:"phone" toml:"phone" yaml:"phone"`
	LastLogin time.Time `boil:"last_login" json:"last_login" toml:"last_login" yaml:"last_login"`
	Password  string    `boil:"password" json:"password" toml:"password" yaml:"password"`
	Active    bool      `boil:"active" json:"active" toml:"active" yaml:"active"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UpdatedBy string    `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`

	R *adminUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L adminUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AdminUserColumns = struct {
	ID        string
	Forename  string
	Lastname  string
	Email     string
	Phone     string
	LastLogin string
	Password  string
	Active    string
	CreatedAt string
	UpdatedAt string
	UpdatedBy string
}{
	ID:        "id",
	Forename:  "forename",
	Lastname:  "lastname",
	Email:     "email",
	Phone:     "phone",
	LastLogin: "last_login",
	Password:  "password",
	Active:    "active",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	UpdatedBy: "updated_by",
}

// AdminUserRels is where relationship names are stored.
var AdminUserRels = struct {
	UserAdminUsergroups string
}{
	UserAdminUsergroups: "UserAdminUsergroups",
}

// adminUserR is where relationships are stored.
type adminUserR struct {
	UserAdminUsergroups AdminUsergroupSlice
}

// NewStruct creates a new relationship struct
func (*adminUserR) NewStruct() *adminUserR {
	return &adminUserR{}
}

// adminUserL is where Load methods for each relationship are stored.
type adminUserL struct{}

var (
	adminUserColumns               = []string{"id", "forename", "lastname", "email", "phone", "last_login", "password", "active", "created_at", "updated_at", "updated_by"}
	adminUserColumnsWithoutDefault = []string{"forename", "lastname", "email", "phone", "last_login", "password", "updated_by"}
	adminUserColumnsWithDefault    = []string{"id", "active", "created_at", "updated_at"}
	adminUserPrimaryKeyColumns     = []string{"id"}
)

type (
	// AdminUserSlice is an alias for a slice of pointers to AdminUser.
	// This should generally be used opposed to []AdminUser.
	AdminUserSlice []*AdminUser
	// AdminUserHook is the signature for custom AdminUser hook methods
	AdminUserHook func(boil.Executor, *AdminUser) error

	adminUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	adminUserType                 = reflect.TypeOf(&AdminUser{})
	adminUserMapping              = queries.MakeStructMapping(adminUserType)
	adminUserPrimaryKeyMapping, _ = queries.BindMapping(adminUserType, adminUserMapping, adminUserPrimaryKeyColumns)
	adminUserInsertCacheMut       sync.RWMutex
	adminUserInsertCache          = make(map[string]insertCache)
	adminUserUpdateCacheMut       sync.RWMutex
	adminUserUpdateCache          = make(map[string]updateCache)
	adminUserUpsertCacheMut       sync.RWMutex
	adminUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var adminUserBeforeInsertHooks []AdminUserHook
var adminUserBeforeUpdateHooks []AdminUserHook
var adminUserBeforeDeleteHooks []AdminUserHook
var adminUserBeforeUpsertHooks []AdminUserHook

var adminUserAfterInsertHooks []AdminUserHook
var adminUserAfterSelectHooks []AdminUserHook
var adminUserAfterUpdateHooks []AdminUserHook
var adminUserAfterDeleteHooks []AdminUserHook
var adminUserAfterUpsertHooks []AdminUserHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AdminUser) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range adminUserBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AdminUser) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range adminUserBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AdminUser) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range adminUserBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AdminUser) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range adminUserBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AdminUser) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range adminUserAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AdminUser) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range adminUserAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AdminUser) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range adminUserAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AdminUser) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range adminUserAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AdminUser) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range adminUserAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAdminUserHook registers your hook function for all future operations.
func AddAdminUserHook(hookPoint boil.HookPoint, adminUserHook AdminUserHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		adminUserBeforeInsertHooks = append(adminUserBeforeInsertHooks, adminUserHook)
	case boil.BeforeUpdateHook:
		adminUserBeforeUpdateHooks = append(adminUserBeforeUpdateHooks, adminUserHook)
	case boil.BeforeDeleteHook:
		adminUserBeforeDeleteHooks = append(adminUserBeforeDeleteHooks, adminUserHook)
	case boil.BeforeUpsertHook:
		adminUserBeforeUpsertHooks = append(adminUserBeforeUpsertHooks, adminUserHook)
	case boil.AfterInsertHook:
		adminUserAfterInsertHooks = append(adminUserAfterInsertHooks, adminUserHook)
	case boil.AfterSelectHook:
		adminUserAfterSelectHooks = append(adminUserAfterSelectHooks, adminUserHook)
	case boil.AfterUpdateHook:
		adminUserAfterUpdateHooks = append(adminUserAfterUpdateHooks, adminUserHook)
	case boil.AfterDeleteHook:
		adminUserAfterDeleteHooks = append(adminUserAfterDeleteHooks, adminUserHook)
	case boil.AfterUpsertHook:
		adminUserAfterUpsertHooks = append(adminUserAfterUpsertHooks, adminUserHook)
	}
}

// OneG returns a single adminUser record from the query using the global executor.
func (q adminUserQuery) OneG() (*AdminUser, error) {
	return q.One(boil.GetDB())
}

// One returns a single adminUser record from the query.
func (q adminUserQuery) One(exec boil.Executor) (*AdminUser, error) {
	o := &AdminUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for admin_user")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all AdminUser records from the query using the global executor.
func (q adminUserQuery) AllG() (AdminUserSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all AdminUser records from the query.
func (q adminUserQuery) All(exec boil.Executor) (AdminUserSlice, error) {
	var o []*AdminUser

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AdminUser slice")
	}

	if len(adminUserAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all AdminUser records in the query, and panics on error.
func (q adminUserQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all AdminUser records in the query.
func (q adminUserQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count admin_user rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q adminUserQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q adminUserQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if admin_user exists")
	}

	return count > 0, nil
}

// UserAdminUsergroups retrieves all the admin_usergroup's AdminUsergroups with an executor via user_id column.
func (o *AdminUser) UserAdminUsergroups(mods ...qm.QueryMod) adminUsergroupQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"admin_usergroup\".\"user_id\"=?", o.ID),
	)

	query := AdminUsergroups(queryMods...)
	queries.SetFrom(query.Query, "\"admin_usergroup\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"admin_usergroup\".*"})
	}

	return query
}

// LoadUserAdminUsergroups allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (adminUserL) LoadUserAdminUsergroups(e boil.Executor, singular bool, maybeAdminUser interface{}, mods queries.Applicator) error {
	var slice []*AdminUser
	var object *AdminUser

	if singular {
		object = maybeAdminUser.(*AdminUser)
	} else {
		slice = *maybeAdminUser.(*[]*AdminUser)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &adminUserR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &adminUserR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`admin_usergroup`), qm.WhereIn(`user_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load admin_usergroup")
	}

	var resultSlice []*AdminUsergroup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice admin_usergroup")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on admin_usergroup")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for admin_usergroup")
	}

	if len(adminUsergroupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserAdminUsergroups = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &adminUsergroupR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserAdminUsergroups = append(local.R.UserAdminUsergroups, foreign)
				if foreign.R == nil {
					foreign.R = &adminUsergroupR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// AddUserAdminUsergroupsG adds the given related objects to the existing relationships
// of the admin_user, optionally inserting them as new records.
// Appends related to o.R.UserAdminUsergroups.
// Sets related.R.User appropriately.
// Uses the global database handle.
func (o *AdminUser) AddUserAdminUsergroupsG(insert bool, related ...*AdminUsergroup) error {
	return o.AddUserAdminUsergroups(boil.GetDB(), insert, related...)
}

// AddUserAdminUsergroups adds the given related objects to the existing relationships
// of the admin_user, optionally inserting them as new records.
// Appends related to o.R.UserAdminUsergroups.
// Sets related.R.User appropriately.
func (o *AdminUser) AddUserAdminUsergroups(exec boil.Executor, insert bool, related ...*AdminUsergroup) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"admin_usergroup\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, adminUsergroupPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &adminUserR{
			UserAdminUsergroups: related,
		}
	} else {
		o.R.UserAdminUsergroups = append(o.R.UserAdminUsergroups, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &adminUsergroupR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AdminUsers retrieves all the records using an executor.
func AdminUsers(mods ...qm.QueryMod) adminUserQuery {
	mods = append(mods, qm.From("\"admin_user\""))
	return adminUserQuery{NewQuery(mods...)}
}

// FindAdminUserG retrieves a single record by ID.
func FindAdminUserG(iD int, selectCols ...string) (*AdminUser, error) {
	return FindAdminUser(boil.GetDB(), iD, selectCols...)
}

// FindAdminUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAdminUser(exec boil.Executor, iD int, selectCols ...string) (*AdminUser, error) {
	adminUserObj := &AdminUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"admin_user\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, adminUserObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from admin_user")
	}

	return adminUserObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AdminUser) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AdminUser) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no admin_user provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(adminUserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	adminUserInsertCacheMut.RLock()
	cache, cached := adminUserInsertCache[key]
	adminUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			adminUserColumns,
			adminUserColumnsWithDefault,
			adminUserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(adminUserType, adminUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(adminUserType, adminUserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"admin_user\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"admin_user\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into admin_user")
	}

	if !cached {
		adminUserInsertCacheMut.Lock()
		adminUserInsertCache[key] = cache
		adminUserInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single AdminUser record using the global executor.
// See Update for more documentation.
func (o *AdminUser) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the AdminUser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AdminUser) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	adminUserUpdateCacheMut.RLock()
	cache, cached := adminUserUpdateCache[key]
	adminUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			adminUserColumns,
			adminUserPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update admin_user, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"admin_user\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, adminUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(adminUserType, adminUserMapping, append(wl, adminUserPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update admin_user row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for admin_user")
	}

	if !cached {
		adminUserUpdateCacheMut.Lock()
		adminUserUpdateCache[key] = cache
		adminUserUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q adminUserQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for admin_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for admin_user")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AdminUserSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AdminUserSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), adminUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"admin_user\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, adminUserPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in adminUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all adminUser")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AdminUser) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AdminUser) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no admin_user provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(adminUserColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	adminUserUpsertCacheMut.RLock()
	cache, cached := adminUserUpsertCache[key]
	adminUserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			adminUserColumns,
			adminUserColumnsWithDefault,
			adminUserColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			adminUserColumns,
			adminUserPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert admin_user, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(adminUserPrimaryKeyColumns))
			copy(conflict, adminUserPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"admin_user\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(adminUserType, adminUserMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(adminUserType, adminUserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert admin_user")
	}

	if !cached {
		adminUserUpsertCacheMut.Lock()
		adminUserUpsertCache[key] = cache
		adminUserUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single AdminUser record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AdminUser) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single AdminUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AdminUser) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AdminUser provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), adminUserPrimaryKeyMapping)
	sql := "DELETE FROM \"admin_user\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from admin_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for admin_user")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q adminUserQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no adminUserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from admin_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for admin_user")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AdminUserSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AdminUserSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AdminUser slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(adminUserBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), adminUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"admin_user\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, adminUserPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from adminUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for admin_user")
	}

	if len(adminUserAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AdminUser) ReloadG() error {
	if o == nil {
		return errors.New("models: no AdminUser provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AdminUser) Reload(exec boil.Executor) error {
	ret, err := FindAdminUser(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AdminUserSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty AdminUserSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AdminUserSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AdminUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), adminUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"admin_user\".* FROM \"admin_user\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, adminUserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AdminUserSlice")
	}

	*o = slice

	return nil
}

// AdminUserExistsG checks if the AdminUser row exists.
func AdminUserExistsG(iD int) (bool, error) {
	return AdminUserExists(boil.GetDB(), iD)
}

// AdminUserExists checks if the AdminUser row exists.
func AdminUserExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"admin_user\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if admin_user exists")
	}

	return exists, nil
}
