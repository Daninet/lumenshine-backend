// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package stellarcore

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Offer is an object representing the database table.
type Offer struct {
	Sellerid         string      `boil:"sellerid" json:"sellerid" toml:"sellerid" yaml:"sellerid"`
	Offerid          int64       `boil:"offerid" json:"offerid" toml:"offerid" yaml:"offerid"`
	Sellingassettype int         `boil:"sellingassettype" json:"sellingassettype" toml:"sellingassettype" yaml:"sellingassettype"`
	Sellingassetcode null.String `boil:"sellingassetcode" json:"sellingassetcode,omitempty" toml:"sellingassetcode" yaml:"sellingassetcode,omitempty"`
	Sellingissuer    null.String `boil:"sellingissuer" json:"sellingissuer,omitempty" toml:"sellingissuer" yaml:"sellingissuer,omitempty"`
	Buyingassettype  int         `boil:"buyingassettype" json:"buyingassettype" toml:"buyingassettype" yaml:"buyingassettype"`
	Buyingassetcode  null.String `boil:"buyingassetcode" json:"buyingassetcode,omitempty" toml:"buyingassetcode" yaml:"buyingassetcode,omitempty"`
	Buyingissuer     null.String `boil:"buyingissuer" json:"buyingissuer,omitempty" toml:"buyingissuer" yaml:"buyingissuer,omitempty"`
	Amount           int64       `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	Pricen           int         `boil:"pricen" json:"pricen" toml:"pricen" yaml:"pricen"`
	Priced           int         `boil:"priced" json:"priced" toml:"priced" yaml:"priced"`
	Price            float64     `boil:"price" json:"price" toml:"price" yaml:"price"`
	Flags            int         `boil:"flags" json:"flags" toml:"flags" yaml:"flags"`
	Lastmodified     int         `boil:"lastmodified" json:"lastmodified" toml:"lastmodified" yaml:"lastmodified"`

	R *offerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L offerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OfferColumns = struct {
	Sellerid         string
	Offerid          string
	Sellingassettype string
	Sellingassetcode string
	Sellingissuer    string
	Buyingassettype  string
	Buyingassetcode  string
	Buyingissuer     string
	Amount           string
	Pricen           string
	Priced           string
	Price            string
	Flags            string
	Lastmodified     string
}{
	Sellerid:         "sellerid",
	Offerid:          "offerid",
	Sellingassettype: "sellingassettype",
	Sellingassetcode: "sellingassetcode",
	Sellingissuer:    "sellingissuer",
	Buyingassettype:  "buyingassettype",
	Buyingassetcode:  "buyingassetcode",
	Buyingissuer:     "buyingissuer",
	Amount:           "amount",
	Pricen:           "pricen",
	Priced:           "priced",
	Price:            "price",
	Flags:            "flags",
	Lastmodified:     "lastmodified",
}

// OfferRels is where relationship names are stored.
var OfferRels = struct {
}{}

// offerR is where relationships are stored.
type offerR struct {
}

// NewStruct creates a new relationship struct
func (*offerR) NewStruct() *offerR {
	return &offerR{}
}

// offerL is where Load methods for each relationship are stored.
type offerL struct{}

var (
	offerColumns               = []string{"sellerid", "offerid", "sellingassettype", "sellingassetcode", "sellingissuer", "buyingassettype", "buyingassetcode", "buyingissuer", "amount", "pricen", "priced", "price", "flags", "lastmodified"}
	offerColumnsWithoutDefault = []string{"sellerid", "offerid", "sellingassettype", "sellingassetcode", "sellingissuer", "buyingassettype", "buyingassetcode", "buyingissuer", "amount", "pricen", "priced", "price", "flags", "lastmodified"}
	offerColumnsWithDefault    = []string{}
	offerPrimaryKeyColumns     = []string{"offerid"}
)

type (
	// OfferSlice is an alias for a slice of pointers to Offer.
	// This should generally be used opposed to []Offer.
	OfferSlice []*Offer
	// OfferHook is the signature for custom Offer hook methods
	OfferHook func(boil.Executor, *Offer) error

	offerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	offerType                 = reflect.TypeOf(&Offer{})
	offerMapping              = queries.MakeStructMapping(offerType)
	offerPrimaryKeyMapping, _ = queries.BindMapping(offerType, offerMapping, offerPrimaryKeyColumns)
	offerInsertCacheMut       sync.RWMutex
	offerInsertCache          = make(map[string]insertCache)
	offerUpdateCacheMut       sync.RWMutex
	offerUpdateCache          = make(map[string]updateCache)
	offerUpsertCacheMut       sync.RWMutex
	offerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var offerBeforeInsertHooks []OfferHook
var offerBeforeUpdateHooks []OfferHook
var offerBeforeDeleteHooks []OfferHook
var offerBeforeUpsertHooks []OfferHook

var offerAfterInsertHooks []OfferHook
var offerAfterSelectHooks []OfferHook
var offerAfterUpdateHooks []OfferHook
var offerAfterDeleteHooks []OfferHook
var offerAfterUpsertHooks []OfferHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Offer) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range offerBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Offer) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range offerBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Offer) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range offerBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Offer) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range offerBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Offer) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range offerAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Offer) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range offerAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Offer) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range offerAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Offer) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range offerAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Offer) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range offerAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOfferHook registers your hook function for all future operations.
func AddOfferHook(hookPoint boil.HookPoint, offerHook OfferHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		offerBeforeInsertHooks = append(offerBeforeInsertHooks, offerHook)
	case boil.BeforeUpdateHook:
		offerBeforeUpdateHooks = append(offerBeforeUpdateHooks, offerHook)
	case boil.BeforeDeleteHook:
		offerBeforeDeleteHooks = append(offerBeforeDeleteHooks, offerHook)
	case boil.BeforeUpsertHook:
		offerBeforeUpsertHooks = append(offerBeforeUpsertHooks, offerHook)
	case boil.AfterInsertHook:
		offerAfterInsertHooks = append(offerAfterInsertHooks, offerHook)
	case boil.AfterSelectHook:
		offerAfterSelectHooks = append(offerAfterSelectHooks, offerHook)
	case boil.AfterUpdateHook:
		offerAfterUpdateHooks = append(offerAfterUpdateHooks, offerHook)
	case boil.AfterDeleteHook:
		offerAfterDeleteHooks = append(offerAfterDeleteHooks, offerHook)
	case boil.AfterUpsertHook:
		offerAfterUpsertHooks = append(offerAfterUpsertHooks, offerHook)
	}
}

// OneG returns a single offer record from the query using the global executor.
func (q offerQuery) OneG() (*Offer, error) {
	return q.One(boil.GetDB())
}

// One returns a single offer record from the query.
func (q offerQuery) One(exec boil.Executor) (*Offer, error) {
	o := &Offer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "stellarcore: failed to execute a one query for offers")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Offer records from the query using the global executor.
func (q offerQuery) AllG() (OfferSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Offer records from the query.
func (q offerQuery) All(exec boil.Executor) (OfferSlice, error) {
	var o []*Offer

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "stellarcore: failed to assign all query results to Offer slice")
	}

	if len(offerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Offer records in the query, and panics on error.
func (q offerQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Offer records in the query.
func (q offerQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: failed to count offers rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q offerQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q offerQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "stellarcore: failed to check if offers exists")
	}

	return count > 0, nil
}

// Offers retrieves all the records using an executor.
func Offers(mods ...qm.QueryMod) offerQuery {
	mods = append(mods, qm.From("\"offers\""))
	return offerQuery{NewQuery(mods...)}
}

// FindOfferG retrieves a single record by ID.
func FindOfferG(offerid int64, selectCols ...string) (*Offer, error) {
	return FindOffer(boil.GetDB(), offerid, selectCols...)
}

// FindOffer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOffer(exec boil.Executor, offerid int64, selectCols ...string) (*Offer, error) {
	offerObj := &Offer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"offers\" where \"offerid\"=$1", sel,
	)

	q := queries.Raw(query, offerid)

	err := q.Bind(nil, exec, offerObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "stellarcore: unable to select from offers")
	}

	return offerObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Offer) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Offer) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("stellarcore: no offers provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(offerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	offerInsertCacheMut.RLock()
	cache, cached := offerInsertCache[key]
	offerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			offerColumns,
			offerColumnsWithDefault,
			offerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(offerType, offerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(offerType, offerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"offers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"offers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "stellarcore: unable to insert into offers")
	}

	if !cached {
		offerInsertCacheMut.Lock()
		offerInsertCache[key] = cache
		offerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Offer record using the global executor.
// See Update for more documentation.
func (o *Offer) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Offer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Offer) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	offerUpdateCacheMut.RLock()
	cache, cached := offerUpdateCache[key]
	offerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			offerColumns,
			offerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("stellarcore: unable to update offers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"offers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, offerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(offerType, offerMapping, append(wl, offerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to update offers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: failed to get rows affected by update for offers")
	}

	if !cached {
		offerUpdateCacheMut.Lock()
		offerUpdateCache[key] = cache
		offerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q offerQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to update all for offers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to retrieve rows affected for offers")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o OfferSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OfferSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("stellarcore: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), offerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"offers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, offerPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to update all in offer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to retrieve rows affected all in update all offer")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Offer) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Offer) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("stellarcore: no offers provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(offerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	offerUpsertCacheMut.RLock()
	cache, cached := offerUpsertCache[key]
	offerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			offerColumns,
			offerColumnsWithDefault,
			offerColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			offerColumns,
			offerPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("stellarcore: unable to upsert offers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(offerPrimaryKeyColumns))
			copy(conflict, offerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"offers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(offerType, offerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(offerType, offerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "stellarcore: unable to upsert offers")
	}

	if !cached {
		offerUpsertCacheMut.Lock()
		offerUpsertCache[key] = cache
		offerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single Offer record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Offer) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Offer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Offer) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("stellarcore: no Offer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), offerPrimaryKeyMapping)
	sql := "DELETE FROM \"offers\" WHERE \"offerid\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to delete from offers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: failed to get rows affected by delete for offers")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q offerQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("stellarcore: no offerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to delete all from offers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: failed to get rows affected by deleteall for offers")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o OfferSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OfferSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("stellarcore: no Offer slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(offerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), offerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"offers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, offerPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to delete all from offer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: failed to get rows affected by deleteall for offers")
	}

	if len(offerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Offer) ReloadG() error {
	if o == nil {
		return errors.New("stellarcore: no Offer provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Offer) Reload(exec boil.Executor) error {
	ret, err := FindOffer(exec, o.Offerid)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OfferSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("stellarcore: empty OfferSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OfferSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OfferSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), offerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"offers\".* FROM \"offers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, offerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "stellarcore: unable to reload all in OfferSlice")
	}

	*o = slice

	return nil
}

// OfferExistsG checks if the Offer row exists.
func OfferExistsG(offerid int64) (bool, error) {
	return OfferExists(boil.GetDB(), offerid)
}

// OfferExists checks if the Offer row exists.
func OfferExists(exec boil.Executor, offerid int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"offers\" where \"offerid\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, offerid)
	}

	row := exec.QueryRow(sql, offerid)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "stellarcore: unable to check if offers exists")
	}

	return exists, nil
}
