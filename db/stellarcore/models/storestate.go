// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package stellarcore

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Storestate is an object representing the database table.
type Storestate struct {
	Statename string      `boil:"statename" json:"statename" toml:"statename" yaml:"statename"`
	State     null.String `boil:"state" json:"state,omitempty" toml:"state" yaml:"state,omitempty"`

	R *storestateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L storestateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StorestateColumns = struct {
	Statename string
	State     string
}{
	Statename: "statename",
	State:     "state",
}

// StorestateRels is where relationship names are stored.
var StorestateRels = struct {
}{}

// storestateR is where relationships are stored.
type storestateR struct {
}

// NewStruct creates a new relationship struct
func (*storestateR) NewStruct() *storestateR {
	return &storestateR{}
}

// storestateL is where Load methods for each relationship are stored.
type storestateL struct{}

var (
	storestateColumns               = []string{"statename", "state"}
	storestateColumnsWithoutDefault = []string{"statename", "state"}
	storestateColumnsWithDefault    = []string{}
	storestatePrimaryKeyColumns     = []string{"statename"}
)

type (
	// StorestateSlice is an alias for a slice of pointers to Storestate.
	// This should generally be used opposed to []Storestate.
	StorestateSlice []*Storestate
	// StorestateHook is the signature for custom Storestate hook methods
	StorestateHook func(boil.Executor, *Storestate) error

	storestateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	storestateType                 = reflect.TypeOf(&Storestate{})
	storestateMapping              = queries.MakeStructMapping(storestateType)
	storestatePrimaryKeyMapping, _ = queries.BindMapping(storestateType, storestateMapping, storestatePrimaryKeyColumns)
	storestateInsertCacheMut       sync.RWMutex
	storestateInsertCache          = make(map[string]insertCache)
	storestateUpdateCacheMut       sync.RWMutex
	storestateUpdateCache          = make(map[string]updateCache)
	storestateUpsertCacheMut       sync.RWMutex
	storestateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var storestateBeforeInsertHooks []StorestateHook
var storestateBeforeUpdateHooks []StorestateHook
var storestateBeforeDeleteHooks []StorestateHook
var storestateBeforeUpsertHooks []StorestateHook

var storestateAfterInsertHooks []StorestateHook
var storestateAfterSelectHooks []StorestateHook
var storestateAfterUpdateHooks []StorestateHook
var storestateAfterDeleteHooks []StorestateHook
var storestateAfterUpsertHooks []StorestateHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Storestate) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range storestateBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Storestate) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range storestateBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Storestate) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range storestateBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Storestate) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range storestateBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Storestate) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range storestateAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Storestate) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range storestateAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Storestate) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range storestateAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Storestate) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range storestateAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Storestate) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range storestateAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStorestateHook registers your hook function for all future operations.
func AddStorestateHook(hookPoint boil.HookPoint, storestateHook StorestateHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		storestateBeforeInsertHooks = append(storestateBeforeInsertHooks, storestateHook)
	case boil.BeforeUpdateHook:
		storestateBeforeUpdateHooks = append(storestateBeforeUpdateHooks, storestateHook)
	case boil.BeforeDeleteHook:
		storestateBeforeDeleteHooks = append(storestateBeforeDeleteHooks, storestateHook)
	case boil.BeforeUpsertHook:
		storestateBeforeUpsertHooks = append(storestateBeforeUpsertHooks, storestateHook)
	case boil.AfterInsertHook:
		storestateAfterInsertHooks = append(storestateAfterInsertHooks, storestateHook)
	case boil.AfterSelectHook:
		storestateAfterSelectHooks = append(storestateAfterSelectHooks, storestateHook)
	case boil.AfterUpdateHook:
		storestateAfterUpdateHooks = append(storestateAfterUpdateHooks, storestateHook)
	case boil.AfterDeleteHook:
		storestateAfterDeleteHooks = append(storestateAfterDeleteHooks, storestateHook)
	case boil.AfterUpsertHook:
		storestateAfterUpsertHooks = append(storestateAfterUpsertHooks, storestateHook)
	}
}

// OneG returns a single storestate record from the query using the global executor.
func (q storestateQuery) OneG() (*Storestate, error) {
	return q.One(boil.GetDB())
}

// One returns a single storestate record from the query.
func (q storestateQuery) One(exec boil.Executor) (*Storestate, error) {
	o := &Storestate{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "stellarcore: failed to execute a one query for storestate")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Storestate records from the query using the global executor.
func (q storestateQuery) AllG() (StorestateSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Storestate records from the query.
func (q storestateQuery) All(exec boil.Executor) (StorestateSlice, error) {
	var o []*Storestate

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "stellarcore: failed to assign all query results to Storestate slice")
	}

	if len(storestateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Storestate records in the query, and panics on error.
func (q storestateQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Storestate records in the query.
func (q storestateQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: failed to count storestate rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q storestateQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q storestateQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "stellarcore: failed to check if storestate exists")
	}

	return count > 0, nil
}

// Storestates retrieves all the records using an executor.
func Storestates(mods ...qm.QueryMod) storestateQuery {
	mods = append(mods, qm.From("\"storestate\""))
	return storestateQuery{NewQuery(mods...)}
}

// FindStorestateG retrieves a single record by ID.
func FindStorestateG(statename string, selectCols ...string) (*Storestate, error) {
	return FindStorestate(boil.GetDB(), statename, selectCols...)
}

// FindStorestate retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStorestate(exec boil.Executor, statename string, selectCols ...string) (*Storestate, error) {
	storestateObj := &Storestate{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"storestate\" where \"statename\"=$1", sel,
	)

	q := queries.Raw(query, statename)

	err := q.Bind(nil, exec, storestateObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "stellarcore: unable to select from storestate")
	}

	return storestateObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Storestate) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Storestate) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("stellarcore: no storestate provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(storestateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	storestateInsertCacheMut.RLock()
	cache, cached := storestateInsertCache[key]
	storestateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			storestateColumns,
			storestateColumnsWithDefault,
			storestateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(storestateType, storestateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(storestateType, storestateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"storestate\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"storestate\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "stellarcore: unable to insert into storestate")
	}

	if !cached {
		storestateInsertCacheMut.Lock()
		storestateInsertCache[key] = cache
		storestateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Storestate record using the global executor.
// See Update for more documentation.
func (o *Storestate) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Storestate.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Storestate) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	storestateUpdateCacheMut.RLock()
	cache, cached := storestateUpdateCache[key]
	storestateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			storestateColumns,
			storestatePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("stellarcore: unable to update storestate, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"storestate\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, storestatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(storestateType, storestateMapping, append(wl, storestatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to update storestate row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: failed to get rows affected by update for storestate")
	}

	if !cached {
		storestateUpdateCacheMut.Lock()
		storestateUpdateCache[key] = cache
		storestateUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q storestateQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to update all for storestate")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to retrieve rows affected for storestate")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o StorestateSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StorestateSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("stellarcore: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storestatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"storestate\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, storestatePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to update all in storestate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to retrieve rows affected all in update all storestate")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Storestate) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Storestate) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("stellarcore: no storestate provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(storestateColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	storestateUpsertCacheMut.RLock()
	cache, cached := storestateUpsertCache[key]
	storestateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			storestateColumns,
			storestateColumnsWithDefault,
			storestateColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			storestateColumns,
			storestatePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("stellarcore: unable to upsert storestate, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(storestatePrimaryKeyColumns))
			copy(conflict, storestatePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"storestate\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(storestateType, storestateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(storestateType, storestateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "stellarcore: unable to upsert storestate")
	}

	if !cached {
		storestateUpsertCacheMut.Lock()
		storestateUpsertCache[key] = cache
		storestateUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single Storestate record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Storestate) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Storestate record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Storestate) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("stellarcore: no Storestate provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), storestatePrimaryKeyMapping)
	sql := "DELETE FROM \"storestate\" WHERE \"statename\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to delete from storestate")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: failed to get rows affected by delete for storestate")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q storestateQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("stellarcore: no storestateQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to delete all from storestate")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: failed to get rows affected by deleteall for storestate")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o StorestateSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StorestateSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("stellarcore: no Storestate slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(storestateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storestatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"storestate\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, storestatePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to delete all from storestate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: failed to get rows affected by deleteall for storestate")
	}

	if len(storestateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Storestate) ReloadG() error {
	if o == nil {
		return errors.New("stellarcore: no Storestate provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Storestate) Reload(exec boil.Executor) error {
	ret, err := FindStorestate(exec, o.Statename)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StorestateSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("stellarcore: empty StorestateSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StorestateSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StorestateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storestatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"storestate\".* FROM \"storestate\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, storestatePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "stellarcore: unable to reload all in StorestateSlice")
	}

	*o = slice

	return nil
}

// StorestateExistsG checks if the Storestate row exists.
func StorestateExistsG(statename string) (bool, error) {
	return StorestateExists(boil.GetDB(), statename)
}

// StorestateExists checks if the Storestate row exists.
func StorestateExists(exec boil.Executor, statename string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"storestate\" where \"statename\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, statename)
	}

	row := exec.QueryRow(sql, statename)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "stellarcore: unable to check if storestate exists")
	}

	return exists, nil
}
