// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package stellarcore

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Accountdatum is an object representing the database table.
type Accountdatum struct {
	Accountid    string `boil:"accountid" json:"accountid" toml:"accountid" yaml:"accountid"`
	Dataname     string `boil:"dataname" json:"dataname" toml:"dataname" yaml:"dataname"`
	Datavalue    string `boil:"datavalue" json:"datavalue" toml:"datavalue" yaml:"datavalue"`
	Lastmodified int    `boil:"lastmodified" json:"lastmodified" toml:"lastmodified" yaml:"lastmodified"`

	R *accountdatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L accountdatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AccountdatumColumns = struct {
	Accountid    string
	Dataname     string
	Datavalue    string
	Lastmodified string
}{
	Accountid:    "accountid",
	Dataname:     "dataname",
	Datavalue:    "datavalue",
	Lastmodified: "lastmodified",
}

// AccountdatumRels is where relationship names are stored.
var AccountdatumRels = struct {
}{}

// accountdatumR is where relationships are stored.
type accountdatumR struct {
}

// NewStruct creates a new relationship struct
func (*accountdatumR) NewStruct() *accountdatumR {
	return &accountdatumR{}
}

// accountdatumL is where Load methods for each relationship are stored.
type accountdatumL struct{}

var (
	accountdatumColumns               = []string{"accountid", "dataname", "datavalue", "lastmodified"}
	accountdatumColumnsWithoutDefault = []string{"accountid", "dataname", "datavalue"}
	accountdatumColumnsWithDefault    = []string{"lastmodified"}
	accountdatumPrimaryKeyColumns     = []string{"accountid", "dataname"}
)

type (
	// AccountdatumSlice is an alias for a slice of pointers to Accountdatum.
	// This should generally be used opposed to []Accountdatum.
	AccountdatumSlice []*Accountdatum
	// AccountdatumHook is the signature for custom Accountdatum hook methods
	AccountdatumHook func(boil.Executor, *Accountdatum) error

	accountdatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	accountdatumType                 = reflect.TypeOf(&Accountdatum{})
	accountdatumMapping              = queries.MakeStructMapping(accountdatumType)
	accountdatumPrimaryKeyMapping, _ = queries.BindMapping(accountdatumType, accountdatumMapping, accountdatumPrimaryKeyColumns)
	accountdatumInsertCacheMut       sync.RWMutex
	accountdatumInsertCache          = make(map[string]insertCache)
	accountdatumUpdateCacheMut       sync.RWMutex
	accountdatumUpdateCache          = make(map[string]updateCache)
	accountdatumUpsertCacheMut       sync.RWMutex
	accountdatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var accountdatumBeforeInsertHooks []AccountdatumHook
var accountdatumBeforeUpdateHooks []AccountdatumHook
var accountdatumBeforeDeleteHooks []AccountdatumHook
var accountdatumBeforeUpsertHooks []AccountdatumHook

var accountdatumAfterInsertHooks []AccountdatumHook
var accountdatumAfterSelectHooks []AccountdatumHook
var accountdatumAfterUpdateHooks []AccountdatumHook
var accountdatumAfterDeleteHooks []AccountdatumHook
var accountdatumAfterUpsertHooks []AccountdatumHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Accountdatum) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range accountdatumBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Accountdatum) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range accountdatumBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Accountdatum) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range accountdatumBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Accountdatum) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range accountdatumBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Accountdatum) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range accountdatumAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Accountdatum) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range accountdatumAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Accountdatum) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range accountdatumAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Accountdatum) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range accountdatumAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Accountdatum) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range accountdatumAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAccountdatumHook registers your hook function for all future operations.
func AddAccountdatumHook(hookPoint boil.HookPoint, accountdatumHook AccountdatumHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		accountdatumBeforeInsertHooks = append(accountdatumBeforeInsertHooks, accountdatumHook)
	case boil.BeforeUpdateHook:
		accountdatumBeforeUpdateHooks = append(accountdatumBeforeUpdateHooks, accountdatumHook)
	case boil.BeforeDeleteHook:
		accountdatumBeforeDeleteHooks = append(accountdatumBeforeDeleteHooks, accountdatumHook)
	case boil.BeforeUpsertHook:
		accountdatumBeforeUpsertHooks = append(accountdatumBeforeUpsertHooks, accountdatumHook)
	case boil.AfterInsertHook:
		accountdatumAfterInsertHooks = append(accountdatumAfterInsertHooks, accountdatumHook)
	case boil.AfterSelectHook:
		accountdatumAfterSelectHooks = append(accountdatumAfterSelectHooks, accountdatumHook)
	case boil.AfterUpdateHook:
		accountdatumAfterUpdateHooks = append(accountdatumAfterUpdateHooks, accountdatumHook)
	case boil.AfterDeleteHook:
		accountdatumAfterDeleteHooks = append(accountdatumAfterDeleteHooks, accountdatumHook)
	case boil.AfterUpsertHook:
		accountdatumAfterUpsertHooks = append(accountdatumAfterUpsertHooks, accountdatumHook)
	}
}

// OneG returns a single accountdatum record from the query using the global executor.
func (q accountdatumQuery) OneG() (*Accountdatum, error) {
	return q.One(boil.GetDB())
}

// One returns a single accountdatum record from the query.
func (q accountdatumQuery) One(exec boil.Executor) (*Accountdatum, error) {
	o := &Accountdatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "stellarcore: failed to execute a one query for accountdata")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Accountdatum records from the query using the global executor.
func (q accountdatumQuery) AllG() (AccountdatumSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Accountdatum records from the query.
func (q accountdatumQuery) All(exec boil.Executor) (AccountdatumSlice, error) {
	var o []*Accountdatum

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "stellarcore: failed to assign all query results to Accountdatum slice")
	}

	if len(accountdatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Accountdatum records in the query, and panics on error.
func (q accountdatumQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Accountdatum records in the query.
func (q accountdatumQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: failed to count accountdata rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q accountdatumQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q accountdatumQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "stellarcore: failed to check if accountdata exists")
	}

	return count > 0, nil
}

// Accountdata retrieves all the records using an executor.
func Accountdata(mods ...qm.QueryMod) accountdatumQuery {
	mods = append(mods, qm.From("\"accountdata\""))
	return accountdatumQuery{NewQuery(mods...)}
}

// FindAccountdatumG retrieves a single record by ID.
func FindAccountdatumG(accountid string, dataname string, selectCols ...string) (*Accountdatum, error) {
	return FindAccountdatum(boil.GetDB(), accountid, dataname, selectCols...)
}

// FindAccountdatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAccountdatum(exec boil.Executor, accountid string, dataname string, selectCols ...string) (*Accountdatum, error) {
	accountdatumObj := &Accountdatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"accountdata\" where \"accountid\"=$1 AND \"dataname\"=$2", sel,
	)

	q := queries.Raw(query, accountid, dataname)

	err := q.Bind(nil, exec, accountdatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "stellarcore: unable to select from accountdata")
	}

	return accountdatumObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Accountdatum) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Accountdatum) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("stellarcore: no accountdata provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(accountdatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	accountdatumInsertCacheMut.RLock()
	cache, cached := accountdatumInsertCache[key]
	accountdatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			accountdatumColumns,
			accountdatumColumnsWithDefault,
			accountdatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(accountdatumType, accountdatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(accountdatumType, accountdatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"accountdata\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"accountdata\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "stellarcore: unable to insert into accountdata")
	}

	if !cached {
		accountdatumInsertCacheMut.Lock()
		accountdatumInsertCache[key] = cache
		accountdatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Accountdatum record using the global executor.
// See Update for more documentation.
func (o *Accountdatum) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Accountdatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Accountdatum) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	accountdatumUpdateCacheMut.RLock()
	cache, cached := accountdatumUpdateCache[key]
	accountdatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			accountdatumColumns,
			accountdatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("stellarcore: unable to update accountdata, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"accountdata\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, accountdatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(accountdatumType, accountdatumMapping, append(wl, accountdatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to update accountdata row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: failed to get rows affected by update for accountdata")
	}

	if !cached {
		accountdatumUpdateCacheMut.Lock()
		accountdatumUpdateCache[key] = cache
		accountdatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q accountdatumQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to update all for accountdata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to retrieve rows affected for accountdata")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AccountdatumSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AccountdatumSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("stellarcore: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountdatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"accountdata\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, accountdatumPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to update all in accountdatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to retrieve rows affected all in update all accountdatum")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Accountdatum) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Accountdatum) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("stellarcore: no accountdata provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(accountdatumColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	accountdatumUpsertCacheMut.RLock()
	cache, cached := accountdatumUpsertCache[key]
	accountdatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			accountdatumColumns,
			accountdatumColumnsWithDefault,
			accountdatumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			accountdatumColumns,
			accountdatumPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("stellarcore: unable to upsert accountdata, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(accountdatumPrimaryKeyColumns))
			copy(conflict, accountdatumPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"accountdata\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(accountdatumType, accountdatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(accountdatumType, accountdatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "stellarcore: unable to upsert accountdata")
	}

	if !cached {
		accountdatumUpsertCacheMut.Lock()
		accountdatumUpsertCache[key] = cache
		accountdatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single Accountdatum record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Accountdatum) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Accountdatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Accountdatum) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("stellarcore: no Accountdatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), accountdatumPrimaryKeyMapping)
	sql := "DELETE FROM \"accountdata\" WHERE \"accountid\"=$1 AND \"dataname\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to delete from accountdata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: failed to get rows affected by delete for accountdata")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q accountdatumQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("stellarcore: no accountdatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to delete all from accountdata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: failed to get rows affected by deleteall for accountdata")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AccountdatumSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AccountdatumSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("stellarcore: no Accountdatum slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(accountdatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountdatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"accountdata\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, accountdatumPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to delete all from accountdatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: failed to get rows affected by deleteall for accountdata")
	}

	if len(accountdatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Accountdatum) ReloadG() error {
	if o == nil {
		return errors.New("stellarcore: no Accountdatum provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Accountdatum) Reload(exec boil.Executor) error {
	ret, err := FindAccountdatum(exec, o.Accountid, o.Dataname)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AccountdatumSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("stellarcore: empty AccountdatumSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AccountdatumSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AccountdatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountdatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"accountdata\".* FROM \"accountdata\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, accountdatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "stellarcore: unable to reload all in AccountdatumSlice")
	}

	*o = slice

	return nil
}

// AccountdatumExistsG checks if the Accountdatum row exists.
func AccountdatumExistsG(accountid string, dataname string) (bool, error) {
	return AccountdatumExists(boil.GetDB(), accountid, dataname)
}

// AccountdatumExists checks if the Accountdatum row exists.
func AccountdatumExists(exec boil.Executor, accountid string, dataname string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"accountdata\" where \"accountid\"=$1 AND \"dataname\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, accountid, dataname)
	}

	row := exec.QueryRow(sql, accountid, dataname)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "stellarcore: unable to check if accountdata exists")
	}

	return exists, nil
}
