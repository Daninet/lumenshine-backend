// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package stellarcore

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Ledgerheader is an object representing the database table.
type Ledgerheader struct {
	Ledgerhash     string   `boil:"ledgerhash" json:"ledgerhash" toml:"ledgerhash" yaml:"ledgerhash"`
	Prevhash       string   `boil:"prevhash" json:"prevhash" toml:"prevhash" yaml:"prevhash"`
	Bucketlisthash string   `boil:"bucketlisthash" json:"bucketlisthash" toml:"bucketlisthash" yaml:"bucketlisthash"`
	Ledgerseq      null.Int `boil:"ledgerseq" json:"ledgerseq,omitempty" toml:"ledgerseq" yaml:"ledgerseq,omitempty"`
	Closetime      int64    `boil:"closetime" json:"closetime" toml:"closetime" yaml:"closetime"`
	Data           string   `boil:"data" json:"data" toml:"data" yaml:"data"`

	R *ledgerheaderR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ledgerheaderL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LedgerheaderColumns = struct {
	Ledgerhash     string
	Prevhash       string
	Bucketlisthash string
	Ledgerseq      string
	Closetime      string
	Data           string
}{
	Ledgerhash:     "ledgerhash",
	Prevhash:       "prevhash",
	Bucketlisthash: "bucketlisthash",
	Ledgerseq:      "ledgerseq",
	Closetime:      "closetime",
	Data:           "data",
}

// LedgerheaderRels is where relationship names are stored.
var LedgerheaderRels = struct {
}{}

// ledgerheaderR is where relationships are stored.
type ledgerheaderR struct {
}

// NewStruct creates a new relationship struct
func (*ledgerheaderR) NewStruct() *ledgerheaderR {
	return &ledgerheaderR{}
}

// ledgerheaderL is where Load methods for each relationship are stored.
type ledgerheaderL struct{}

var (
	ledgerheaderColumns               = []string{"ledgerhash", "prevhash", "bucketlisthash", "ledgerseq", "closetime", "data"}
	ledgerheaderColumnsWithoutDefault = []string{"ledgerhash", "prevhash", "bucketlisthash", "ledgerseq", "closetime", "data"}
	ledgerheaderColumnsWithDefault    = []string{}
	ledgerheaderPrimaryKeyColumns     = []string{"ledgerhash"}
)

type (
	// LedgerheaderSlice is an alias for a slice of pointers to Ledgerheader.
	// This should generally be used opposed to []Ledgerheader.
	LedgerheaderSlice []*Ledgerheader
	// LedgerheaderHook is the signature for custom Ledgerheader hook methods
	LedgerheaderHook func(boil.Executor, *Ledgerheader) error

	ledgerheaderQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ledgerheaderType                 = reflect.TypeOf(&Ledgerheader{})
	ledgerheaderMapping              = queries.MakeStructMapping(ledgerheaderType)
	ledgerheaderPrimaryKeyMapping, _ = queries.BindMapping(ledgerheaderType, ledgerheaderMapping, ledgerheaderPrimaryKeyColumns)
	ledgerheaderInsertCacheMut       sync.RWMutex
	ledgerheaderInsertCache          = make(map[string]insertCache)
	ledgerheaderUpdateCacheMut       sync.RWMutex
	ledgerheaderUpdateCache          = make(map[string]updateCache)
	ledgerheaderUpsertCacheMut       sync.RWMutex
	ledgerheaderUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var ledgerheaderBeforeInsertHooks []LedgerheaderHook
var ledgerheaderBeforeUpdateHooks []LedgerheaderHook
var ledgerheaderBeforeDeleteHooks []LedgerheaderHook
var ledgerheaderBeforeUpsertHooks []LedgerheaderHook

var ledgerheaderAfterInsertHooks []LedgerheaderHook
var ledgerheaderAfterSelectHooks []LedgerheaderHook
var ledgerheaderAfterUpdateHooks []LedgerheaderHook
var ledgerheaderAfterDeleteHooks []LedgerheaderHook
var ledgerheaderAfterUpsertHooks []LedgerheaderHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Ledgerheader) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range ledgerheaderBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Ledgerheader) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range ledgerheaderBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Ledgerheader) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range ledgerheaderBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Ledgerheader) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range ledgerheaderBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Ledgerheader) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range ledgerheaderAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Ledgerheader) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range ledgerheaderAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Ledgerheader) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range ledgerheaderAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Ledgerheader) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range ledgerheaderAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Ledgerheader) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range ledgerheaderAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLedgerheaderHook registers your hook function for all future operations.
func AddLedgerheaderHook(hookPoint boil.HookPoint, ledgerheaderHook LedgerheaderHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		ledgerheaderBeforeInsertHooks = append(ledgerheaderBeforeInsertHooks, ledgerheaderHook)
	case boil.BeforeUpdateHook:
		ledgerheaderBeforeUpdateHooks = append(ledgerheaderBeforeUpdateHooks, ledgerheaderHook)
	case boil.BeforeDeleteHook:
		ledgerheaderBeforeDeleteHooks = append(ledgerheaderBeforeDeleteHooks, ledgerheaderHook)
	case boil.BeforeUpsertHook:
		ledgerheaderBeforeUpsertHooks = append(ledgerheaderBeforeUpsertHooks, ledgerheaderHook)
	case boil.AfterInsertHook:
		ledgerheaderAfterInsertHooks = append(ledgerheaderAfterInsertHooks, ledgerheaderHook)
	case boil.AfterSelectHook:
		ledgerheaderAfterSelectHooks = append(ledgerheaderAfterSelectHooks, ledgerheaderHook)
	case boil.AfterUpdateHook:
		ledgerheaderAfterUpdateHooks = append(ledgerheaderAfterUpdateHooks, ledgerheaderHook)
	case boil.AfterDeleteHook:
		ledgerheaderAfterDeleteHooks = append(ledgerheaderAfterDeleteHooks, ledgerheaderHook)
	case boil.AfterUpsertHook:
		ledgerheaderAfterUpsertHooks = append(ledgerheaderAfterUpsertHooks, ledgerheaderHook)
	}
}

// OneG returns a single ledgerheader record from the query using the global executor.
func (q ledgerheaderQuery) OneG() (*Ledgerheader, error) {
	return q.One(boil.GetDB())
}

// One returns a single ledgerheader record from the query.
func (q ledgerheaderQuery) One(exec boil.Executor) (*Ledgerheader, error) {
	o := &Ledgerheader{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "stellarcore: failed to execute a one query for ledgerheaders")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Ledgerheader records from the query using the global executor.
func (q ledgerheaderQuery) AllG() (LedgerheaderSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Ledgerheader records from the query.
func (q ledgerheaderQuery) All(exec boil.Executor) (LedgerheaderSlice, error) {
	var o []*Ledgerheader

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "stellarcore: failed to assign all query results to Ledgerheader slice")
	}

	if len(ledgerheaderAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Ledgerheader records in the query, and panics on error.
func (q ledgerheaderQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Ledgerheader records in the query.
func (q ledgerheaderQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: failed to count ledgerheaders rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q ledgerheaderQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q ledgerheaderQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "stellarcore: failed to check if ledgerheaders exists")
	}

	return count > 0, nil
}

// Ledgerheaders retrieves all the records using an executor.
func Ledgerheaders(mods ...qm.QueryMod) ledgerheaderQuery {
	mods = append(mods, qm.From("\"ledgerheaders\""))
	return ledgerheaderQuery{NewQuery(mods...)}
}

// FindLedgerheaderG retrieves a single record by ID.
func FindLedgerheaderG(ledgerhash string, selectCols ...string) (*Ledgerheader, error) {
	return FindLedgerheader(boil.GetDB(), ledgerhash, selectCols...)
}

// FindLedgerheader retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLedgerheader(exec boil.Executor, ledgerhash string, selectCols ...string) (*Ledgerheader, error) {
	ledgerheaderObj := &Ledgerheader{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ledgerheaders\" where \"ledgerhash\"=$1", sel,
	)

	q := queries.Raw(query, ledgerhash)

	err := q.Bind(nil, exec, ledgerheaderObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "stellarcore: unable to select from ledgerheaders")
	}

	return ledgerheaderObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Ledgerheader) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Ledgerheader) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("stellarcore: no ledgerheaders provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ledgerheaderColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ledgerheaderInsertCacheMut.RLock()
	cache, cached := ledgerheaderInsertCache[key]
	ledgerheaderInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ledgerheaderColumns,
			ledgerheaderColumnsWithDefault,
			ledgerheaderColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(ledgerheaderType, ledgerheaderMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ledgerheaderType, ledgerheaderMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ledgerheaders\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ledgerheaders\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "stellarcore: unable to insert into ledgerheaders")
	}

	if !cached {
		ledgerheaderInsertCacheMut.Lock()
		ledgerheaderInsertCache[key] = cache
		ledgerheaderInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Ledgerheader record using the global executor.
// See Update for more documentation.
func (o *Ledgerheader) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Ledgerheader.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Ledgerheader) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ledgerheaderUpdateCacheMut.RLock()
	cache, cached := ledgerheaderUpdateCache[key]
	ledgerheaderUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ledgerheaderColumns,
			ledgerheaderPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("stellarcore: unable to update ledgerheaders, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ledgerheaders\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, ledgerheaderPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ledgerheaderType, ledgerheaderMapping, append(wl, ledgerheaderPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to update ledgerheaders row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: failed to get rows affected by update for ledgerheaders")
	}

	if !cached {
		ledgerheaderUpdateCacheMut.Lock()
		ledgerheaderUpdateCache[key] = cache
		ledgerheaderUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q ledgerheaderQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to update all for ledgerheaders")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to retrieve rows affected for ledgerheaders")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o LedgerheaderSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LedgerheaderSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("stellarcore: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ledgerheaderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ledgerheaders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, ledgerheaderPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to update all in ledgerheader slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to retrieve rows affected all in update all ledgerheader")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Ledgerheader) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Ledgerheader) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("stellarcore: no ledgerheaders provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ledgerheaderColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ledgerheaderUpsertCacheMut.RLock()
	cache, cached := ledgerheaderUpsertCache[key]
	ledgerheaderUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			ledgerheaderColumns,
			ledgerheaderColumnsWithDefault,
			ledgerheaderColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			ledgerheaderColumns,
			ledgerheaderPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("stellarcore: unable to upsert ledgerheaders, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(ledgerheaderPrimaryKeyColumns))
			copy(conflict, ledgerheaderPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"ledgerheaders\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(ledgerheaderType, ledgerheaderMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ledgerheaderType, ledgerheaderMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "stellarcore: unable to upsert ledgerheaders")
	}

	if !cached {
		ledgerheaderUpsertCacheMut.Lock()
		ledgerheaderUpsertCache[key] = cache
		ledgerheaderUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single Ledgerheader record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Ledgerheader) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Ledgerheader record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Ledgerheader) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("stellarcore: no Ledgerheader provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ledgerheaderPrimaryKeyMapping)
	sql := "DELETE FROM \"ledgerheaders\" WHERE \"ledgerhash\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to delete from ledgerheaders")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: failed to get rows affected by delete for ledgerheaders")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q ledgerheaderQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("stellarcore: no ledgerheaderQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to delete all from ledgerheaders")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: failed to get rows affected by deleteall for ledgerheaders")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o LedgerheaderSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LedgerheaderSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("stellarcore: no Ledgerheader slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(ledgerheaderBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ledgerheaderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ledgerheaders\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ledgerheaderPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to delete all from ledgerheader slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: failed to get rows affected by deleteall for ledgerheaders")
	}

	if len(ledgerheaderAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Ledgerheader) ReloadG() error {
	if o == nil {
		return errors.New("stellarcore: no Ledgerheader provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Ledgerheader) Reload(exec boil.Executor) error {
	ret, err := FindLedgerheader(exec, o.Ledgerhash)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LedgerheaderSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("stellarcore: empty LedgerheaderSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LedgerheaderSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LedgerheaderSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ledgerheaderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ledgerheaders\".* FROM \"ledgerheaders\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ledgerheaderPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "stellarcore: unable to reload all in LedgerheaderSlice")
	}

	*o = slice

	return nil
}

// LedgerheaderExistsG checks if the Ledgerheader row exists.
func LedgerheaderExistsG(ledgerhash string) (bool, error) {
	return LedgerheaderExists(boil.GetDB(), ledgerhash)
}

// LedgerheaderExists checks if the Ledgerheader row exists.
func LedgerheaderExists(exec boil.Executor, ledgerhash string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ledgerheaders\" where \"ledgerhash\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, ledgerhash)
	}

	row := exec.QueryRow(sql, ledgerhash)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "stellarcore: unable to check if ledgerheaders exists")
	}

	return exists, nil
}
