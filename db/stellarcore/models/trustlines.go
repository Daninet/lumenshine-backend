// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package stellarcore

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Trustline is an object representing the database table.
type Trustline struct {
	Accountid    string `boil:"accountid" json:"accountid" toml:"accountid" yaml:"accountid"`
	Assettype    int    `boil:"assettype" json:"assettype" toml:"assettype" yaml:"assettype"`
	Issuer       string `boil:"issuer" json:"issuer" toml:"issuer" yaml:"issuer"`
	Assetcode    string `boil:"assetcode" json:"assetcode" toml:"assetcode" yaml:"assetcode"`
	Tlimit       int64  `boil:"tlimit" json:"tlimit" toml:"tlimit" yaml:"tlimit"`
	Balance      int64  `boil:"balance" json:"balance" toml:"balance" yaml:"balance"`
	Flags        int    `boil:"flags" json:"flags" toml:"flags" yaml:"flags"`
	Lastmodified int    `boil:"lastmodified" json:"lastmodified" toml:"lastmodified" yaml:"lastmodified"`

	R *trustlineR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L trustlineL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TrustlineColumns = struct {
	Accountid    string
	Assettype    string
	Issuer       string
	Assetcode    string
	Tlimit       string
	Balance      string
	Flags        string
	Lastmodified string
}{
	Accountid:    "accountid",
	Assettype:    "assettype",
	Issuer:       "issuer",
	Assetcode:    "assetcode",
	Tlimit:       "tlimit",
	Balance:      "balance",
	Flags:        "flags",
	Lastmodified: "lastmodified",
}

// TrustlineRels is where relationship names are stored.
var TrustlineRels = struct {
}{}

// trustlineR is where relationships are stored.
type trustlineR struct {
}

// NewStruct creates a new relationship struct
func (*trustlineR) NewStruct() *trustlineR {
	return &trustlineR{}
}

// trustlineL is where Load methods for each relationship are stored.
type trustlineL struct{}

var (
	trustlineColumns               = []string{"accountid", "assettype", "issuer", "assetcode", "tlimit", "balance", "flags", "lastmodified"}
	trustlineColumnsWithoutDefault = []string{"accountid", "assettype", "issuer", "assetcode", "tlimit", "balance", "flags", "lastmodified"}
	trustlineColumnsWithDefault    = []string{}
	trustlinePrimaryKeyColumns     = []string{"accountid", "issuer", "assetcode"}
)

type (
	// TrustlineSlice is an alias for a slice of pointers to Trustline.
	// This should generally be used opposed to []Trustline.
	TrustlineSlice []*Trustline
	// TrustlineHook is the signature for custom Trustline hook methods
	TrustlineHook func(boil.Executor, *Trustline) error

	trustlineQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	trustlineType                 = reflect.TypeOf(&Trustline{})
	trustlineMapping              = queries.MakeStructMapping(trustlineType)
	trustlinePrimaryKeyMapping, _ = queries.BindMapping(trustlineType, trustlineMapping, trustlinePrimaryKeyColumns)
	trustlineInsertCacheMut       sync.RWMutex
	trustlineInsertCache          = make(map[string]insertCache)
	trustlineUpdateCacheMut       sync.RWMutex
	trustlineUpdateCache          = make(map[string]updateCache)
	trustlineUpsertCacheMut       sync.RWMutex
	trustlineUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var trustlineBeforeInsertHooks []TrustlineHook
var trustlineBeforeUpdateHooks []TrustlineHook
var trustlineBeforeDeleteHooks []TrustlineHook
var trustlineBeforeUpsertHooks []TrustlineHook

var trustlineAfterInsertHooks []TrustlineHook
var trustlineAfterSelectHooks []TrustlineHook
var trustlineAfterUpdateHooks []TrustlineHook
var trustlineAfterDeleteHooks []TrustlineHook
var trustlineAfterUpsertHooks []TrustlineHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Trustline) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range trustlineBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Trustline) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range trustlineBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Trustline) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range trustlineBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Trustline) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range trustlineBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Trustline) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range trustlineAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Trustline) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range trustlineAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Trustline) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range trustlineAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Trustline) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range trustlineAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Trustline) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range trustlineAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTrustlineHook registers your hook function for all future operations.
func AddTrustlineHook(hookPoint boil.HookPoint, trustlineHook TrustlineHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		trustlineBeforeInsertHooks = append(trustlineBeforeInsertHooks, trustlineHook)
	case boil.BeforeUpdateHook:
		trustlineBeforeUpdateHooks = append(trustlineBeforeUpdateHooks, trustlineHook)
	case boil.BeforeDeleteHook:
		trustlineBeforeDeleteHooks = append(trustlineBeforeDeleteHooks, trustlineHook)
	case boil.BeforeUpsertHook:
		trustlineBeforeUpsertHooks = append(trustlineBeforeUpsertHooks, trustlineHook)
	case boil.AfterInsertHook:
		trustlineAfterInsertHooks = append(trustlineAfterInsertHooks, trustlineHook)
	case boil.AfterSelectHook:
		trustlineAfterSelectHooks = append(trustlineAfterSelectHooks, trustlineHook)
	case boil.AfterUpdateHook:
		trustlineAfterUpdateHooks = append(trustlineAfterUpdateHooks, trustlineHook)
	case boil.AfterDeleteHook:
		trustlineAfterDeleteHooks = append(trustlineAfterDeleteHooks, trustlineHook)
	case boil.AfterUpsertHook:
		trustlineAfterUpsertHooks = append(trustlineAfterUpsertHooks, trustlineHook)
	}
}

// OneG returns a single trustline record from the query using the global executor.
func (q trustlineQuery) OneG() (*Trustline, error) {
	return q.One(boil.GetDB())
}

// One returns a single trustline record from the query.
func (q trustlineQuery) One(exec boil.Executor) (*Trustline, error) {
	o := &Trustline{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "stellarcore: failed to execute a one query for trustlines")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Trustline records from the query using the global executor.
func (q trustlineQuery) AllG() (TrustlineSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Trustline records from the query.
func (q trustlineQuery) All(exec boil.Executor) (TrustlineSlice, error) {
	var o []*Trustline

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "stellarcore: failed to assign all query results to Trustline slice")
	}

	if len(trustlineAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Trustline records in the query, and panics on error.
func (q trustlineQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Trustline records in the query.
func (q trustlineQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: failed to count trustlines rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q trustlineQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q trustlineQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "stellarcore: failed to check if trustlines exists")
	}

	return count > 0, nil
}

// Trustlines retrieves all the records using an executor.
func Trustlines(mods ...qm.QueryMod) trustlineQuery {
	mods = append(mods, qm.From("\"trustlines\""))
	return trustlineQuery{NewQuery(mods...)}
}

// FindTrustlineG retrieves a single record by ID.
func FindTrustlineG(accountid string, issuer string, assetcode string, selectCols ...string) (*Trustline, error) {
	return FindTrustline(boil.GetDB(), accountid, issuer, assetcode, selectCols...)
}

// FindTrustline retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTrustline(exec boil.Executor, accountid string, issuer string, assetcode string, selectCols ...string) (*Trustline, error) {
	trustlineObj := &Trustline{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"trustlines\" where \"accountid\"=$1 AND \"issuer\"=$2 AND \"assetcode\"=$3", sel,
	)

	q := queries.Raw(query, accountid, issuer, assetcode)

	err := q.Bind(nil, exec, trustlineObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "stellarcore: unable to select from trustlines")
	}

	return trustlineObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Trustline) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Trustline) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("stellarcore: no trustlines provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trustlineColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	trustlineInsertCacheMut.RLock()
	cache, cached := trustlineInsertCache[key]
	trustlineInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			trustlineColumns,
			trustlineColumnsWithDefault,
			trustlineColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(trustlineType, trustlineMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(trustlineType, trustlineMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"trustlines\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"trustlines\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "stellarcore: unable to insert into trustlines")
	}

	if !cached {
		trustlineInsertCacheMut.Lock()
		trustlineInsertCache[key] = cache
		trustlineInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Trustline record using the global executor.
// See Update for more documentation.
func (o *Trustline) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Trustline.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Trustline) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	trustlineUpdateCacheMut.RLock()
	cache, cached := trustlineUpdateCache[key]
	trustlineUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			trustlineColumns,
			trustlinePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("stellarcore: unable to update trustlines, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"trustlines\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, trustlinePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(trustlineType, trustlineMapping, append(wl, trustlinePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to update trustlines row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: failed to get rows affected by update for trustlines")
	}

	if !cached {
		trustlineUpdateCacheMut.Lock()
		trustlineUpdateCache[key] = cache
		trustlineUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q trustlineQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to update all for trustlines")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to retrieve rows affected for trustlines")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TrustlineSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TrustlineSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("stellarcore: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trustlinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"trustlines\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, trustlinePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to update all in trustline slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to retrieve rows affected all in update all trustline")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Trustline) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Trustline) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("stellarcore: no trustlines provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trustlineColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	trustlineUpsertCacheMut.RLock()
	cache, cached := trustlineUpsertCache[key]
	trustlineUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			trustlineColumns,
			trustlineColumnsWithDefault,
			trustlineColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			trustlineColumns,
			trustlinePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("stellarcore: unable to upsert trustlines, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(trustlinePrimaryKeyColumns))
			copy(conflict, trustlinePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"trustlines\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(trustlineType, trustlineMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(trustlineType, trustlineMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "stellarcore: unable to upsert trustlines")
	}

	if !cached {
		trustlineUpsertCacheMut.Lock()
		trustlineUpsertCache[key] = cache
		trustlineUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single Trustline record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Trustline) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Trustline record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Trustline) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("stellarcore: no Trustline provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), trustlinePrimaryKeyMapping)
	sql := "DELETE FROM \"trustlines\" WHERE \"accountid\"=$1 AND \"issuer\"=$2 AND \"assetcode\"=$3"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to delete from trustlines")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: failed to get rows affected by delete for trustlines")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q trustlineQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("stellarcore: no trustlineQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to delete all from trustlines")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: failed to get rows affected by deleteall for trustlines")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TrustlineSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TrustlineSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("stellarcore: no Trustline slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(trustlineBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trustlinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"trustlines\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, trustlinePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: unable to delete all from trustline slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "stellarcore: failed to get rows affected by deleteall for trustlines")
	}

	if len(trustlineAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Trustline) ReloadG() error {
	if o == nil {
		return errors.New("stellarcore: no Trustline provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Trustline) Reload(exec boil.Executor) error {
	ret, err := FindTrustline(exec, o.Accountid, o.Issuer, o.Assetcode)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TrustlineSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("stellarcore: empty TrustlineSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TrustlineSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TrustlineSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trustlinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"trustlines\".* FROM \"trustlines\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, trustlinePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "stellarcore: unable to reload all in TrustlineSlice")
	}

	*o = slice

	return nil
}

// TrustlineExistsG checks if the Trustline row exists.
func TrustlineExistsG(accountid string, issuer string, assetcode string) (bool, error) {
	return TrustlineExists(boil.GetDB(), accountid, issuer, assetcode)
}

// TrustlineExists checks if the Trustline row exists.
func TrustlineExists(exec boil.Executor, accountid string, issuer string, assetcode string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"trustlines\" where \"accountid\"=$1 AND \"issuer\"=$2 AND \"assetcode\"=$3 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, accountid, issuer, assetcode)
	}

	row := exec.QueryRow(sql, accountid, issuer, assetcode)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "stellarcore: unable to check if trustlines exists")
	}

	return exists, nil
}
