// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// UserMessage is an object representing the database table.
type UserMessage struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID    int       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Title     string    `boil:"title" json:"title" toml:"title" yaml:"title"`
	Message   string    `boil:"message" json:"message" toml:"message" yaml:"message"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UpdatedBy string    `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`

	R *userMessageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userMessageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserMessageColumns = struct {
	ID        string
	UserID    string
	Title     string
	Message   string
	CreatedAt string
	UpdatedAt string
	UpdatedBy string
}{
	ID:        "id",
	UserID:    "user_id",
	Title:     "title",
	Message:   "message",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	UpdatedBy: "updated_by",
}

// userMessageR is where relationships are stored.
type userMessageR struct {
	User *UserProfile
}

// userMessageL is where Load methods for each relationship are stored.
type userMessageL struct{}

var (
	userMessageColumns               = []string{"id", "user_id", "title", "message", "created_at", "updated_at", "updated_by"}
	userMessageColumnsWithoutDefault = []string{"user_id", "title", "message", "updated_by"}
	userMessageColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	userMessagePrimaryKeyColumns     = []string{"id"}
)

type (
	// UserMessageSlice is an alias for a slice of pointers to UserMessage.
	// This should generally be used opposed to []UserMessage.
	UserMessageSlice []*UserMessage
	// UserMessageHook is the signature for custom UserMessage hook methods
	UserMessageHook func(boil.Executor, *UserMessage) error

	userMessageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userMessageType                 = reflect.TypeOf(&UserMessage{})
	userMessageMapping              = queries.MakeStructMapping(userMessageType)
	userMessagePrimaryKeyMapping, _ = queries.BindMapping(userMessageType, userMessageMapping, userMessagePrimaryKeyColumns)
	userMessageInsertCacheMut       sync.RWMutex
	userMessageInsertCache          = make(map[string]insertCache)
	userMessageUpdateCacheMut       sync.RWMutex
	userMessageUpdateCache          = make(map[string]updateCache)
	userMessageUpsertCacheMut       sync.RWMutex
	userMessageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var userMessageBeforeInsertHooks []UserMessageHook
var userMessageBeforeUpdateHooks []UserMessageHook
var userMessageBeforeDeleteHooks []UserMessageHook
var userMessageBeforeUpsertHooks []UserMessageHook

var userMessageAfterInsertHooks []UserMessageHook
var userMessageAfterSelectHooks []UserMessageHook
var userMessageAfterUpdateHooks []UserMessageHook
var userMessageAfterDeleteHooks []UserMessageHook
var userMessageAfterUpsertHooks []UserMessageHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserMessage) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userMessageBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserMessage) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userMessageBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserMessage) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userMessageBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserMessage) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userMessageBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserMessage) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userMessageAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserMessage) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range userMessageAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserMessage) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userMessageAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserMessage) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userMessageAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserMessage) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userMessageAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserMessageHook registers your hook function for all future operations.
func AddUserMessageHook(hookPoint boil.HookPoint, userMessageHook UserMessageHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userMessageBeforeInsertHooks = append(userMessageBeforeInsertHooks, userMessageHook)
	case boil.BeforeUpdateHook:
		userMessageBeforeUpdateHooks = append(userMessageBeforeUpdateHooks, userMessageHook)
	case boil.BeforeDeleteHook:
		userMessageBeforeDeleteHooks = append(userMessageBeforeDeleteHooks, userMessageHook)
	case boil.BeforeUpsertHook:
		userMessageBeforeUpsertHooks = append(userMessageBeforeUpsertHooks, userMessageHook)
	case boil.AfterInsertHook:
		userMessageAfterInsertHooks = append(userMessageAfterInsertHooks, userMessageHook)
	case boil.AfterSelectHook:
		userMessageAfterSelectHooks = append(userMessageAfterSelectHooks, userMessageHook)
	case boil.AfterUpdateHook:
		userMessageAfterUpdateHooks = append(userMessageAfterUpdateHooks, userMessageHook)
	case boil.AfterDeleteHook:
		userMessageAfterDeleteHooks = append(userMessageAfterDeleteHooks, userMessageHook)
	case boil.AfterUpsertHook:
		userMessageAfterUpsertHooks = append(userMessageAfterUpsertHooks, userMessageHook)
	}
}

// OneP returns a single userMessage record from the query, and panics on error.
func (q userMessageQuery) OneP() *UserMessage {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single userMessage record from the query.
func (q userMessageQuery) One() (*UserMessage, error) {
	o := &UserMessage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_message")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all UserMessage records from the query, and panics on error.
func (q userMessageQuery) AllP() UserMessageSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all UserMessage records from the query.
func (q userMessageQuery) All() (UserMessageSlice, error) {
	var o []*UserMessage

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserMessage slice")
	}

	if len(userMessageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all UserMessage records in the query, and panics on error.
func (q userMessageQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all UserMessage records in the query.
func (q userMessageQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_message rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q userMessageQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q userMessageQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_message exists")
	}

	return count > 0, nil
}

// UserG pointed to by the foreign key.
func (o *UserMessage) UserG(mods ...qm.QueryMod) userProfileQuery {
	return o.User(boil.GetDB(), mods...)
}

// User pointed to by the foreign key.
func (o *UserMessage) User(exec boil.Executor, mods ...qm.QueryMod) userProfileQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := UserProfiles(exec, queryMods...)
	queries.SetFrom(query.Query, "\"user_profile\"")

	return query
} // LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (userMessageL) LoadUser(e boil.Executor, singular bool, maybeUserMessage interface{}) error {
	var slice []*UserMessage
	var object *UserMessage

	count := 1
	if singular {
		object = maybeUserMessage.(*UserMessage)
	} else {
		slice = *maybeUserMessage.(*[]*UserMessage)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &userMessageR{}
		}
		args[0] = object.UserID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &userMessageR{}
			}
			args[i] = obj.UserID
		}
	}

	query := fmt.Sprintf(
		"select * from \"user_profile\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserProfile")
	}
	defer results.Close()

	var resultSlice []*UserProfile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserProfile")
	}

	if len(userMessageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.User = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				break
			}
		}
	}

	return nil
}

// SetUserG of the user_message to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserUserMessages.
// Uses the global database handle.
func (o *UserMessage) SetUserG(insert bool, related *UserProfile) error {
	return o.SetUser(boil.GetDB(), insert, related)
}

// SetUserP of the user_message to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserUserMessages.
// Panics on error.
func (o *UserMessage) SetUserP(exec boil.Executor, insert bool, related *UserProfile) {
	if err := o.SetUser(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUserGP of the user_message to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserUserMessages.
// Uses the global database handle and panics on error.
func (o *UserMessage) SetUserGP(insert bool, related *UserProfile) {
	if err := o.SetUser(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUser of the user_message to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserUserMessages.
func (o *UserMessage) SetUser(exec boil.Executor, insert bool, related *UserProfile) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_message\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userMessagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID

	if o.R == nil {
		o.R = &userMessageR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userProfileR{
			UserUserMessages: UserMessageSlice{o},
		}
	} else {
		related.R.UserUserMessages = append(related.R.UserUserMessages, o)
	}

	return nil
}

// UserMessagesG retrieves all records.
func UserMessagesG(mods ...qm.QueryMod) userMessageQuery {
	return UserMessages(boil.GetDB(), mods...)
}

// UserMessages retrieves all the records using an executor.
func UserMessages(exec boil.Executor, mods ...qm.QueryMod) userMessageQuery {
	mods = append(mods, qm.From("\"user_message\""))
	return userMessageQuery{NewQuery(exec, mods...)}
}

// FindUserMessageG retrieves a single record by ID.
func FindUserMessageG(id int, selectCols ...string) (*UserMessage, error) {
	return FindUserMessage(boil.GetDB(), id, selectCols...)
}

// FindUserMessageGP retrieves a single record by ID, and panics on error.
func FindUserMessageGP(id int, selectCols ...string) *UserMessage {
	retobj, err := FindUserMessage(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindUserMessage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserMessage(exec boil.Executor, id int, selectCols ...string) (*UserMessage, error) {
	userMessageObj := &UserMessage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_message\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(userMessageObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_message")
	}

	return userMessageObj, nil
}

// FindUserMessageP retrieves a single record by ID with an executor, and panics on error.
func FindUserMessageP(exec boil.Executor, id int, selectCols ...string) *UserMessage {
	retobj, err := FindUserMessage(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UserMessage) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *UserMessage) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *UserMessage) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *UserMessage) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no user_message provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userMessageColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	userMessageInsertCacheMut.RLock()
	cache, cached := userMessageInsertCache[key]
	userMessageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			userMessageColumns,
			userMessageColumnsWithDefault,
			userMessageColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(userMessageType, userMessageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userMessageType, userMessageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_message\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_message\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_message")
	}

	if !cached {
		userMessageInsertCacheMut.Lock()
		userMessageInsertCache[key] = cache
		userMessageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single UserMessage record. See Update for
// whitelist behavior description.
func (o *UserMessage) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single UserMessage record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *UserMessage) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the UserMessage, and panics on error.
// See Update for whitelist behavior description.
func (o *UserMessage) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the UserMessage.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *UserMessage) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	userMessageUpdateCacheMut.RLock()
	cache, cached := userMessageUpdateCache[key]
	userMessageUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			userMessageColumns,
			userMessagePrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update user_message, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_message\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userMessagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userMessageType, userMessageMapping, append(wl, userMessagePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update user_message row")
	}

	if !cached {
		userMessageUpdateCacheMut.Lock()
		userMessageUpdateCache[key] = cache
		userMessageUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q userMessageQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q userMessageQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for user_message")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UserMessageSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o UserMessageSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o UserMessageSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserMessageSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userMessagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_message\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userMessagePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in userMessage slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UserMessage) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *UserMessage) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *UserMessage) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *UserMessage) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no user_message provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userMessageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userMessageUpsertCacheMut.RLock()
	cache, cached := userMessageUpsertCache[key]
	userMessageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			userMessageColumns,
			userMessageColumnsWithDefault,
			userMessageColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			userMessageColumns,
			userMessagePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert user_message, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userMessagePrimaryKeyColumns))
			copy(conflict, userMessagePrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"user_message\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userMessageType, userMessageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userMessageType, userMessageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_message")
	}

	if !cached {
		userMessageUpsertCacheMut.Lock()
		userMessageUpsertCache[key] = cache
		userMessageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single UserMessage record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UserMessage) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single UserMessage record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UserMessage) DeleteG() error {
	if o == nil {
		return errors.New("models: no UserMessage provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single UserMessage record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UserMessage) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single UserMessage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserMessage) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no UserMessage provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userMessagePrimaryKeyMapping)
	sql := "DELETE FROM \"user_message\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from user_message")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q userMessageQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q userMessageQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no userMessageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from user_message")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o UserMessageSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o UserMessageSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no UserMessage slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o UserMessageSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserMessageSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no UserMessage slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(userMessageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userMessagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_message\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userMessagePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from userMessage slice")
	}

	if len(userMessageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *UserMessage) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *UserMessage) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UserMessage) ReloadG() error {
	if o == nil {
		return errors.New("models: no UserMessage provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserMessage) Reload(exec boil.Executor) error {
	ret, err := FindUserMessage(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UserMessageSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UserMessageSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserMessageSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty UserMessageSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserMessageSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	userMessages := UserMessageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userMessagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_message\".* FROM \"user_message\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userMessagePrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&userMessages)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserMessageSlice")
	}

	*o = userMessages

	return nil
}

// UserMessageExists checks if the UserMessage row exists.
func UserMessageExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_message\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_message exists")
	}

	return exists, nil
}

// UserMessageExistsG checks if the UserMessage row exists.
func UserMessageExistsG(id int) (bool, error) {
	return UserMessageExists(boil.GetDB(), id)
}

// UserMessageExistsGP checks if the UserMessage row exists. Panics on error.
func UserMessageExistsGP(id int) bool {
	e, err := UserMessageExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// UserMessageExistsP checks if the UserMessage row exists. Panics on error.
func UserMessageExistsP(exec boil.Executor, id int) bool {
	e, err := UserMessageExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
