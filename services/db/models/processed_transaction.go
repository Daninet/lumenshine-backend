// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ProcessedTransaction is an object representing the database table.
type ProcessedTransaction struct {
	Chain            string    `boil:"chain" json:"chain" toml:"chain" yaml:"chain"`
	Status           string    `boil:"status" json:"status" toml:"status" yaml:"status"`
	TransactionID    string    `boil:"transaction_id" json:"transaction_id" toml:"transaction_id" yaml:"transaction_id"`
	ReceivingAddress string    `boil:"receiving_address" json:"receiving_address" toml:"receiving_address" yaml:"receiving_address"`
	ChainAmountDenom string    `boil:"chain_amount_denom" json:"chain_amount_denom" toml:"chain_amount_denom" yaml:"chain_amount_denom"`
	UserOrderID      int       `boil:"user_order_id" json:"user_order_id" toml:"user_order_id" yaml:"user_order_id"`
	CreatedAt        time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt        time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *processedTransactionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L processedTransactionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProcessedTransactionColumns = struct {
	Chain            string
	Status           string
	TransactionID    string
	ReceivingAddress string
	ChainAmountDenom string
	UserOrderID      string
	CreatedAt        string
	UpdatedAt        string
}{
	Chain:            "chain",
	Status:           "status",
	TransactionID:    "transaction_id",
	ReceivingAddress: "receiving_address",
	ChainAmountDenom: "chain_amount_denom",
	UserOrderID:      "user_order_id",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
}

// processedTransactionR is where relationships are stored.
type processedTransactionR struct {
	UserOrder *UserOrder
}

// processedTransactionL is where Load methods for each relationship are stored.
type processedTransactionL struct{}

var (
	processedTransactionColumns               = []string{"chain", "status", "transaction_id", "receiving_address", "chain_amount_denom", "user_order_id", "created_at", "updated_at"}
	processedTransactionColumnsWithoutDefault = []string{"chain", "status", "transaction_id", "receiving_address", "chain_amount_denom", "user_order_id"}
	processedTransactionColumnsWithDefault    = []string{"created_at", "updated_at"}
	processedTransactionPrimaryKeyColumns     = []string{"chain", "transaction_id"}
)

type (
	// ProcessedTransactionSlice is an alias for a slice of pointers to ProcessedTransaction.
	// This should generally be used opposed to []ProcessedTransaction.
	ProcessedTransactionSlice []*ProcessedTransaction
	// ProcessedTransactionHook is the signature for custom ProcessedTransaction hook methods
	ProcessedTransactionHook func(boil.Executor, *ProcessedTransaction) error

	processedTransactionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	processedTransactionType                 = reflect.TypeOf(&ProcessedTransaction{})
	processedTransactionMapping              = queries.MakeStructMapping(processedTransactionType)
	processedTransactionPrimaryKeyMapping, _ = queries.BindMapping(processedTransactionType, processedTransactionMapping, processedTransactionPrimaryKeyColumns)
	processedTransactionInsertCacheMut       sync.RWMutex
	processedTransactionInsertCache          = make(map[string]insertCache)
	processedTransactionUpdateCacheMut       sync.RWMutex
	processedTransactionUpdateCache          = make(map[string]updateCache)
	processedTransactionUpsertCacheMut       sync.RWMutex
	processedTransactionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var processedTransactionBeforeInsertHooks []ProcessedTransactionHook
var processedTransactionBeforeUpdateHooks []ProcessedTransactionHook
var processedTransactionBeforeDeleteHooks []ProcessedTransactionHook
var processedTransactionBeforeUpsertHooks []ProcessedTransactionHook

var processedTransactionAfterInsertHooks []ProcessedTransactionHook
var processedTransactionAfterSelectHooks []ProcessedTransactionHook
var processedTransactionAfterUpdateHooks []ProcessedTransactionHook
var processedTransactionAfterDeleteHooks []ProcessedTransactionHook
var processedTransactionAfterUpsertHooks []ProcessedTransactionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProcessedTransaction) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range processedTransactionBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProcessedTransaction) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range processedTransactionBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProcessedTransaction) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range processedTransactionBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProcessedTransaction) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range processedTransactionBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProcessedTransaction) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range processedTransactionAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProcessedTransaction) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range processedTransactionAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProcessedTransaction) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range processedTransactionAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProcessedTransaction) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range processedTransactionAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProcessedTransaction) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range processedTransactionAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProcessedTransactionHook registers your hook function for all future operations.
func AddProcessedTransactionHook(hookPoint boil.HookPoint, processedTransactionHook ProcessedTransactionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		processedTransactionBeforeInsertHooks = append(processedTransactionBeforeInsertHooks, processedTransactionHook)
	case boil.BeforeUpdateHook:
		processedTransactionBeforeUpdateHooks = append(processedTransactionBeforeUpdateHooks, processedTransactionHook)
	case boil.BeforeDeleteHook:
		processedTransactionBeforeDeleteHooks = append(processedTransactionBeforeDeleteHooks, processedTransactionHook)
	case boil.BeforeUpsertHook:
		processedTransactionBeforeUpsertHooks = append(processedTransactionBeforeUpsertHooks, processedTransactionHook)
	case boil.AfterInsertHook:
		processedTransactionAfterInsertHooks = append(processedTransactionAfterInsertHooks, processedTransactionHook)
	case boil.AfterSelectHook:
		processedTransactionAfterSelectHooks = append(processedTransactionAfterSelectHooks, processedTransactionHook)
	case boil.AfterUpdateHook:
		processedTransactionAfterUpdateHooks = append(processedTransactionAfterUpdateHooks, processedTransactionHook)
	case boil.AfterDeleteHook:
		processedTransactionAfterDeleteHooks = append(processedTransactionAfterDeleteHooks, processedTransactionHook)
	case boil.AfterUpsertHook:
		processedTransactionAfterUpsertHooks = append(processedTransactionAfterUpsertHooks, processedTransactionHook)
	}
}

// OneP returns a single processedTransaction record from the query, and panics on error.
func (q processedTransactionQuery) OneP() *ProcessedTransaction {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single processedTransaction record from the query.
func (q processedTransactionQuery) One() (*ProcessedTransaction, error) {
	o := &ProcessedTransaction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for processed_transaction")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all ProcessedTransaction records from the query, and panics on error.
func (q processedTransactionQuery) AllP() ProcessedTransactionSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all ProcessedTransaction records from the query.
func (q processedTransactionQuery) All() (ProcessedTransactionSlice, error) {
	var o []*ProcessedTransaction

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ProcessedTransaction slice")
	}

	if len(processedTransactionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all ProcessedTransaction records in the query, and panics on error.
func (q processedTransactionQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all ProcessedTransaction records in the query.
func (q processedTransactionQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count processed_transaction rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q processedTransactionQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q processedTransactionQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if processed_transaction exists")
	}

	return count > 0, nil
}

// UserOrderG pointed to by the foreign key.
func (o *ProcessedTransaction) UserOrderG(mods ...qm.QueryMod) userOrderQuery {
	return o.UserOrder(boil.GetDB(), mods...)
}

// UserOrder pointed to by the foreign key.
func (o *ProcessedTransaction) UserOrder(exec boil.Executor, mods ...qm.QueryMod) userOrderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UserOrderID),
	}

	queryMods = append(queryMods, mods...)

	query := UserOrders(exec, queryMods...)
	queries.SetFrom(query.Query, "\"user_order\"")

	return query
} // LoadUserOrder allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (processedTransactionL) LoadUserOrder(e boil.Executor, singular bool, maybeProcessedTransaction interface{}) error {
	var slice []*ProcessedTransaction
	var object *ProcessedTransaction

	count := 1
	if singular {
		object = maybeProcessedTransaction.(*ProcessedTransaction)
	} else {
		slice = *maybeProcessedTransaction.(*[]*ProcessedTransaction)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &processedTransactionR{}
		}
		args[0] = object.UserOrderID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &processedTransactionR{}
			}
			args[i] = obj.UserOrderID
		}
	}

	query := fmt.Sprintf(
		"select * from \"user_order\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserOrder")
	}
	defer results.Close()

	var resultSlice []*UserOrder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserOrder")
	}

	if len(processedTransactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.UserOrder = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserOrderID == foreign.ID {
				local.R.UserOrder = foreign
				break
			}
		}
	}

	return nil
}

// SetUserOrderG of the processed_transaction to the related item.
// Sets o.R.UserOrder to related.
// Adds o to related.R.ProcessedTransaction.
// Uses the global database handle.
func (o *ProcessedTransaction) SetUserOrderG(insert bool, related *UserOrder) error {
	return o.SetUserOrder(boil.GetDB(), insert, related)
}

// SetUserOrderP of the processed_transaction to the related item.
// Sets o.R.UserOrder to related.
// Adds o to related.R.ProcessedTransaction.
// Panics on error.
func (o *ProcessedTransaction) SetUserOrderP(exec boil.Executor, insert bool, related *UserOrder) {
	if err := o.SetUserOrder(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUserOrderGP of the processed_transaction to the related item.
// Sets o.R.UserOrder to related.
// Adds o to related.R.ProcessedTransaction.
// Uses the global database handle and panics on error.
func (o *ProcessedTransaction) SetUserOrderGP(insert bool, related *UserOrder) {
	if err := o.SetUserOrder(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUserOrder of the processed_transaction to the related item.
// Sets o.R.UserOrder to related.
// Adds o to related.R.ProcessedTransaction.
func (o *ProcessedTransaction) SetUserOrder(exec boil.Executor, insert bool, related *UserOrder) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"processed_transaction\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_order_id"}),
		strmangle.WhereClause("\"", "\"", 2, processedTransactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Chain, o.TransactionID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserOrderID = related.ID

	if o.R == nil {
		o.R = &processedTransactionR{
			UserOrder: related,
		}
	} else {
		o.R.UserOrder = related
	}

	if related.R == nil {
		related.R = &userOrderR{
			ProcessedTransaction: o,
		}
	} else {
		related.R.ProcessedTransaction = o
	}

	return nil
}

// ProcessedTransactionsG retrieves all records.
func ProcessedTransactionsG(mods ...qm.QueryMod) processedTransactionQuery {
	return ProcessedTransactions(boil.GetDB(), mods...)
}

// ProcessedTransactions retrieves all the records using an executor.
func ProcessedTransactions(exec boil.Executor, mods ...qm.QueryMod) processedTransactionQuery {
	mods = append(mods, qm.From("\"processed_transaction\""))
	return processedTransactionQuery{NewQuery(exec, mods...)}
}

// FindProcessedTransactionG retrieves a single record by ID.
func FindProcessedTransactionG(chain string, transactionID string, selectCols ...string) (*ProcessedTransaction, error) {
	return FindProcessedTransaction(boil.GetDB(), chain, transactionID, selectCols...)
}

// FindProcessedTransactionGP retrieves a single record by ID, and panics on error.
func FindProcessedTransactionGP(chain string, transactionID string, selectCols ...string) *ProcessedTransaction {
	retobj, err := FindProcessedTransaction(boil.GetDB(), chain, transactionID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindProcessedTransaction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProcessedTransaction(exec boil.Executor, chain string, transactionID string, selectCols ...string) (*ProcessedTransaction, error) {
	processedTransactionObj := &ProcessedTransaction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"processed_transaction\" where \"chain\"=$1 AND \"transaction_id\"=$2", sel,
	)

	q := queries.Raw(exec, query, chain, transactionID)

	err := q.Bind(processedTransactionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from processed_transaction")
	}

	return processedTransactionObj, nil
}

// FindProcessedTransactionP retrieves a single record by ID with an executor, and panics on error.
func FindProcessedTransactionP(exec boil.Executor, chain string, transactionID string, selectCols ...string) *ProcessedTransaction {
	retobj, err := FindProcessedTransaction(exec, chain, transactionID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ProcessedTransaction) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *ProcessedTransaction) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *ProcessedTransaction) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *ProcessedTransaction) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no processed_transaction provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(processedTransactionColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	processedTransactionInsertCacheMut.RLock()
	cache, cached := processedTransactionInsertCache[key]
	processedTransactionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			processedTransactionColumns,
			processedTransactionColumnsWithDefault,
			processedTransactionColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(processedTransactionType, processedTransactionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(processedTransactionType, processedTransactionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"processed_transaction\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"processed_transaction\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into processed_transaction")
	}

	if !cached {
		processedTransactionInsertCacheMut.Lock()
		processedTransactionInsertCache[key] = cache
		processedTransactionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single ProcessedTransaction record. See Update for
// whitelist behavior description.
func (o *ProcessedTransaction) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single ProcessedTransaction record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *ProcessedTransaction) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the ProcessedTransaction, and panics on error.
// See Update for whitelist behavior description.
func (o *ProcessedTransaction) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the ProcessedTransaction.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *ProcessedTransaction) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	processedTransactionUpdateCacheMut.RLock()
	cache, cached := processedTransactionUpdateCache[key]
	processedTransactionUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			processedTransactionColumns,
			processedTransactionPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update processed_transaction, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"processed_transaction\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, processedTransactionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(processedTransactionType, processedTransactionMapping, append(wl, processedTransactionPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update processed_transaction row")
	}

	if !cached {
		processedTransactionUpdateCacheMut.Lock()
		processedTransactionUpdateCache[key] = cache
		processedTransactionUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q processedTransactionQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q processedTransactionQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for processed_transaction")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ProcessedTransactionSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o ProcessedTransactionSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o ProcessedTransactionSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProcessedTransactionSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), processedTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"processed_transaction\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, processedTransactionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in processedTransaction slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ProcessedTransaction) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *ProcessedTransaction) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *ProcessedTransaction) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *ProcessedTransaction) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no processed_transaction provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(processedTransactionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	processedTransactionUpsertCacheMut.RLock()
	cache, cached := processedTransactionUpsertCache[key]
	processedTransactionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			processedTransactionColumns,
			processedTransactionColumnsWithDefault,
			processedTransactionColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			processedTransactionColumns,
			processedTransactionPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert processed_transaction, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(processedTransactionPrimaryKeyColumns))
			copy(conflict, processedTransactionPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"processed_transaction\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(processedTransactionType, processedTransactionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(processedTransactionType, processedTransactionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert processed_transaction")
	}

	if !cached {
		processedTransactionUpsertCacheMut.Lock()
		processedTransactionUpsertCache[key] = cache
		processedTransactionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single ProcessedTransaction record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *ProcessedTransaction) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single ProcessedTransaction record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ProcessedTransaction) DeleteG() error {
	if o == nil {
		return errors.New("models: no ProcessedTransaction provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single ProcessedTransaction record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *ProcessedTransaction) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single ProcessedTransaction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProcessedTransaction) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no ProcessedTransaction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), processedTransactionPrimaryKeyMapping)
	sql := "DELETE FROM \"processed_transaction\" WHERE \"chain\"=$1 AND \"transaction_id\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from processed_transaction")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q processedTransactionQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q processedTransactionQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no processedTransactionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from processed_transaction")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o ProcessedTransactionSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o ProcessedTransactionSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no ProcessedTransaction slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o ProcessedTransactionSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProcessedTransactionSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no ProcessedTransaction slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(processedTransactionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), processedTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"processed_transaction\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, processedTransactionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from processedTransaction slice")
	}

	if len(processedTransactionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *ProcessedTransaction) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *ProcessedTransaction) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ProcessedTransaction) ReloadG() error {
	if o == nil {
		return errors.New("models: no ProcessedTransaction provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProcessedTransaction) Reload(exec boil.Executor) error {
	ret, err := FindProcessedTransaction(exec, o.Chain, o.TransactionID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ProcessedTransactionSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ProcessedTransactionSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProcessedTransactionSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty ProcessedTransactionSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProcessedTransactionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	processedTransactions := ProcessedTransactionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), processedTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"processed_transaction\".* FROM \"processed_transaction\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, processedTransactionPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&processedTransactions)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProcessedTransactionSlice")
	}

	*o = processedTransactions

	return nil
}

// ProcessedTransactionExists checks if the ProcessedTransaction row exists.
func ProcessedTransactionExists(exec boil.Executor, chain string, transactionID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"processed_transaction\" where \"chain\"=$1 AND \"transaction_id\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, chain, transactionID)
	}

	row := exec.QueryRow(sql, chain, transactionID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if processed_transaction exists")
	}

	return exists, nil
}

// ProcessedTransactionExistsG checks if the ProcessedTransaction row exists.
func ProcessedTransactionExistsG(chain string, transactionID string) (bool, error) {
	return ProcessedTransactionExists(boil.GetDB(), chain, transactionID)
}

// ProcessedTransactionExistsGP checks if the ProcessedTransaction row exists. Panics on error.
func ProcessedTransactionExistsGP(chain string, transactionID string) bool {
	e, err := ProcessedTransactionExists(boil.GetDB(), chain, transactionID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ProcessedTransactionExistsP checks if the ProcessedTransaction row exists. Panics on error.
func ProcessedTransactionExistsP(exec boil.Executor, chain string, transactionID string) bool {
	e, err := ProcessedTransactionExists(exec, chain, transactionID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
