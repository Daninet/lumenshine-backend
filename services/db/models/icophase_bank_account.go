// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// IcophaseBankAccount is an object representing the database table.
type IcophaseBankAccount struct {
	ID            int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	AccountName   string    `boil:"account_name" json:"account_name" toml:"account_name" yaml:"account_name"`
	RecepientName string    `boil:"recepient_name" json:"recepient_name" toml:"recepient_name" yaml:"recepient_name"`
	BankName      string    `boil:"bank_name" json:"bank_name" toml:"bank_name" yaml:"bank_name"`
	Iban          string    `boil:"iban" json:"iban" toml:"iban" yaml:"iban"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UpdatedBy     string    `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`

	R *icophaseBankAccountR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L icophaseBankAccountL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var IcophaseBankAccountColumns = struct {
	ID            string
	AccountName   string
	RecepientName string
	BankName      string
	Iban          string
	CreatedAt     string
	UpdatedAt     string
	UpdatedBy     string
}{
	ID:            "id",
	AccountName:   "account_name",
	RecepientName: "recepient_name",
	BankName:      "bank_name",
	Iban:          "iban",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	UpdatedBy:     "updated_by",
}

// IcophaseBankAccountRels is where relationship names are stored.
var IcophaseBankAccountRels = struct {
	IcophaseActivatedExchangeCurrencies string
}{
	IcophaseActivatedExchangeCurrencies: "IcophaseActivatedExchangeCurrencies",
}

// icophaseBankAccountR is where relationships are stored.
type icophaseBankAccountR struct {
	IcophaseActivatedExchangeCurrencies IcophaseActivatedExchangeCurrencySlice
}

// NewStruct creates a new relationship struct
func (*icophaseBankAccountR) NewStruct() *icophaseBankAccountR {
	return &icophaseBankAccountR{}
}

// icophaseBankAccountL is where Load methods for each relationship are stored.
type icophaseBankAccountL struct{}

var (
	icophaseBankAccountColumns               = []string{"id", "account_name", "recepient_name", "bank_name", "iban", "created_at", "updated_at", "updated_by"}
	icophaseBankAccountColumnsWithoutDefault = []string{"account_name", "recepient_name", "bank_name", "iban", "updated_by"}
	icophaseBankAccountColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	icophaseBankAccountPrimaryKeyColumns     = []string{"id"}
)

type (
	// IcophaseBankAccountSlice is an alias for a slice of pointers to IcophaseBankAccount.
	// This should generally be used opposed to []IcophaseBankAccount.
	IcophaseBankAccountSlice []*IcophaseBankAccount
	// IcophaseBankAccountHook is the signature for custom IcophaseBankAccount hook methods
	IcophaseBankAccountHook func(boil.Executor, *IcophaseBankAccount) error

	icophaseBankAccountQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	icophaseBankAccountType                 = reflect.TypeOf(&IcophaseBankAccount{})
	icophaseBankAccountMapping              = queries.MakeStructMapping(icophaseBankAccountType)
	icophaseBankAccountPrimaryKeyMapping, _ = queries.BindMapping(icophaseBankAccountType, icophaseBankAccountMapping, icophaseBankAccountPrimaryKeyColumns)
	icophaseBankAccountInsertCacheMut       sync.RWMutex
	icophaseBankAccountInsertCache          = make(map[string]insertCache)
	icophaseBankAccountUpdateCacheMut       sync.RWMutex
	icophaseBankAccountUpdateCache          = make(map[string]updateCache)
	icophaseBankAccountUpsertCacheMut       sync.RWMutex
	icophaseBankAccountUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var icophaseBankAccountBeforeInsertHooks []IcophaseBankAccountHook
var icophaseBankAccountBeforeUpdateHooks []IcophaseBankAccountHook
var icophaseBankAccountBeforeDeleteHooks []IcophaseBankAccountHook
var icophaseBankAccountBeforeUpsertHooks []IcophaseBankAccountHook

var icophaseBankAccountAfterInsertHooks []IcophaseBankAccountHook
var icophaseBankAccountAfterSelectHooks []IcophaseBankAccountHook
var icophaseBankAccountAfterUpdateHooks []IcophaseBankAccountHook
var icophaseBankAccountAfterDeleteHooks []IcophaseBankAccountHook
var icophaseBankAccountAfterUpsertHooks []IcophaseBankAccountHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *IcophaseBankAccount) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range icophaseBankAccountBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *IcophaseBankAccount) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range icophaseBankAccountBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *IcophaseBankAccount) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range icophaseBankAccountBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *IcophaseBankAccount) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range icophaseBankAccountBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *IcophaseBankAccount) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range icophaseBankAccountAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *IcophaseBankAccount) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range icophaseBankAccountAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *IcophaseBankAccount) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range icophaseBankAccountAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *IcophaseBankAccount) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range icophaseBankAccountAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *IcophaseBankAccount) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range icophaseBankAccountAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddIcophaseBankAccountHook registers your hook function for all future operations.
func AddIcophaseBankAccountHook(hookPoint boil.HookPoint, icophaseBankAccountHook IcophaseBankAccountHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		icophaseBankAccountBeforeInsertHooks = append(icophaseBankAccountBeforeInsertHooks, icophaseBankAccountHook)
	case boil.BeforeUpdateHook:
		icophaseBankAccountBeforeUpdateHooks = append(icophaseBankAccountBeforeUpdateHooks, icophaseBankAccountHook)
	case boil.BeforeDeleteHook:
		icophaseBankAccountBeforeDeleteHooks = append(icophaseBankAccountBeforeDeleteHooks, icophaseBankAccountHook)
	case boil.BeforeUpsertHook:
		icophaseBankAccountBeforeUpsertHooks = append(icophaseBankAccountBeforeUpsertHooks, icophaseBankAccountHook)
	case boil.AfterInsertHook:
		icophaseBankAccountAfterInsertHooks = append(icophaseBankAccountAfterInsertHooks, icophaseBankAccountHook)
	case boil.AfterSelectHook:
		icophaseBankAccountAfterSelectHooks = append(icophaseBankAccountAfterSelectHooks, icophaseBankAccountHook)
	case boil.AfterUpdateHook:
		icophaseBankAccountAfterUpdateHooks = append(icophaseBankAccountAfterUpdateHooks, icophaseBankAccountHook)
	case boil.AfterDeleteHook:
		icophaseBankAccountAfterDeleteHooks = append(icophaseBankAccountAfterDeleteHooks, icophaseBankAccountHook)
	case boil.AfterUpsertHook:
		icophaseBankAccountAfterUpsertHooks = append(icophaseBankAccountAfterUpsertHooks, icophaseBankAccountHook)
	}
}

// OneG returns a single icophaseBankAccount record from the query using the global executor.
func (q icophaseBankAccountQuery) OneG() (*IcophaseBankAccount, error) {
	return q.One(boil.GetDB())
}

// One returns a single icophaseBankAccount record from the query.
func (q icophaseBankAccountQuery) One(exec boil.Executor) (*IcophaseBankAccount, error) {
	o := &IcophaseBankAccount{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for icophase_bank_account")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all IcophaseBankAccount records from the query using the global executor.
func (q icophaseBankAccountQuery) AllG() (IcophaseBankAccountSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all IcophaseBankAccount records from the query.
func (q icophaseBankAccountQuery) All(exec boil.Executor) (IcophaseBankAccountSlice, error) {
	var o []*IcophaseBankAccount

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to IcophaseBankAccount slice")
	}

	if len(icophaseBankAccountAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all IcophaseBankAccount records in the query, and panics on error.
func (q icophaseBankAccountQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all IcophaseBankAccount records in the query.
func (q icophaseBankAccountQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count icophase_bank_account rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q icophaseBankAccountQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q icophaseBankAccountQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if icophase_bank_account exists")
	}

	return count > 0, nil
}

// IcophaseActivatedExchangeCurrencies retrieves all the icophase_activated_exchange_currency's IcophaseActivatedExchangeCurrencies with an executor.
func (o *IcophaseBankAccount) IcophaseActivatedExchangeCurrencies(mods ...qm.QueryMod) icophaseActivatedExchangeCurrencyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"icophase_activated_exchange_currency\".\"icophase_bank_account_id\"=?", o.ID),
	)

	query := IcophaseActivatedExchangeCurrencies(queryMods...)
	queries.SetFrom(query.Query, "\"icophase_activated_exchange_currency\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"icophase_activated_exchange_currency\".*"})
	}

	return query
}

// LoadIcophaseActivatedExchangeCurrencies allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (icophaseBankAccountL) LoadIcophaseActivatedExchangeCurrencies(e boil.Executor, singular bool, maybeIcophaseBankAccount interface{}, mods queries.Applicator) error {
	var slice []*IcophaseBankAccount
	var object *IcophaseBankAccount

	if singular {
		object = maybeIcophaseBankAccount.(*IcophaseBankAccount)
	} else {
		slice = *maybeIcophaseBankAccount.(*[]*IcophaseBankAccount)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &icophaseBankAccountR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &icophaseBankAccountR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`icophase_activated_exchange_currency`), qm.WhereIn(`icophase_bank_account_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load icophase_activated_exchange_currency")
	}

	var resultSlice []*IcophaseActivatedExchangeCurrency
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice icophase_activated_exchange_currency")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on icophase_activated_exchange_currency")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for icophase_activated_exchange_currency")
	}

	if len(icophaseActivatedExchangeCurrencyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IcophaseActivatedExchangeCurrencies = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &icophaseActivatedExchangeCurrencyR{}
			}
			foreign.R.IcophaseBankAccount = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.IcophaseBankAccountID) {
				local.R.IcophaseActivatedExchangeCurrencies = append(local.R.IcophaseActivatedExchangeCurrencies, foreign)
				if foreign.R == nil {
					foreign.R = &icophaseActivatedExchangeCurrencyR{}
				}
				foreign.R.IcophaseBankAccount = local
				break
			}
		}
	}

	return nil
}

// AddIcophaseActivatedExchangeCurrenciesG adds the given related objects to the existing relationships
// of the icophase_bank_account, optionally inserting them as new records.
// Appends related to o.R.IcophaseActivatedExchangeCurrencies.
// Sets related.R.IcophaseBankAccount appropriately.
// Uses the global database handle.
func (o *IcophaseBankAccount) AddIcophaseActivatedExchangeCurrenciesG(insert bool, related ...*IcophaseActivatedExchangeCurrency) error {
	return o.AddIcophaseActivatedExchangeCurrencies(boil.GetDB(), insert, related...)
}

// AddIcophaseActivatedExchangeCurrencies adds the given related objects to the existing relationships
// of the icophase_bank_account, optionally inserting them as new records.
// Appends related to o.R.IcophaseActivatedExchangeCurrencies.
// Sets related.R.IcophaseBankAccount appropriately.
func (o *IcophaseBankAccount) AddIcophaseActivatedExchangeCurrencies(exec boil.Executor, insert bool, related ...*IcophaseActivatedExchangeCurrency) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.IcophaseBankAccountID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"icophase_activated_exchange_currency\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"icophase_bank_account_id"}),
				strmangle.WhereClause("\"", "\"", 2, icophaseActivatedExchangeCurrencyPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.IcophaseBankAccountID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &icophaseBankAccountR{
			IcophaseActivatedExchangeCurrencies: related,
		}
	} else {
		o.R.IcophaseActivatedExchangeCurrencies = append(o.R.IcophaseActivatedExchangeCurrencies, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &icophaseActivatedExchangeCurrencyR{
				IcophaseBankAccount: o,
			}
		} else {
			rel.R.IcophaseBankAccount = o
		}
	}
	return nil
}

// SetIcophaseActivatedExchangeCurrenciesG removes all previously related items of the
// icophase_bank_account replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.IcophaseBankAccount's IcophaseActivatedExchangeCurrencies accordingly.
// Replaces o.R.IcophaseActivatedExchangeCurrencies with related.
// Sets related.R.IcophaseBankAccount's IcophaseActivatedExchangeCurrencies accordingly.
// Uses the global database handle.
func (o *IcophaseBankAccount) SetIcophaseActivatedExchangeCurrenciesG(insert bool, related ...*IcophaseActivatedExchangeCurrency) error {
	return o.SetIcophaseActivatedExchangeCurrencies(boil.GetDB(), insert, related...)
}

// SetIcophaseActivatedExchangeCurrencies removes all previously related items of the
// icophase_bank_account replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.IcophaseBankAccount's IcophaseActivatedExchangeCurrencies accordingly.
// Replaces o.R.IcophaseActivatedExchangeCurrencies with related.
// Sets related.R.IcophaseBankAccount's IcophaseActivatedExchangeCurrencies accordingly.
func (o *IcophaseBankAccount) SetIcophaseActivatedExchangeCurrencies(exec boil.Executor, insert bool, related ...*IcophaseActivatedExchangeCurrency) error {
	query := "update \"icophase_activated_exchange_currency\" set \"icophase_bank_account_id\" = null where \"icophase_bank_account_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.IcophaseActivatedExchangeCurrencies {
			queries.SetScanner(&rel.IcophaseBankAccountID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.IcophaseBankAccount = nil
		}

		o.R.IcophaseActivatedExchangeCurrencies = nil
	}
	return o.AddIcophaseActivatedExchangeCurrencies(exec, insert, related...)
}

// RemoveIcophaseActivatedExchangeCurrenciesG relationships from objects passed in.
// Removes related items from R.IcophaseActivatedExchangeCurrencies (uses pointer comparison, removal does not keep order)
// Sets related.R.IcophaseBankAccount.
// Uses the global database handle.
func (o *IcophaseBankAccount) RemoveIcophaseActivatedExchangeCurrenciesG(related ...*IcophaseActivatedExchangeCurrency) error {
	return o.RemoveIcophaseActivatedExchangeCurrencies(boil.GetDB(), related...)
}

// RemoveIcophaseActivatedExchangeCurrencies relationships from objects passed in.
// Removes related items from R.IcophaseActivatedExchangeCurrencies (uses pointer comparison, removal does not keep order)
// Sets related.R.IcophaseBankAccount.
func (o *IcophaseBankAccount) RemoveIcophaseActivatedExchangeCurrencies(exec boil.Executor, related ...*IcophaseActivatedExchangeCurrency) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.IcophaseBankAccountID, nil)
		if rel.R != nil {
			rel.R.IcophaseBankAccount = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("icophase_bank_account_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.IcophaseActivatedExchangeCurrencies {
			if rel != ri {
				continue
			}

			ln := len(o.R.IcophaseActivatedExchangeCurrencies)
			if ln > 1 && i < ln-1 {
				o.R.IcophaseActivatedExchangeCurrencies[i] = o.R.IcophaseActivatedExchangeCurrencies[ln-1]
			}
			o.R.IcophaseActivatedExchangeCurrencies = o.R.IcophaseActivatedExchangeCurrencies[:ln-1]
			break
		}
	}

	return nil
}

// IcophaseBankAccounts retrieves all the records using an executor.
func IcophaseBankAccounts(mods ...qm.QueryMod) icophaseBankAccountQuery {
	mods = append(mods, qm.From("\"icophase_bank_account\""))
	return icophaseBankAccountQuery{NewQuery(mods...)}
}

// FindIcophaseBankAccountG retrieves a single record by ID.
func FindIcophaseBankAccountG(iD int, selectCols ...string) (*IcophaseBankAccount, error) {
	return FindIcophaseBankAccount(boil.GetDB(), iD, selectCols...)
}

// FindIcophaseBankAccount retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindIcophaseBankAccount(exec boil.Executor, iD int, selectCols ...string) (*IcophaseBankAccount, error) {
	icophaseBankAccountObj := &IcophaseBankAccount{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"icophase_bank_account\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, icophaseBankAccountObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from icophase_bank_account")
	}

	return icophaseBankAccountObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *IcophaseBankAccount) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *IcophaseBankAccount) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no icophase_bank_account provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(icophaseBankAccountColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	icophaseBankAccountInsertCacheMut.RLock()
	cache, cached := icophaseBankAccountInsertCache[key]
	icophaseBankAccountInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			icophaseBankAccountColumns,
			icophaseBankAccountColumnsWithDefault,
			icophaseBankAccountColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(icophaseBankAccountType, icophaseBankAccountMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(icophaseBankAccountType, icophaseBankAccountMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"icophase_bank_account\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"icophase_bank_account\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into icophase_bank_account")
	}

	if !cached {
		icophaseBankAccountInsertCacheMut.Lock()
		icophaseBankAccountInsertCache[key] = cache
		icophaseBankAccountInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single IcophaseBankAccount record using the global executor.
// See Update for more documentation.
func (o *IcophaseBankAccount) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the IcophaseBankAccount.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *IcophaseBankAccount) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	icophaseBankAccountUpdateCacheMut.RLock()
	cache, cached := icophaseBankAccountUpdateCache[key]
	icophaseBankAccountUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			icophaseBankAccountColumns,
			icophaseBankAccountPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update icophase_bank_account, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"icophase_bank_account\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, icophaseBankAccountPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(icophaseBankAccountType, icophaseBankAccountMapping, append(wl, icophaseBankAccountPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update icophase_bank_account row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for icophase_bank_account")
	}

	if !cached {
		icophaseBankAccountUpdateCacheMut.Lock()
		icophaseBankAccountUpdateCache[key] = cache
		icophaseBankAccountUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q icophaseBankAccountQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for icophase_bank_account")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for icophase_bank_account")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o IcophaseBankAccountSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o IcophaseBankAccountSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), icophaseBankAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"icophase_bank_account\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, icophaseBankAccountPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in icophaseBankAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all icophaseBankAccount")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *IcophaseBankAccount) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *IcophaseBankAccount) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no icophase_bank_account provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(icophaseBankAccountColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	icophaseBankAccountUpsertCacheMut.RLock()
	cache, cached := icophaseBankAccountUpsertCache[key]
	icophaseBankAccountUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			icophaseBankAccountColumns,
			icophaseBankAccountColumnsWithDefault,
			icophaseBankAccountColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			icophaseBankAccountColumns,
			icophaseBankAccountPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert icophase_bank_account, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(icophaseBankAccountPrimaryKeyColumns))
			copy(conflict, icophaseBankAccountPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"icophase_bank_account\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(icophaseBankAccountType, icophaseBankAccountMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(icophaseBankAccountType, icophaseBankAccountMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert icophase_bank_account")
	}

	if !cached {
		icophaseBankAccountUpsertCacheMut.Lock()
		icophaseBankAccountUpsertCache[key] = cache
		icophaseBankAccountUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single IcophaseBankAccount record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *IcophaseBankAccount) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single IcophaseBankAccount record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *IcophaseBankAccount) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no IcophaseBankAccount provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), icophaseBankAccountPrimaryKeyMapping)
	sql := "DELETE FROM \"icophase_bank_account\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from icophase_bank_account")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for icophase_bank_account")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q icophaseBankAccountQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no icophaseBankAccountQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from icophase_bank_account")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for icophase_bank_account")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o IcophaseBankAccountSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o IcophaseBankAccountSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no IcophaseBankAccount slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(icophaseBankAccountBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), icophaseBankAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"icophase_bank_account\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, icophaseBankAccountPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from icophaseBankAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for icophase_bank_account")
	}

	if len(icophaseBankAccountAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *IcophaseBankAccount) ReloadG() error {
	if o == nil {
		return errors.New("models: no IcophaseBankAccount provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *IcophaseBankAccount) Reload(exec boil.Executor) error {
	ret, err := FindIcophaseBankAccount(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IcophaseBankAccountSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty IcophaseBankAccountSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IcophaseBankAccountSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := IcophaseBankAccountSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), icophaseBankAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"icophase_bank_account\".* FROM \"icophase_bank_account\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, icophaseBankAccountPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in IcophaseBankAccountSlice")
	}

	*o = slice

	return nil
}

// IcophaseBankAccountExistsG checks if the IcophaseBankAccount row exists.
func IcophaseBankAccountExistsG(iD int) (bool, error) {
	return IcophaseBankAccountExists(boil.GetDB(), iD)
}

// IcophaseBankAccountExists checks if the IcophaseBankAccount row exists.
func IcophaseBankAccountExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"icophase_bank_account\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if icophase_bank_account exists")
	}

	return exists, nil
}
