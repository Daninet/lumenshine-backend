// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// NotificationArchive is an object representing the database table.
type NotificationArchive struct {
	ID                  int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID              int       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	PushToken           string    `boil:"push_token" json:"push_token" toml:"push_token" yaml:"push_token"`
	Type                string    `boil:"type" json:"type" toml:"type" yaml:"type"`
	Content             string    `boil:"content" json:"content" toml:"content" yaml:"content"`
	MailSubject         string    `boil:"mail_subject" json:"mail_subject" toml:"mail_subject" yaml:"mail_subject"`
	MailType            string    `boil:"mail_type" json:"mail_type" toml:"mail_type" yaml:"mail_type"`
	UserEmail           string    `boil:"user_email" json:"user_email" toml:"user_email" yaml:"user_email"`
	Status              string    `boil:"status" json:"status" toml:"status" yaml:"status"`
	InternalErrorString string    `boil:"internal_error_string" json:"internal_error_string" toml:"internal_error_string" yaml:"internal_error_string"`
	ExternalStatusCode  string    `boil:"external_status_code" json:"external_status_code" toml:"external_status_code" yaml:"external_status_code"`
	ExternalErrorString string    `boil:"external_error_string" json:"external_error_string" toml:"external_error_string" yaml:"external_error_string"`
	CreatedAt           time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt           time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UpdatedBy           string    `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`

	R *notificationArchiveR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L notificationArchiveL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NotificationArchiveColumns = struct {
	ID                  string
	UserID              string
	PushToken           string
	Type                string
	Content             string
	MailSubject         string
	MailType            string
	UserEmail           string
	Status              string
	InternalErrorString string
	ExternalStatusCode  string
	ExternalErrorString string
	CreatedAt           string
	UpdatedAt           string
	UpdatedBy           string
}{
	ID:                  "id",
	UserID:              "user_id",
	PushToken:           "push_token",
	Type:                "type",
	Content:             "content",
	MailSubject:         "mail_subject",
	MailType:            "mail_type",
	UserEmail:           "user_email",
	Status:              "status",
	InternalErrorString: "internal_error_string",
	ExternalStatusCode:  "external_status_code",
	ExternalErrorString: "external_error_string",
	CreatedAt:           "created_at",
	UpdatedAt:           "updated_at",
	UpdatedBy:           "updated_by",
}

// notificationArchiveR is where relationships are stored.
type notificationArchiveR struct {
	User *UserProfile
}

// notificationArchiveL is where Load methods for each relationship are stored.
type notificationArchiveL struct{}

var (
	notificationArchiveColumns               = []string{"id", "user_id", "push_token", "type", "content", "mail_subject", "mail_type", "user_email", "status", "internal_error_string", "external_status_code", "external_error_string", "created_at", "updated_at", "updated_by"}
	notificationArchiveColumnsWithoutDefault = []string{"user_id", "push_token", "type", "content", "mail_subject", "mail_type", "user_email", "status", "internal_error_string", "external_status_code", "external_error_string", "updated_by"}
	notificationArchiveColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	notificationArchivePrimaryKeyColumns     = []string{"id"}
)

type (
	// NotificationArchiveSlice is an alias for a slice of pointers to NotificationArchive.
	// This should generally be used opposed to []NotificationArchive.
	NotificationArchiveSlice []*NotificationArchive
	// NotificationArchiveHook is the signature for custom NotificationArchive hook methods
	NotificationArchiveHook func(boil.Executor, *NotificationArchive) error

	notificationArchiveQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	notificationArchiveType                 = reflect.TypeOf(&NotificationArchive{})
	notificationArchiveMapping              = queries.MakeStructMapping(notificationArchiveType)
	notificationArchivePrimaryKeyMapping, _ = queries.BindMapping(notificationArchiveType, notificationArchiveMapping, notificationArchivePrimaryKeyColumns)
	notificationArchiveInsertCacheMut       sync.RWMutex
	notificationArchiveInsertCache          = make(map[string]insertCache)
	notificationArchiveUpdateCacheMut       sync.RWMutex
	notificationArchiveUpdateCache          = make(map[string]updateCache)
	notificationArchiveUpsertCacheMut       sync.RWMutex
	notificationArchiveUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var notificationArchiveBeforeInsertHooks []NotificationArchiveHook
var notificationArchiveBeforeUpdateHooks []NotificationArchiveHook
var notificationArchiveBeforeDeleteHooks []NotificationArchiveHook
var notificationArchiveBeforeUpsertHooks []NotificationArchiveHook

var notificationArchiveAfterInsertHooks []NotificationArchiveHook
var notificationArchiveAfterSelectHooks []NotificationArchiveHook
var notificationArchiveAfterUpdateHooks []NotificationArchiveHook
var notificationArchiveAfterDeleteHooks []NotificationArchiveHook
var notificationArchiveAfterUpsertHooks []NotificationArchiveHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *NotificationArchive) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range notificationArchiveBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *NotificationArchive) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range notificationArchiveBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *NotificationArchive) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range notificationArchiveBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *NotificationArchive) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range notificationArchiveBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *NotificationArchive) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range notificationArchiveAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *NotificationArchive) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range notificationArchiveAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *NotificationArchive) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range notificationArchiveAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *NotificationArchive) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range notificationArchiveAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *NotificationArchive) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range notificationArchiveAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNotificationArchiveHook registers your hook function for all future operations.
func AddNotificationArchiveHook(hookPoint boil.HookPoint, notificationArchiveHook NotificationArchiveHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		notificationArchiveBeforeInsertHooks = append(notificationArchiveBeforeInsertHooks, notificationArchiveHook)
	case boil.BeforeUpdateHook:
		notificationArchiveBeforeUpdateHooks = append(notificationArchiveBeforeUpdateHooks, notificationArchiveHook)
	case boil.BeforeDeleteHook:
		notificationArchiveBeforeDeleteHooks = append(notificationArchiveBeforeDeleteHooks, notificationArchiveHook)
	case boil.BeforeUpsertHook:
		notificationArchiveBeforeUpsertHooks = append(notificationArchiveBeforeUpsertHooks, notificationArchiveHook)
	case boil.AfterInsertHook:
		notificationArchiveAfterInsertHooks = append(notificationArchiveAfterInsertHooks, notificationArchiveHook)
	case boil.AfterSelectHook:
		notificationArchiveAfterSelectHooks = append(notificationArchiveAfterSelectHooks, notificationArchiveHook)
	case boil.AfterUpdateHook:
		notificationArchiveAfterUpdateHooks = append(notificationArchiveAfterUpdateHooks, notificationArchiveHook)
	case boil.AfterDeleteHook:
		notificationArchiveAfterDeleteHooks = append(notificationArchiveAfterDeleteHooks, notificationArchiveHook)
	case boil.AfterUpsertHook:
		notificationArchiveAfterUpsertHooks = append(notificationArchiveAfterUpsertHooks, notificationArchiveHook)
	}
}

// OneP returns a single notificationArchive record from the query, and panics on error.
func (q notificationArchiveQuery) OneP() *NotificationArchive {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single notificationArchive record from the query.
func (q notificationArchiveQuery) One() (*NotificationArchive, error) {
	o := &NotificationArchive{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for notification_archive")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all NotificationArchive records from the query, and panics on error.
func (q notificationArchiveQuery) AllP() NotificationArchiveSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all NotificationArchive records from the query.
func (q notificationArchiveQuery) All() (NotificationArchiveSlice, error) {
	var o []*NotificationArchive

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to NotificationArchive slice")
	}

	if len(notificationArchiveAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all NotificationArchive records in the query, and panics on error.
func (q notificationArchiveQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all NotificationArchive records in the query.
func (q notificationArchiveQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count notification_archive rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q notificationArchiveQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q notificationArchiveQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if notification_archive exists")
	}

	return count > 0, nil
}

// UserG pointed to by the foreign key.
func (o *NotificationArchive) UserG(mods ...qm.QueryMod) userProfileQuery {
	return o.User(boil.GetDB(), mods...)
}

// User pointed to by the foreign key.
func (o *NotificationArchive) User(exec boil.Executor, mods ...qm.QueryMod) userProfileQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := UserProfiles(exec, queryMods...)
	queries.SetFrom(query.Query, "\"user_profile\"")

	return query
} // LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (notificationArchiveL) LoadUser(e boil.Executor, singular bool, maybeNotificationArchive interface{}) error {
	var slice []*NotificationArchive
	var object *NotificationArchive

	count := 1
	if singular {
		object = maybeNotificationArchive.(*NotificationArchive)
	} else {
		slice = *maybeNotificationArchive.(*[]*NotificationArchive)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &notificationArchiveR{}
		}
		args[0] = object.UserID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &notificationArchiveR{}
			}
			args[i] = obj.UserID
		}
	}

	query := fmt.Sprintf(
		"select * from \"user_profile\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserProfile")
	}
	defer results.Close()

	var resultSlice []*UserProfile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserProfile")
	}

	if len(notificationArchiveAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.User = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				break
			}
		}
	}

	return nil
}

// SetUserG of the notification_archive to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserNotificationArchives.
// Uses the global database handle.
func (o *NotificationArchive) SetUserG(insert bool, related *UserProfile) error {
	return o.SetUser(boil.GetDB(), insert, related)
}

// SetUserP of the notification_archive to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserNotificationArchives.
// Panics on error.
func (o *NotificationArchive) SetUserP(exec boil.Executor, insert bool, related *UserProfile) {
	if err := o.SetUser(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUserGP of the notification_archive to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserNotificationArchives.
// Uses the global database handle and panics on error.
func (o *NotificationArchive) SetUserGP(insert bool, related *UserProfile) {
	if err := o.SetUser(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUser of the notification_archive to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserNotificationArchives.
func (o *NotificationArchive) SetUser(exec boil.Executor, insert bool, related *UserProfile) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"notification_archive\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, notificationArchivePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID

	if o.R == nil {
		o.R = &notificationArchiveR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userProfileR{
			UserNotificationArchives: NotificationArchiveSlice{o},
		}
	} else {
		related.R.UserNotificationArchives = append(related.R.UserNotificationArchives, o)
	}

	return nil
}

// NotificationArchivesG retrieves all records.
func NotificationArchivesG(mods ...qm.QueryMod) notificationArchiveQuery {
	return NotificationArchives(boil.GetDB(), mods...)
}

// NotificationArchives retrieves all the records using an executor.
func NotificationArchives(exec boil.Executor, mods ...qm.QueryMod) notificationArchiveQuery {
	mods = append(mods, qm.From("\"notification_archive\""))
	return notificationArchiveQuery{NewQuery(exec, mods...)}
}

// FindNotificationArchiveG retrieves a single record by ID.
func FindNotificationArchiveG(id int, selectCols ...string) (*NotificationArchive, error) {
	return FindNotificationArchive(boil.GetDB(), id, selectCols...)
}

// FindNotificationArchiveGP retrieves a single record by ID, and panics on error.
func FindNotificationArchiveGP(id int, selectCols ...string) *NotificationArchive {
	retobj, err := FindNotificationArchive(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindNotificationArchive retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNotificationArchive(exec boil.Executor, id int, selectCols ...string) (*NotificationArchive, error) {
	notificationArchiveObj := &NotificationArchive{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"notification_archive\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(notificationArchiveObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from notification_archive")
	}

	return notificationArchiveObj, nil
}

// FindNotificationArchiveP retrieves a single record by ID with an executor, and panics on error.
func FindNotificationArchiveP(exec boil.Executor, id int, selectCols ...string) *NotificationArchive {
	retobj, err := FindNotificationArchive(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *NotificationArchive) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *NotificationArchive) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *NotificationArchive) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *NotificationArchive) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no notification_archive provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(notificationArchiveColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	notificationArchiveInsertCacheMut.RLock()
	cache, cached := notificationArchiveInsertCache[key]
	notificationArchiveInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			notificationArchiveColumns,
			notificationArchiveColumnsWithDefault,
			notificationArchiveColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(notificationArchiveType, notificationArchiveMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(notificationArchiveType, notificationArchiveMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"notification_archive\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"notification_archive\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into notification_archive")
	}

	if !cached {
		notificationArchiveInsertCacheMut.Lock()
		notificationArchiveInsertCache[key] = cache
		notificationArchiveInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single NotificationArchive record. See Update for
// whitelist behavior description.
func (o *NotificationArchive) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single NotificationArchive record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *NotificationArchive) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the NotificationArchive, and panics on error.
// See Update for whitelist behavior description.
func (o *NotificationArchive) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the NotificationArchive.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *NotificationArchive) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	notificationArchiveUpdateCacheMut.RLock()
	cache, cached := notificationArchiveUpdateCache[key]
	notificationArchiveUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			notificationArchiveColumns,
			notificationArchivePrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update notification_archive, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"notification_archive\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, notificationArchivePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(notificationArchiveType, notificationArchiveMapping, append(wl, notificationArchivePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update notification_archive row")
	}

	if !cached {
		notificationArchiveUpdateCacheMut.Lock()
		notificationArchiveUpdateCache[key] = cache
		notificationArchiveUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q notificationArchiveQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q notificationArchiveQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for notification_archive")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o NotificationArchiveSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o NotificationArchiveSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o NotificationArchiveSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NotificationArchiveSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationArchivePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"notification_archive\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, notificationArchivePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in notificationArchive slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *NotificationArchive) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *NotificationArchive) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *NotificationArchive) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *NotificationArchive) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no notification_archive provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(notificationArchiveColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	notificationArchiveUpsertCacheMut.RLock()
	cache, cached := notificationArchiveUpsertCache[key]
	notificationArchiveUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			notificationArchiveColumns,
			notificationArchiveColumnsWithDefault,
			notificationArchiveColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			notificationArchiveColumns,
			notificationArchivePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert notification_archive, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(notificationArchivePrimaryKeyColumns))
			copy(conflict, notificationArchivePrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"notification_archive\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(notificationArchiveType, notificationArchiveMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(notificationArchiveType, notificationArchiveMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert notification_archive")
	}

	if !cached {
		notificationArchiveUpsertCacheMut.Lock()
		notificationArchiveUpsertCache[key] = cache
		notificationArchiveUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single NotificationArchive record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *NotificationArchive) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single NotificationArchive record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *NotificationArchive) DeleteG() error {
	if o == nil {
		return errors.New("models: no NotificationArchive provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single NotificationArchive record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *NotificationArchive) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single NotificationArchive record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NotificationArchive) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no NotificationArchive provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), notificationArchivePrimaryKeyMapping)
	sql := "DELETE FROM \"notification_archive\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from notification_archive")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q notificationArchiveQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q notificationArchiveQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no notificationArchiveQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from notification_archive")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o NotificationArchiveSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o NotificationArchiveSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no NotificationArchive slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o NotificationArchiveSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NotificationArchiveSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no NotificationArchive slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(notificationArchiveBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationArchivePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"notification_archive\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, notificationArchivePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from notificationArchive slice")
	}

	if len(notificationArchiveAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *NotificationArchive) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *NotificationArchive) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *NotificationArchive) ReloadG() error {
	if o == nil {
		return errors.New("models: no NotificationArchive provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NotificationArchive) Reload(exec boil.Executor) error {
	ret, err := FindNotificationArchive(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *NotificationArchiveSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *NotificationArchiveSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NotificationArchiveSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty NotificationArchiveSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NotificationArchiveSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	notificationArchives := NotificationArchiveSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationArchivePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"notification_archive\".* FROM \"notification_archive\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, notificationArchivePrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&notificationArchives)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NotificationArchiveSlice")
	}

	*o = notificationArchives

	return nil
}

// NotificationArchiveExists checks if the NotificationArchive row exists.
func NotificationArchiveExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"notification_archive\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if notification_archive exists")
	}

	return exists, nil
}

// NotificationArchiveExistsG checks if the NotificationArchive row exists.
func NotificationArchiveExistsG(id int) (bool, error) {
	return NotificationArchiveExists(boil.GetDB(), id)
}

// NotificationArchiveExistsGP checks if the NotificationArchive row exists. Panics on error.
func NotificationArchiveExistsGP(id int) bool {
	e, err := NotificationArchiveExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// NotificationArchiveExistsP checks if the NotificationArchive row exists. Panics on error.
func NotificationArchiveExistsP(exec boil.Executor, id int) bool {
	e, err := NotificationArchiveExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
