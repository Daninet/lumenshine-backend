// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// UserWallet is an object representing the database table.
type UserWallet struct {
	ID                int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID            int       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	PublicKey0        string    `boil:"public_key_0" json:"public_key_0" toml:"public_key_0" yaml:"public_key_0"`
	WalletName        string    `boil:"wallet_name" json:"wallet_name" toml:"wallet_name" yaml:"wallet_name"`
	FederationAddress string    `boil:"federation_address" json:"federation_address" toml:"federation_address" yaml:"federation_address"`
	ShowOnHomescreen  bool      `boil:"show_on_homescreen" json:"show_on_homescreen" toml:"show_on_homescreen" yaml:"show_on_homescreen"`
	CreatedAt         time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt         time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UpdatedBy         string    `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`

	R *userWalletR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userWalletL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserWalletColumns = struct {
	ID                string
	UserID            string
	PublicKey0        string
	WalletName        string
	FederationAddress string
	ShowOnHomescreen  string
	CreatedAt         string
	UpdatedAt         string
	UpdatedBy         string
}{
	ID:                "id",
	UserID:            "user_id",
	PublicKey0:        "public_key_0",
	WalletName:        "wallet_name",
	FederationAddress: "federation_address",
	ShowOnHomescreen:  "show_on_homescreen",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
	UpdatedBy:         "updated_by",
}

// userWalletR is where relationships are stored.
type userWalletR struct {
	User *UserProfile
}

// userWalletL is where Load methods for each relationship are stored.
type userWalletL struct{}

var (
	userWalletColumns               = []string{"id", "user_id", "public_key_0", "wallet_name", "federation_address", "show_on_homescreen", "created_at", "updated_at", "updated_by"}
	userWalletColumnsWithoutDefault = []string{"user_id", "public_key_0", "wallet_name", "federation_address", "updated_by"}
	userWalletColumnsWithDefault    = []string{"id", "show_on_homescreen", "created_at", "updated_at"}
	userWalletPrimaryKeyColumns     = []string{"id"}
)

type (
	// UserWalletSlice is an alias for a slice of pointers to UserWallet.
	// This should generally be used opposed to []UserWallet.
	UserWalletSlice []*UserWallet
	// UserWalletHook is the signature for custom UserWallet hook methods
	UserWalletHook func(boil.Executor, *UserWallet) error

	userWalletQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userWalletType                 = reflect.TypeOf(&UserWallet{})
	userWalletMapping              = queries.MakeStructMapping(userWalletType)
	userWalletPrimaryKeyMapping, _ = queries.BindMapping(userWalletType, userWalletMapping, userWalletPrimaryKeyColumns)
	userWalletInsertCacheMut       sync.RWMutex
	userWalletInsertCache          = make(map[string]insertCache)
	userWalletUpdateCacheMut       sync.RWMutex
	userWalletUpdateCache          = make(map[string]updateCache)
	userWalletUpsertCacheMut       sync.RWMutex
	userWalletUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var userWalletBeforeInsertHooks []UserWalletHook
var userWalletBeforeUpdateHooks []UserWalletHook
var userWalletBeforeDeleteHooks []UserWalletHook
var userWalletBeforeUpsertHooks []UserWalletHook

var userWalletAfterInsertHooks []UserWalletHook
var userWalletAfterSelectHooks []UserWalletHook
var userWalletAfterUpdateHooks []UserWalletHook
var userWalletAfterDeleteHooks []UserWalletHook
var userWalletAfterUpsertHooks []UserWalletHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserWallet) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userWalletBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserWallet) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userWalletBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserWallet) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userWalletBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserWallet) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userWalletBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserWallet) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userWalletAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserWallet) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range userWalletAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserWallet) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userWalletAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserWallet) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userWalletAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserWallet) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userWalletAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserWalletHook registers your hook function for all future operations.
func AddUserWalletHook(hookPoint boil.HookPoint, userWalletHook UserWalletHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userWalletBeforeInsertHooks = append(userWalletBeforeInsertHooks, userWalletHook)
	case boil.BeforeUpdateHook:
		userWalletBeforeUpdateHooks = append(userWalletBeforeUpdateHooks, userWalletHook)
	case boil.BeforeDeleteHook:
		userWalletBeforeDeleteHooks = append(userWalletBeforeDeleteHooks, userWalletHook)
	case boil.BeforeUpsertHook:
		userWalletBeforeUpsertHooks = append(userWalletBeforeUpsertHooks, userWalletHook)
	case boil.AfterInsertHook:
		userWalletAfterInsertHooks = append(userWalletAfterInsertHooks, userWalletHook)
	case boil.AfterSelectHook:
		userWalletAfterSelectHooks = append(userWalletAfterSelectHooks, userWalletHook)
	case boil.AfterUpdateHook:
		userWalletAfterUpdateHooks = append(userWalletAfterUpdateHooks, userWalletHook)
	case boil.AfterDeleteHook:
		userWalletAfterDeleteHooks = append(userWalletAfterDeleteHooks, userWalletHook)
	case boil.AfterUpsertHook:
		userWalletAfterUpsertHooks = append(userWalletAfterUpsertHooks, userWalletHook)
	}
}

// OneP returns a single userWallet record from the query, and panics on error.
func (q userWalletQuery) OneP() *UserWallet {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single userWallet record from the query.
func (q userWalletQuery) One() (*UserWallet, error) {
	o := &UserWallet{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_wallet")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all UserWallet records from the query, and panics on error.
func (q userWalletQuery) AllP() UserWalletSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all UserWallet records from the query.
func (q userWalletQuery) All() (UserWalletSlice, error) {
	var o []*UserWallet

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserWallet slice")
	}

	if len(userWalletAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all UserWallet records in the query, and panics on error.
func (q userWalletQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all UserWallet records in the query.
func (q userWalletQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_wallet rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q userWalletQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q userWalletQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_wallet exists")
	}

	return count > 0, nil
}

// UserG pointed to by the foreign key.
func (o *UserWallet) UserG(mods ...qm.QueryMod) userProfileQuery {
	return o.User(boil.GetDB(), mods...)
}

// User pointed to by the foreign key.
func (o *UserWallet) User(exec boil.Executor, mods ...qm.QueryMod) userProfileQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := UserProfiles(exec, queryMods...)
	queries.SetFrom(query.Query, "\"user_profile\"")

	return query
} // LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (userWalletL) LoadUser(e boil.Executor, singular bool, maybeUserWallet interface{}) error {
	var slice []*UserWallet
	var object *UserWallet

	count := 1
	if singular {
		object = maybeUserWallet.(*UserWallet)
	} else {
		slice = *maybeUserWallet.(*[]*UserWallet)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &userWalletR{}
		}
		args[0] = object.UserID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &userWalletR{}
			}
			args[i] = obj.UserID
		}
	}

	query := fmt.Sprintf(
		"select * from \"user_profile\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserProfile")
	}
	defer results.Close()

	var resultSlice []*UserProfile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserProfile")
	}

	if len(userWalletAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.User = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				break
			}
		}
	}

	return nil
}

// SetUserG of the user_wallet to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserUserWallets.
// Uses the global database handle.
func (o *UserWallet) SetUserG(insert bool, related *UserProfile) error {
	return o.SetUser(boil.GetDB(), insert, related)
}

// SetUserP of the user_wallet to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserUserWallets.
// Panics on error.
func (o *UserWallet) SetUserP(exec boil.Executor, insert bool, related *UserProfile) {
	if err := o.SetUser(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUserGP of the user_wallet to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserUserWallets.
// Uses the global database handle and panics on error.
func (o *UserWallet) SetUserGP(insert bool, related *UserProfile) {
	if err := o.SetUser(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUser of the user_wallet to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserUserWallets.
func (o *UserWallet) SetUser(exec boil.Executor, insert bool, related *UserProfile) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_wallet\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userWalletPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID

	if o.R == nil {
		o.R = &userWalletR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userProfileR{
			UserUserWallets: UserWalletSlice{o},
		}
	} else {
		related.R.UserUserWallets = append(related.R.UserUserWallets, o)
	}

	return nil
}

// UserWalletsG retrieves all records.
func UserWalletsG(mods ...qm.QueryMod) userWalletQuery {
	return UserWallets(boil.GetDB(), mods...)
}

// UserWallets retrieves all the records using an executor.
func UserWallets(exec boil.Executor, mods ...qm.QueryMod) userWalletQuery {
	mods = append(mods, qm.From("\"user_wallet\""))
	return userWalletQuery{NewQuery(exec, mods...)}
}

// FindUserWalletG retrieves a single record by ID.
func FindUserWalletG(id int, selectCols ...string) (*UserWallet, error) {
	return FindUserWallet(boil.GetDB(), id, selectCols...)
}

// FindUserWalletGP retrieves a single record by ID, and panics on error.
func FindUserWalletGP(id int, selectCols ...string) *UserWallet {
	retobj, err := FindUserWallet(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindUserWallet retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserWallet(exec boil.Executor, id int, selectCols ...string) (*UserWallet, error) {
	userWalletObj := &UserWallet{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_wallet\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(userWalletObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_wallet")
	}

	return userWalletObj, nil
}

// FindUserWalletP retrieves a single record by ID with an executor, and panics on error.
func FindUserWalletP(exec boil.Executor, id int, selectCols ...string) *UserWallet {
	retobj, err := FindUserWallet(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UserWallet) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *UserWallet) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *UserWallet) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *UserWallet) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no user_wallet provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userWalletColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	userWalletInsertCacheMut.RLock()
	cache, cached := userWalletInsertCache[key]
	userWalletInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			userWalletColumns,
			userWalletColumnsWithDefault,
			userWalletColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(userWalletType, userWalletMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userWalletType, userWalletMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_wallet\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_wallet\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_wallet")
	}

	if !cached {
		userWalletInsertCacheMut.Lock()
		userWalletInsertCache[key] = cache
		userWalletInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single UserWallet record. See Update for
// whitelist behavior description.
func (o *UserWallet) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single UserWallet record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *UserWallet) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the UserWallet, and panics on error.
// See Update for whitelist behavior description.
func (o *UserWallet) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the UserWallet.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *UserWallet) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	userWalletUpdateCacheMut.RLock()
	cache, cached := userWalletUpdateCache[key]
	userWalletUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			userWalletColumns,
			userWalletPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update user_wallet, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_wallet\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userWalletPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userWalletType, userWalletMapping, append(wl, userWalletPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update user_wallet row")
	}

	if !cached {
		userWalletUpdateCacheMut.Lock()
		userWalletUpdateCache[key] = cache
		userWalletUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q userWalletQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q userWalletQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for user_wallet")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UserWalletSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o UserWalletSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o UserWalletSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserWalletSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userWalletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_wallet\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userWalletPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in userWallet slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UserWallet) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *UserWallet) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *UserWallet) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *UserWallet) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no user_wallet provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userWalletColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userWalletUpsertCacheMut.RLock()
	cache, cached := userWalletUpsertCache[key]
	userWalletUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			userWalletColumns,
			userWalletColumnsWithDefault,
			userWalletColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			userWalletColumns,
			userWalletPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert user_wallet, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userWalletPrimaryKeyColumns))
			copy(conflict, userWalletPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"user_wallet\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userWalletType, userWalletMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userWalletType, userWalletMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_wallet")
	}

	if !cached {
		userWalletUpsertCacheMut.Lock()
		userWalletUpsertCache[key] = cache
		userWalletUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single UserWallet record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UserWallet) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single UserWallet record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UserWallet) DeleteG() error {
	if o == nil {
		return errors.New("models: no UserWallet provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single UserWallet record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UserWallet) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single UserWallet record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserWallet) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no UserWallet provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userWalletPrimaryKeyMapping)
	sql := "DELETE FROM \"user_wallet\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from user_wallet")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q userWalletQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q userWalletQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no userWalletQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from user_wallet")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o UserWalletSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o UserWalletSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no UserWallet slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o UserWalletSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserWalletSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no UserWallet slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(userWalletBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userWalletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_wallet\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userWalletPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from userWallet slice")
	}

	if len(userWalletAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *UserWallet) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *UserWallet) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UserWallet) ReloadG() error {
	if o == nil {
		return errors.New("models: no UserWallet provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserWallet) Reload(exec boil.Executor) error {
	ret, err := FindUserWallet(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UserWalletSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UserWalletSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserWalletSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty UserWalletSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserWalletSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	userWallets := UserWalletSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userWalletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_wallet\".* FROM \"user_wallet\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userWalletPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&userWallets)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserWalletSlice")
	}

	*o = userWallets

	return nil
}

// UserWalletExists checks if the UserWallet row exists.
func UserWalletExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_wallet\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_wallet exists")
	}

	return exists, nil
}

// UserWalletExistsG checks if the UserWallet row exists.
func UserWalletExistsG(id int) (bool, error) {
	return UserWalletExists(boil.GetDB(), id)
}

// UserWalletExistsGP checks if the UserWallet row exists. Panics on error.
func UserWalletExistsGP(id int) bool {
	e, err := UserWalletExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// UserWalletExistsP checks if the UserWallet row exists. Panics on error.
func UserWalletExistsP(exec boil.Executor, id int) bool {
	e, err := UserWalletExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
