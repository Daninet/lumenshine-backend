// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// IcoPhase is an object representing the database table.
type IcoPhase struct {
	PhaseName  string    `boil:"phase_name" json:"phase_name" toml:"phase_name" yaml:"phase_name"`
	StartTime  time.Time `boil:"start_time" json:"start_time" toml:"start_time" yaml:"start_time"`
	EndTime    time.Time `boil:"end_time" json:"end_time" toml:"end_time" yaml:"end_time"`
	CoinAmount int64     `boil:"coin_amount" json:"coin_amount" toml:"coin_amount" yaml:"coin_amount"`
	IsActive   bool      `boil:"is_active" json:"is_active" toml:"is_active" yaml:"is_active"`
	CreatedAt  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *icoPhaseR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L icoPhaseL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var IcoPhaseColumns = struct {
	PhaseName  string
	StartTime  string
	EndTime    string
	CoinAmount string
	IsActive   string
	CreatedAt  string
	UpdatedAt  string
}{
	PhaseName:  "phase_name",
	StartTime:  "start_time",
	EndTime:    "end_time",
	CoinAmount: "coin_amount",
	IsActive:   "is_active",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

// IcoPhaseRels is where relationship names are stored.
var IcoPhaseRels = struct {
	OrderPhaseUserOrders string
}{
	OrderPhaseUserOrders: "OrderPhaseUserOrders",
}

// icoPhaseR is where relationships are stored.
type icoPhaseR struct {
	OrderPhaseUserOrders UserOrderSlice
}

// NewStruct creates a new relationship struct
func (*icoPhaseR) NewStruct() *icoPhaseR {
	return &icoPhaseR{}
}

// icoPhaseL is where Load methods for each relationship are stored.
type icoPhaseL struct{}

var (
	icoPhaseColumns               = []string{"phase_name", "start_time", "end_time", "coin_amount", "is_active", "created_at", "updated_at"}
	icoPhaseColumnsWithoutDefault = []string{"phase_name", "start_time", "end_time", "coin_amount", "is_active"}
	icoPhaseColumnsWithDefault    = []string{"created_at", "updated_at"}
	icoPhasePrimaryKeyColumns     = []string{"phase_name"}
)

type (
	// IcoPhaseSlice is an alias for a slice of pointers to IcoPhase.
	// This should generally be used opposed to []IcoPhase.
	IcoPhaseSlice []*IcoPhase
	// IcoPhaseHook is the signature for custom IcoPhase hook methods
	IcoPhaseHook func(boil.Executor, *IcoPhase) error

	icoPhaseQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	icoPhaseType                 = reflect.TypeOf(&IcoPhase{})
	icoPhaseMapping              = queries.MakeStructMapping(icoPhaseType)
	icoPhasePrimaryKeyMapping, _ = queries.BindMapping(icoPhaseType, icoPhaseMapping, icoPhasePrimaryKeyColumns)
	icoPhaseInsertCacheMut       sync.RWMutex
	icoPhaseInsertCache          = make(map[string]insertCache)
	icoPhaseUpdateCacheMut       sync.RWMutex
	icoPhaseUpdateCache          = make(map[string]updateCache)
	icoPhaseUpsertCacheMut       sync.RWMutex
	icoPhaseUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var icoPhaseBeforeInsertHooks []IcoPhaseHook
var icoPhaseBeforeUpdateHooks []IcoPhaseHook
var icoPhaseBeforeDeleteHooks []IcoPhaseHook
var icoPhaseBeforeUpsertHooks []IcoPhaseHook

var icoPhaseAfterInsertHooks []IcoPhaseHook
var icoPhaseAfterSelectHooks []IcoPhaseHook
var icoPhaseAfterUpdateHooks []IcoPhaseHook
var icoPhaseAfterDeleteHooks []IcoPhaseHook
var icoPhaseAfterUpsertHooks []IcoPhaseHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *IcoPhase) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range icoPhaseBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *IcoPhase) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range icoPhaseBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *IcoPhase) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range icoPhaseBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *IcoPhase) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range icoPhaseBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *IcoPhase) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range icoPhaseAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *IcoPhase) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range icoPhaseAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *IcoPhase) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range icoPhaseAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *IcoPhase) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range icoPhaseAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *IcoPhase) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range icoPhaseAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddIcoPhaseHook registers your hook function for all future operations.
func AddIcoPhaseHook(hookPoint boil.HookPoint, icoPhaseHook IcoPhaseHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		icoPhaseBeforeInsertHooks = append(icoPhaseBeforeInsertHooks, icoPhaseHook)
	case boil.BeforeUpdateHook:
		icoPhaseBeforeUpdateHooks = append(icoPhaseBeforeUpdateHooks, icoPhaseHook)
	case boil.BeforeDeleteHook:
		icoPhaseBeforeDeleteHooks = append(icoPhaseBeforeDeleteHooks, icoPhaseHook)
	case boil.BeforeUpsertHook:
		icoPhaseBeforeUpsertHooks = append(icoPhaseBeforeUpsertHooks, icoPhaseHook)
	case boil.AfterInsertHook:
		icoPhaseAfterInsertHooks = append(icoPhaseAfterInsertHooks, icoPhaseHook)
	case boil.AfterSelectHook:
		icoPhaseAfterSelectHooks = append(icoPhaseAfterSelectHooks, icoPhaseHook)
	case boil.AfterUpdateHook:
		icoPhaseAfterUpdateHooks = append(icoPhaseAfterUpdateHooks, icoPhaseHook)
	case boil.AfterDeleteHook:
		icoPhaseAfterDeleteHooks = append(icoPhaseAfterDeleteHooks, icoPhaseHook)
	case boil.AfterUpsertHook:
		icoPhaseAfterUpsertHooks = append(icoPhaseAfterUpsertHooks, icoPhaseHook)
	}
}

// OneG returns a single icoPhase record from the query using the global executor.
func (q icoPhaseQuery) OneG() (*IcoPhase, error) {
	return q.One(boil.GetDB())
}

// One returns a single icoPhase record from the query.
func (q icoPhaseQuery) One(exec boil.Executor) (*IcoPhase, error) {
	o := &IcoPhase{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ico_phase")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all IcoPhase records from the query using the global executor.
func (q icoPhaseQuery) AllG() (IcoPhaseSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all IcoPhase records from the query.
func (q icoPhaseQuery) All(exec boil.Executor) (IcoPhaseSlice, error) {
	var o []*IcoPhase

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to IcoPhase slice")
	}

	if len(icoPhaseAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all IcoPhase records in the query, and panics on error.
func (q icoPhaseQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all IcoPhase records in the query.
func (q icoPhaseQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ico_phase rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q icoPhaseQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q icoPhaseQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ico_phase exists")
	}

	return count > 0, nil
}

// OrderPhaseUserOrders retrieves all the user_order's UserOrders with an executor via order_phase_id column.
func (o *IcoPhase) OrderPhaseUserOrders(mods ...qm.QueryMod) userOrderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_order\".\"order_phase_id\"=?", o.PhaseName),
	)

	query := UserOrders(queryMods...)
	queries.SetFrom(query.Query, "\"user_order\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_order\".*"})
	}

	return query
}

// LoadOrderPhaseUserOrders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (icoPhaseL) LoadOrderPhaseUserOrders(e boil.Executor, singular bool, maybeIcoPhase interface{}, mods queries.Applicator) error {
	var slice []*IcoPhase
	var object *IcoPhase

	if singular {
		object = maybeIcoPhase.(*IcoPhase)
	} else {
		slice = *maybeIcoPhase.(*[]*IcoPhase)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &icoPhaseR{}
		}
		args = append(args, object.PhaseName)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &icoPhaseR{}
			}

			for _, a := range args {
				if a == obj.PhaseName {
					continue Outer
				}
			}

			args = append(args, obj.PhaseName)
		}
	}

	query := NewQuery(qm.From(`user_order`), qm.WhereIn(`order_phase_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_order")
	}

	var resultSlice []*UserOrder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_order")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_order")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_order")
	}

	if len(userOrderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrderPhaseUserOrders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userOrderR{}
			}
			foreign.R.OrderPhase = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PhaseName == foreign.OrderPhaseID {
				local.R.OrderPhaseUserOrders = append(local.R.OrderPhaseUserOrders, foreign)
				if foreign.R == nil {
					foreign.R = &userOrderR{}
				}
				foreign.R.OrderPhase = local
				break
			}
		}
	}

	return nil
}

// AddOrderPhaseUserOrdersG adds the given related objects to the existing relationships
// of the ico_phase, optionally inserting them as new records.
// Appends related to o.R.OrderPhaseUserOrders.
// Sets related.R.OrderPhase appropriately.
// Uses the global database handle.
func (o *IcoPhase) AddOrderPhaseUserOrdersG(insert bool, related ...*UserOrder) error {
	return o.AddOrderPhaseUserOrders(boil.GetDB(), insert, related...)
}

// AddOrderPhaseUserOrders adds the given related objects to the existing relationships
// of the ico_phase, optionally inserting them as new records.
// Appends related to o.R.OrderPhaseUserOrders.
// Sets related.R.OrderPhase appropriately.
func (o *IcoPhase) AddOrderPhaseUserOrders(exec boil.Executor, insert bool, related ...*UserOrder) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrderPhaseID = o.PhaseName
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_order\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"order_phase_id"}),
				strmangle.WhereClause("\"", "\"", 2, userOrderPrimaryKeyColumns),
			)
			values := []interface{}{o.PhaseName, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrderPhaseID = o.PhaseName
		}
	}

	if o.R == nil {
		o.R = &icoPhaseR{
			OrderPhaseUserOrders: related,
		}
	} else {
		o.R.OrderPhaseUserOrders = append(o.R.OrderPhaseUserOrders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userOrderR{
				OrderPhase: o,
			}
		} else {
			rel.R.OrderPhase = o
		}
	}
	return nil
}

// IcoPhases retrieves all the records using an executor.
func IcoPhases(mods ...qm.QueryMod) icoPhaseQuery {
	mods = append(mods, qm.From("\"ico_phase\""))
	return icoPhaseQuery{NewQuery(mods...)}
}

// FindIcoPhaseG retrieves a single record by ID.
func FindIcoPhaseG(phaseName string, selectCols ...string) (*IcoPhase, error) {
	return FindIcoPhase(boil.GetDB(), phaseName, selectCols...)
}

// FindIcoPhase retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindIcoPhase(exec boil.Executor, phaseName string, selectCols ...string) (*IcoPhase, error) {
	icoPhaseObj := &IcoPhase{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ico_phase\" where \"phase_name\"=$1", sel,
	)

	q := queries.Raw(query, phaseName)

	err := q.Bind(nil, exec, icoPhaseObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ico_phase")
	}

	return icoPhaseObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *IcoPhase) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *IcoPhase) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ico_phase provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(icoPhaseColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	icoPhaseInsertCacheMut.RLock()
	cache, cached := icoPhaseInsertCache[key]
	icoPhaseInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			icoPhaseColumns,
			icoPhaseColumnsWithDefault,
			icoPhaseColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(icoPhaseType, icoPhaseMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(icoPhaseType, icoPhaseMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ico_phase\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ico_phase\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ico_phase")
	}

	if !cached {
		icoPhaseInsertCacheMut.Lock()
		icoPhaseInsertCache[key] = cache
		icoPhaseInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single IcoPhase record using the global executor.
// See Update for more documentation.
func (o *IcoPhase) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the IcoPhase.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *IcoPhase) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	icoPhaseUpdateCacheMut.RLock()
	cache, cached := icoPhaseUpdateCache[key]
	icoPhaseUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			icoPhaseColumns,
			icoPhasePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update ico_phase, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ico_phase\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, icoPhasePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(icoPhaseType, icoPhaseMapping, append(wl, icoPhasePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update ico_phase row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for ico_phase")
	}

	if !cached {
		icoPhaseUpdateCacheMut.Lock()
		icoPhaseUpdateCache[key] = cache
		icoPhaseUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q icoPhaseQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for ico_phase")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for ico_phase")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o IcoPhaseSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o IcoPhaseSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), icoPhasePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ico_phase\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, icoPhasePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in icoPhase slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all icoPhase")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *IcoPhase) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *IcoPhase) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ico_phase provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(icoPhaseColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	icoPhaseUpsertCacheMut.RLock()
	cache, cached := icoPhaseUpsertCache[key]
	icoPhaseUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			icoPhaseColumns,
			icoPhaseColumnsWithDefault,
			icoPhaseColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			icoPhaseColumns,
			icoPhasePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert ico_phase, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(icoPhasePrimaryKeyColumns))
			copy(conflict, icoPhasePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"ico_phase\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(icoPhaseType, icoPhaseMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(icoPhaseType, icoPhaseMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert ico_phase")
	}

	if !cached {
		icoPhaseUpsertCacheMut.Lock()
		icoPhaseUpsertCache[key] = cache
		icoPhaseUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single IcoPhase record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *IcoPhase) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single IcoPhase record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *IcoPhase) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no IcoPhase provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), icoPhasePrimaryKeyMapping)
	sql := "DELETE FROM \"ico_phase\" WHERE \"phase_name\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from ico_phase")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for ico_phase")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q icoPhaseQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no icoPhaseQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ico_phase")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ico_phase")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o IcoPhaseSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o IcoPhaseSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no IcoPhase slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(icoPhaseBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), icoPhasePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ico_phase\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, icoPhasePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from icoPhase slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ico_phase")
	}

	if len(icoPhaseAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *IcoPhase) ReloadG() error {
	if o == nil {
		return errors.New("models: no IcoPhase provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *IcoPhase) Reload(exec boil.Executor) error {
	ret, err := FindIcoPhase(exec, o.PhaseName)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IcoPhaseSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty IcoPhaseSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IcoPhaseSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := IcoPhaseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), icoPhasePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ico_phase\".* FROM \"ico_phase\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, icoPhasePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in IcoPhaseSlice")
	}

	*o = slice

	return nil
}

// IcoPhaseExistsG checks if the IcoPhase row exists.
func IcoPhaseExistsG(phaseName string) (bool, error) {
	return IcoPhaseExists(boil.GetDB(), phaseName)
}

// IcoPhaseExists checks if the IcoPhase row exists.
func IcoPhaseExists(exec boil.Executor, phaseName string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ico_phase\" where \"phase_name\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, phaseName)
	}

	row := exec.QueryRow(sql, phaseName)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ico_phase exists")
	}

	return exists, nil
}
