// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// KeyValueStore is an object representing the database table.
type KeyValueStore struct {
	Key      string `boil:"key" json:"key" toml:"key" yaml:"key"`
	STRValue string `boil:"str_value" json:"str_value" toml:"str_value" yaml:"str_value"`
	IntValue int64  `boil:"int_value" json:"int_value" toml:"int_value" yaml:"int_value"`

	R *keyValueStoreR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L keyValueStoreL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var KeyValueStoreColumns = struct {
	Key      string
	STRValue string
	IntValue string
}{
	Key:      "key",
	STRValue: "str_value",
	IntValue: "int_value",
}

// keyValueStoreR is where relationships are stored.
type keyValueStoreR struct {
}

// keyValueStoreL is where Load methods for each relationship are stored.
type keyValueStoreL struct{}

var (
	keyValueStoreColumns               = []string{"key", "str_value", "int_value"}
	keyValueStoreColumnsWithoutDefault = []string{"key", "str_value", "int_value"}
	keyValueStoreColumnsWithDefault    = []string{}
	keyValueStorePrimaryKeyColumns     = []string{"key"}
)

type (
	// KeyValueStoreSlice is an alias for a slice of pointers to KeyValueStore.
	// This should generally be used opposed to []KeyValueStore.
	KeyValueStoreSlice []*KeyValueStore
	// KeyValueStoreHook is the signature for custom KeyValueStore hook methods
	KeyValueStoreHook func(boil.Executor, *KeyValueStore) error

	keyValueStoreQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	keyValueStoreType                 = reflect.TypeOf(&KeyValueStore{})
	keyValueStoreMapping              = queries.MakeStructMapping(keyValueStoreType)
	keyValueStorePrimaryKeyMapping, _ = queries.BindMapping(keyValueStoreType, keyValueStoreMapping, keyValueStorePrimaryKeyColumns)
	keyValueStoreInsertCacheMut       sync.RWMutex
	keyValueStoreInsertCache          = make(map[string]insertCache)
	keyValueStoreUpdateCacheMut       sync.RWMutex
	keyValueStoreUpdateCache          = make(map[string]updateCache)
	keyValueStoreUpsertCacheMut       sync.RWMutex
	keyValueStoreUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var keyValueStoreBeforeInsertHooks []KeyValueStoreHook
var keyValueStoreBeforeUpdateHooks []KeyValueStoreHook
var keyValueStoreBeforeDeleteHooks []KeyValueStoreHook
var keyValueStoreBeforeUpsertHooks []KeyValueStoreHook

var keyValueStoreAfterInsertHooks []KeyValueStoreHook
var keyValueStoreAfterSelectHooks []KeyValueStoreHook
var keyValueStoreAfterUpdateHooks []KeyValueStoreHook
var keyValueStoreAfterDeleteHooks []KeyValueStoreHook
var keyValueStoreAfterUpsertHooks []KeyValueStoreHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *KeyValueStore) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range keyValueStoreBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *KeyValueStore) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range keyValueStoreBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *KeyValueStore) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range keyValueStoreBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *KeyValueStore) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range keyValueStoreBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *KeyValueStore) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range keyValueStoreAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *KeyValueStore) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range keyValueStoreAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *KeyValueStore) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range keyValueStoreAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *KeyValueStore) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range keyValueStoreAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *KeyValueStore) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range keyValueStoreAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddKeyValueStoreHook registers your hook function for all future operations.
func AddKeyValueStoreHook(hookPoint boil.HookPoint, keyValueStoreHook KeyValueStoreHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		keyValueStoreBeforeInsertHooks = append(keyValueStoreBeforeInsertHooks, keyValueStoreHook)
	case boil.BeforeUpdateHook:
		keyValueStoreBeforeUpdateHooks = append(keyValueStoreBeforeUpdateHooks, keyValueStoreHook)
	case boil.BeforeDeleteHook:
		keyValueStoreBeforeDeleteHooks = append(keyValueStoreBeforeDeleteHooks, keyValueStoreHook)
	case boil.BeforeUpsertHook:
		keyValueStoreBeforeUpsertHooks = append(keyValueStoreBeforeUpsertHooks, keyValueStoreHook)
	case boil.AfterInsertHook:
		keyValueStoreAfterInsertHooks = append(keyValueStoreAfterInsertHooks, keyValueStoreHook)
	case boil.AfterSelectHook:
		keyValueStoreAfterSelectHooks = append(keyValueStoreAfterSelectHooks, keyValueStoreHook)
	case boil.AfterUpdateHook:
		keyValueStoreAfterUpdateHooks = append(keyValueStoreAfterUpdateHooks, keyValueStoreHook)
	case boil.AfterDeleteHook:
		keyValueStoreAfterDeleteHooks = append(keyValueStoreAfterDeleteHooks, keyValueStoreHook)
	case boil.AfterUpsertHook:
		keyValueStoreAfterUpsertHooks = append(keyValueStoreAfterUpsertHooks, keyValueStoreHook)
	}
}

// OneP returns a single keyValueStore record from the query, and panics on error.
func (q keyValueStoreQuery) OneP() *KeyValueStore {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single keyValueStore record from the query.
func (q keyValueStoreQuery) One() (*KeyValueStore, error) {
	o := &KeyValueStore{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for key_value_store")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all KeyValueStore records from the query, and panics on error.
func (q keyValueStoreQuery) AllP() KeyValueStoreSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all KeyValueStore records from the query.
func (q keyValueStoreQuery) All() (KeyValueStoreSlice, error) {
	var o []*KeyValueStore

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to KeyValueStore slice")
	}

	if len(keyValueStoreAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all KeyValueStore records in the query, and panics on error.
func (q keyValueStoreQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all KeyValueStore records in the query.
func (q keyValueStoreQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count key_value_store rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q keyValueStoreQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q keyValueStoreQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if key_value_store exists")
	}

	return count > 0, nil
}

// KeyValueStoresG retrieves all records.
func KeyValueStoresG(mods ...qm.QueryMod) keyValueStoreQuery {
	return KeyValueStores(boil.GetDB(), mods...)
}

// KeyValueStores retrieves all the records using an executor.
func KeyValueStores(exec boil.Executor, mods ...qm.QueryMod) keyValueStoreQuery {
	mods = append(mods, qm.From("\"key_value_store\""))
	return keyValueStoreQuery{NewQuery(exec, mods...)}
}

// FindKeyValueStoreG retrieves a single record by ID.
func FindKeyValueStoreG(key string, selectCols ...string) (*KeyValueStore, error) {
	return FindKeyValueStore(boil.GetDB(), key, selectCols...)
}

// FindKeyValueStoreGP retrieves a single record by ID, and panics on error.
func FindKeyValueStoreGP(key string, selectCols ...string) *KeyValueStore {
	retobj, err := FindKeyValueStore(boil.GetDB(), key, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindKeyValueStore retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindKeyValueStore(exec boil.Executor, key string, selectCols ...string) (*KeyValueStore, error) {
	keyValueStoreObj := &KeyValueStore{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"key_value_store\" where \"key\"=$1", sel,
	)

	q := queries.Raw(exec, query, key)

	err := q.Bind(keyValueStoreObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from key_value_store")
	}

	return keyValueStoreObj, nil
}

// FindKeyValueStoreP retrieves a single record by ID with an executor, and panics on error.
func FindKeyValueStoreP(exec boil.Executor, key string, selectCols ...string) *KeyValueStore {
	retobj, err := FindKeyValueStore(exec, key, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *KeyValueStore) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *KeyValueStore) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *KeyValueStore) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *KeyValueStore) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no key_value_store provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(keyValueStoreColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	keyValueStoreInsertCacheMut.RLock()
	cache, cached := keyValueStoreInsertCache[key]
	keyValueStoreInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			keyValueStoreColumns,
			keyValueStoreColumnsWithDefault,
			keyValueStoreColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(keyValueStoreType, keyValueStoreMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(keyValueStoreType, keyValueStoreMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"key_value_store\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"key_value_store\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into key_value_store")
	}

	if !cached {
		keyValueStoreInsertCacheMut.Lock()
		keyValueStoreInsertCache[key] = cache
		keyValueStoreInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single KeyValueStore record. See Update for
// whitelist behavior description.
func (o *KeyValueStore) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single KeyValueStore record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *KeyValueStore) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the KeyValueStore, and panics on error.
// See Update for whitelist behavior description.
func (o *KeyValueStore) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the KeyValueStore.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *KeyValueStore) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	keyValueStoreUpdateCacheMut.RLock()
	cache, cached := keyValueStoreUpdateCache[key]
	keyValueStoreUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			keyValueStoreColumns,
			keyValueStorePrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update key_value_store, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"key_value_store\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, keyValueStorePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(keyValueStoreType, keyValueStoreMapping, append(wl, keyValueStorePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update key_value_store row")
	}

	if !cached {
		keyValueStoreUpdateCacheMut.Lock()
		keyValueStoreUpdateCache[key] = cache
		keyValueStoreUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q keyValueStoreQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q keyValueStoreQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for key_value_store")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o KeyValueStoreSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o KeyValueStoreSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o KeyValueStoreSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o KeyValueStoreSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), keyValueStorePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"key_value_store\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, keyValueStorePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in keyValueStore slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *KeyValueStore) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *KeyValueStore) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *KeyValueStore) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *KeyValueStore) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no key_value_store provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(keyValueStoreColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	keyValueStoreUpsertCacheMut.RLock()
	cache, cached := keyValueStoreUpsertCache[key]
	keyValueStoreUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			keyValueStoreColumns,
			keyValueStoreColumnsWithDefault,
			keyValueStoreColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			keyValueStoreColumns,
			keyValueStorePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert key_value_store, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(keyValueStorePrimaryKeyColumns))
			copy(conflict, keyValueStorePrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"key_value_store\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(keyValueStoreType, keyValueStoreMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(keyValueStoreType, keyValueStoreMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert key_value_store")
	}

	if !cached {
		keyValueStoreUpsertCacheMut.Lock()
		keyValueStoreUpsertCache[key] = cache
		keyValueStoreUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single KeyValueStore record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *KeyValueStore) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single KeyValueStore record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *KeyValueStore) DeleteG() error {
	if o == nil {
		return errors.New("models: no KeyValueStore provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single KeyValueStore record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *KeyValueStore) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single KeyValueStore record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *KeyValueStore) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no KeyValueStore provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), keyValueStorePrimaryKeyMapping)
	sql := "DELETE FROM \"key_value_store\" WHERE \"key\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from key_value_store")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q keyValueStoreQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q keyValueStoreQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no keyValueStoreQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from key_value_store")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o KeyValueStoreSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o KeyValueStoreSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no KeyValueStore slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o KeyValueStoreSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o KeyValueStoreSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no KeyValueStore slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(keyValueStoreBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), keyValueStorePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"key_value_store\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, keyValueStorePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from keyValueStore slice")
	}

	if len(keyValueStoreAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *KeyValueStore) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *KeyValueStore) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *KeyValueStore) ReloadG() error {
	if o == nil {
		return errors.New("models: no KeyValueStore provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *KeyValueStore) Reload(exec boil.Executor) error {
	ret, err := FindKeyValueStore(exec, o.Key)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *KeyValueStoreSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *KeyValueStoreSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *KeyValueStoreSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty KeyValueStoreSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *KeyValueStoreSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	keyValueStores := KeyValueStoreSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), keyValueStorePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"key_value_store\".* FROM \"key_value_store\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, keyValueStorePrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&keyValueStores)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in KeyValueStoreSlice")
	}

	*o = keyValueStores

	return nil
}

// KeyValueStoreExists checks if the KeyValueStore row exists.
func KeyValueStoreExists(exec boil.Executor, key string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"key_value_store\" where \"key\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, key)
	}

	row := exec.QueryRow(sql, key)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if key_value_store exists")
	}

	return exists, nil
}

// KeyValueStoreExistsG checks if the KeyValueStore row exists.
func KeyValueStoreExistsG(key string) (bool, error) {
	return KeyValueStoreExists(boil.GetDB(), key)
}

// KeyValueStoreExistsGP checks if the KeyValueStore row exists. Panics on error.
func KeyValueStoreExistsGP(key string) bool {
	e, err := KeyValueStoreExists(boil.GetDB(), key)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// KeyValueStoreExistsP checks if the KeyValueStore row exists. Panics on error.
func KeyValueStoreExistsP(exec boil.Executor, key string) bool {
	e, err := KeyValueStoreExists(exec, key)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
