// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// UserSecurity is an object representing the database table.
type UserSecurity struct {
	ID                int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID            int       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	KDFSalt           string    `boil:"kdf_salt" json:"kdf_salt" toml:"kdf_salt" yaml:"kdf_salt"`
	MnemonicMasterKey string    `boil:"mnemonic_master_key" json:"mnemonic_master_key" toml:"mnemonic_master_key" yaml:"mnemonic_master_key"`
	MnemonicMasterIv  string    `boil:"mnemonic_master_iv" json:"mnemonic_master_iv" toml:"mnemonic_master_iv" yaml:"mnemonic_master_iv"`
	WordlistMasterKey string    `boil:"wordlist_master_key" json:"wordlist_master_key" toml:"wordlist_master_key" yaml:"wordlist_master_key"`
	WordlistMasterIv  string    `boil:"wordlist_master_iv" json:"wordlist_master_iv" toml:"wordlist_master_iv" yaml:"wordlist_master_iv"`
	Mnemonic          string    `boil:"mnemonic" json:"mnemonic" toml:"mnemonic" yaml:"mnemonic"`
	MnemonicIv        string    `boil:"mnemonic_iv" json:"mnemonic_iv" toml:"mnemonic_iv" yaml:"mnemonic_iv"`
	Wordlist          string    `boil:"wordlist" json:"wordlist" toml:"wordlist" yaml:"wordlist"`
	WordlistIv        string    `boil:"wordlist_iv" json:"wordlist_iv" toml:"wordlist_iv" yaml:"wordlist_iv"`
	PublicKey0        string    `boil:"public_key_0" json:"public_key_0" toml:"public_key_0" yaml:"public_key_0"`
	PublicKey188      string    `boil:"public_key_188" json:"public_key_188" toml:"public_key_188" yaml:"public_key_188"`
	CreatedAt         time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt         time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UpdatedBy         string    `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`

	R *userSecurityR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userSecurityL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserSecurityColumns = struct {
	ID                string
	UserID            string
	KDFSalt           string
	MnemonicMasterKey string
	MnemonicMasterIv  string
	WordlistMasterKey string
	WordlistMasterIv  string
	Mnemonic          string
	MnemonicIv        string
	Wordlist          string
	WordlistIv        string
	PublicKey0        string
	PublicKey188      string
	CreatedAt         string
	UpdatedAt         string
	UpdatedBy         string
}{
	ID:                "id",
	UserID:            "user_id",
	KDFSalt:           "kdf_salt",
	MnemonicMasterKey: "mnemonic_master_key",
	MnemonicMasterIv:  "mnemonic_master_iv",
	WordlistMasterKey: "wordlist_master_key",
	WordlistMasterIv:  "wordlist_master_iv",
	Mnemonic:          "mnemonic",
	MnemonicIv:        "mnemonic_iv",
	Wordlist:          "wordlist",
	WordlistIv:        "wordlist_iv",
	PublicKey0:        "public_key_0",
	PublicKey188:      "public_key_188",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
	UpdatedBy:         "updated_by",
}

// userSecurityR is where relationships are stored.
type userSecurityR struct {
	User *UserProfile
}

// userSecurityL is where Load methods for each relationship are stored.
type userSecurityL struct{}

var (
	userSecurityColumns               = []string{"id", "user_id", "kdf_salt", "mnemonic_master_key", "mnemonic_master_iv", "wordlist_master_key", "wordlist_master_iv", "mnemonic", "mnemonic_iv", "wordlist", "wordlist_iv", "public_key_0", "public_key_188", "created_at", "updated_at", "updated_by"}
	userSecurityColumnsWithoutDefault = []string{"user_id", "kdf_salt", "mnemonic_master_key", "mnemonic_master_iv", "wordlist_master_key", "wordlist_master_iv", "mnemonic", "mnemonic_iv", "wordlist", "wordlist_iv", "public_key_0", "public_key_188", "updated_by"}
	userSecurityColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	userSecurityPrimaryKeyColumns     = []string{"id"}
)

type (
	// UserSecuritySlice is an alias for a slice of pointers to UserSecurity.
	// This should generally be used opposed to []UserSecurity.
	UserSecuritySlice []*UserSecurity
	// UserSecurityHook is the signature for custom UserSecurity hook methods
	UserSecurityHook func(boil.Executor, *UserSecurity) error

	userSecurityQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userSecurityType                 = reflect.TypeOf(&UserSecurity{})
	userSecurityMapping              = queries.MakeStructMapping(userSecurityType)
	userSecurityPrimaryKeyMapping, _ = queries.BindMapping(userSecurityType, userSecurityMapping, userSecurityPrimaryKeyColumns)
	userSecurityInsertCacheMut       sync.RWMutex
	userSecurityInsertCache          = make(map[string]insertCache)
	userSecurityUpdateCacheMut       sync.RWMutex
	userSecurityUpdateCache          = make(map[string]updateCache)
	userSecurityUpsertCacheMut       sync.RWMutex
	userSecurityUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var userSecurityBeforeInsertHooks []UserSecurityHook
var userSecurityBeforeUpdateHooks []UserSecurityHook
var userSecurityBeforeDeleteHooks []UserSecurityHook
var userSecurityBeforeUpsertHooks []UserSecurityHook

var userSecurityAfterInsertHooks []UserSecurityHook
var userSecurityAfterSelectHooks []UserSecurityHook
var userSecurityAfterUpdateHooks []UserSecurityHook
var userSecurityAfterDeleteHooks []UserSecurityHook
var userSecurityAfterUpsertHooks []UserSecurityHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserSecurity) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userSecurityBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserSecurity) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userSecurityBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserSecurity) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userSecurityBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserSecurity) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userSecurityBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserSecurity) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userSecurityAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserSecurity) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range userSecurityAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserSecurity) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userSecurityAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserSecurity) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userSecurityAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserSecurity) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userSecurityAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserSecurityHook registers your hook function for all future operations.
func AddUserSecurityHook(hookPoint boil.HookPoint, userSecurityHook UserSecurityHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userSecurityBeforeInsertHooks = append(userSecurityBeforeInsertHooks, userSecurityHook)
	case boil.BeforeUpdateHook:
		userSecurityBeforeUpdateHooks = append(userSecurityBeforeUpdateHooks, userSecurityHook)
	case boil.BeforeDeleteHook:
		userSecurityBeforeDeleteHooks = append(userSecurityBeforeDeleteHooks, userSecurityHook)
	case boil.BeforeUpsertHook:
		userSecurityBeforeUpsertHooks = append(userSecurityBeforeUpsertHooks, userSecurityHook)
	case boil.AfterInsertHook:
		userSecurityAfterInsertHooks = append(userSecurityAfterInsertHooks, userSecurityHook)
	case boil.AfterSelectHook:
		userSecurityAfterSelectHooks = append(userSecurityAfterSelectHooks, userSecurityHook)
	case boil.AfterUpdateHook:
		userSecurityAfterUpdateHooks = append(userSecurityAfterUpdateHooks, userSecurityHook)
	case boil.AfterDeleteHook:
		userSecurityAfterDeleteHooks = append(userSecurityAfterDeleteHooks, userSecurityHook)
	case boil.AfterUpsertHook:
		userSecurityAfterUpsertHooks = append(userSecurityAfterUpsertHooks, userSecurityHook)
	}
}

// OneP returns a single userSecurity record from the query, and panics on error.
func (q userSecurityQuery) OneP() *UserSecurity {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single userSecurity record from the query.
func (q userSecurityQuery) One() (*UserSecurity, error) {
	o := &UserSecurity{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_security")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all UserSecurity records from the query, and panics on error.
func (q userSecurityQuery) AllP() UserSecuritySlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all UserSecurity records from the query.
func (q userSecurityQuery) All() (UserSecuritySlice, error) {
	var o []*UserSecurity

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserSecurity slice")
	}

	if len(userSecurityAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all UserSecurity records in the query, and panics on error.
func (q userSecurityQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all UserSecurity records in the query.
func (q userSecurityQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_security rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q userSecurityQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q userSecurityQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_security exists")
	}

	return count > 0, nil
}

// UserG pointed to by the foreign key.
func (o *UserSecurity) UserG(mods ...qm.QueryMod) userProfileQuery {
	return o.User(boil.GetDB(), mods...)
}

// User pointed to by the foreign key.
func (o *UserSecurity) User(exec boil.Executor, mods ...qm.QueryMod) userProfileQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := UserProfiles(exec, queryMods...)
	queries.SetFrom(query.Query, "\"user_profile\"")

	return query
} // LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (userSecurityL) LoadUser(e boil.Executor, singular bool, maybeUserSecurity interface{}) error {
	var slice []*UserSecurity
	var object *UserSecurity

	count := 1
	if singular {
		object = maybeUserSecurity.(*UserSecurity)
	} else {
		slice = *maybeUserSecurity.(*[]*UserSecurity)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &userSecurityR{}
		}
		args[0] = object.UserID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &userSecurityR{}
			}
			args[i] = obj.UserID
		}
	}

	query := fmt.Sprintf(
		"select * from \"user_profile\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserProfile")
	}
	defer results.Close()

	var resultSlice []*UserProfile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserProfile")
	}

	if len(userSecurityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.User = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				break
			}
		}
	}

	return nil
}

// SetUserG of the user_security to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserUserSecurity.
// Uses the global database handle.
func (o *UserSecurity) SetUserG(insert bool, related *UserProfile) error {
	return o.SetUser(boil.GetDB(), insert, related)
}

// SetUserP of the user_security to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserUserSecurity.
// Panics on error.
func (o *UserSecurity) SetUserP(exec boil.Executor, insert bool, related *UserProfile) {
	if err := o.SetUser(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUserGP of the user_security to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserUserSecurity.
// Uses the global database handle and panics on error.
func (o *UserSecurity) SetUserGP(insert bool, related *UserProfile) {
	if err := o.SetUser(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUser of the user_security to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserUserSecurity.
func (o *UserSecurity) SetUser(exec boil.Executor, insert bool, related *UserProfile) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_security\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userSecurityPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID

	if o.R == nil {
		o.R = &userSecurityR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userProfileR{
			UserUserSecurity: o,
		}
	} else {
		related.R.UserUserSecurity = o
	}

	return nil
}

// UserSecuritiesG retrieves all records.
func UserSecuritiesG(mods ...qm.QueryMod) userSecurityQuery {
	return UserSecurities(boil.GetDB(), mods...)
}

// UserSecurities retrieves all the records using an executor.
func UserSecurities(exec boil.Executor, mods ...qm.QueryMod) userSecurityQuery {
	mods = append(mods, qm.From("\"user_security\""))
	return userSecurityQuery{NewQuery(exec, mods...)}
}

// FindUserSecurityG retrieves a single record by ID.
func FindUserSecurityG(id int, selectCols ...string) (*UserSecurity, error) {
	return FindUserSecurity(boil.GetDB(), id, selectCols...)
}

// FindUserSecurityGP retrieves a single record by ID, and panics on error.
func FindUserSecurityGP(id int, selectCols ...string) *UserSecurity {
	retobj, err := FindUserSecurity(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindUserSecurity retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserSecurity(exec boil.Executor, id int, selectCols ...string) (*UserSecurity, error) {
	userSecurityObj := &UserSecurity{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_security\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(userSecurityObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_security")
	}

	return userSecurityObj, nil
}

// FindUserSecurityP retrieves a single record by ID with an executor, and panics on error.
func FindUserSecurityP(exec boil.Executor, id int, selectCols ...string) *UserSecurity {
	retobj, err := FindUserSecurity(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UserSecurity) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *UserSecurity) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *UserSecurity) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *UserSecurity) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no user_security provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userSecurityColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	userSecurityInsertCacheMut.RLock()
	cache, cached := userSecurityInsertCache[key]
	userSecurityInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			userSecurityColumns,
			userSecurityColumnsWithDefault,
			userSecurityColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(userSecurityType, userSecurityMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userSecurityType, userSecurityMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_security\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_security\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_security")
	}

	if !cached {
		userSecurityInsertCacheMut.Lock()
		userSecurityInsertCache[key] = cache
		userSecurityInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single UserSecurity record. See Update for
// whitelist behavior description.
func (o *UserSecurity) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single UserSecurity record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *UserSecurity) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the UserSecurity, and panics on error.
// See Update for whitelist behavior description.
func (o *UserSecurity) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the UserSecurity.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *UserSecurity) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	userSecurityUpdateCacheMut.RLock()
	cache, cached := userSecurityUpdateCache[key]
	userSecurityUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			userSecurityColumns,
			userSecurityPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update user_security, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_security\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userSecurityPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userSecurityType, userSecurityMapping, append(wl, userSecurityPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update user_security row")
	}

	if !cached {
		userSecurityUpdateCacheMut.Lock()
		userSecurityUpdateCache[key] = cache
		userSecurityUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q userSecurityQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q userSecurityQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for user_security")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UserSecuritySlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o UserSecuritySlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o UserSecuritySlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserSecuritySlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userSecurityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_security\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userSecurityPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in userSecurity slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UserSecurity) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *UserSecurity) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *UserSecurity) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *UserSecurity) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no user_security provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userSecurityColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userSecurityUpsertCacheMut.RLock()
	cache, cached := userSecurityUpsertCache[key]
	userSecurityUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			userSecurityColumns,
			userSecurityColumnsWithDefault,
			userSecurityColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			userSecurityColumns,
			userSecurityPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert user_security, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userSecurityPrimaryKeyColumns))
			copy(conflict, userSecurityPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"user_security\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userSecurityType, userSecurityMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userSecurityType, userSecurityMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_security")
	}

	if !cached {
		userSecurityUpsertCacheMut.Lock()
		userSecurityUpsertCache[key] = cache
		userSecurityUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single UserSecurity record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UserSecurity) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single UserSecurity record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UserSecurity) DeleteG() error {
	if o == nil {
		return errors.New("models: no UserSecurity provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single UserSecurity record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UserSecurity) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single UserSecurity record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserSecurity) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no UserSecurity provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userSecurityPrimaryKeyMapping)
	sql := "DELETE FROM \"user_security\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from user_security")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q userSecurityQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q userSecurityQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no userSecurityQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from user_security")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o UserSecuritySlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o UserSecuritySlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no UserSecurity slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o UserSecuritySlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserSecuritySlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no UserSecurity slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(userSecurityBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userSecurityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_security\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userSecurityPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from userSecurity slice")
	}

	if len(userSecurityAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *UserSecurity) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *UserSecurity) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UserSecurity) ReloadG() error {
	if o == nil {
		return errors.New("models: no UserSecurity provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserSecurity) Reload(exec boil.Executor) error {
	ret, err := FindUserSecurity(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UserSecuritySlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UserSecuritySlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserSecuritySlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty UserSecuritySlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserSecuritySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	userSecurities := UserSecuritySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userSecurityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_security\".* FROM \"user_security\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userSecurityPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&userSecurities)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserSecuritySlice")
	}

	*o = userSecurities

	return nil
}

// UserSecurityExists checks if the UserSecurity row exists.
func UserSecurityExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_security\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_security exists")
	}

	return exists, nil
}

// UserSecurityExistsG checks if the UserSecurity row exists.
func UserSecurityExistsG(id int) (bool, error) {
	return UserSecurityExists(boil.GetDB(), id)
}

// UserSecurityExistsGP checks if the UserSecurity row exists. Panics on error.
func UserSecurityExistsGP(id int) bool {
	e, err := UserSecurityExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// UserSecurityExistsP checks if the UserSecurity row exists. Panics on error.
func UserSecurityExistsP(exec boil.Executor, id int) bool {
	e, err := UserSecurityExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
