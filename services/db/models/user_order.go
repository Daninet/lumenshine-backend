// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// UserOrder is an object representing the database table.
type UserOrder struct {
	ID                   int           `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID               int           `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	OrderPhaseID         string        `boil:"order_phase_id" json:"order_phase_id" toml:"order_phase_id" yaml:"order_phase_id"`
	OrderStatus          string        `boil:"order_status" json:"order_status" toml:"order_status" yaml:"order_status"`
	CoinAmount           int64         `boil:"coin_amount" json:"coin_amount" toml:"coin_amount" yaml:"coin_amount"`
	ChainAmount          types.Decimal `boil:"chain_amount" json:"chain_amount" toml:"chain_amount" yaml:"chain_amount"`
	ChainAmountDenom     string        `boil:"chain_amount_denom" json:"chain_amount_denom" toml:"chain_amount_denom" yaml:"chain_amount_denom"`
	Chain                string        `boil:"chain" json:"chain" toml:"chain" yaml:"chain"`
	AddressIndex         int64         `boil:"address_index" json:"address_index" toml:"address_index" yaml:"address_index"`
	ChainAddress         string        `boil:"chain_address" json:"chain_address" toml:"chain_address" yaml:"chain_address"`
	ChainAddressSeed     string        `boil:"chain_address_seed" json:"chain_address_seed" toml:"chain_address_seed" yaml:"chain_address_seed"`
	UserStellarPublicKey string        `boil:"user_stellar_public_key" json:"user_stellar_public_key" toml:"user_stellar_public_key" yaml:"user_stellar_public_key"`
	PaymentErrorMessage  string        `boil:"payment_error_message" json:"payment_error_message" toml:"payment_error_message" yaml:"payment_error_message"`
	PaymentTX            string        `boil:"payment_tx" json:"payment_tx" toml:"payment_tx" yaml:"payment_tx"`
	CreatedAt            time.Time     `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt            time.Time     `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UpdatedBy            string        `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`

	R *userOrderR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userOrderL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserOrderColumns = struct {
	ID                   string
	UserID               string
	OrderPhaseID         string
	OrderStatus          string
	CoinAmount           string
	ChainAmount          string
	ChainAmountDenom     string
	Chain                string
	AddressIndex         string
	ChainAddress         string
	ChainAddressSeed     string
	UserStellarPublicKey string
	PaymentErrorMessage  string
	PaymentTX            string
	CreatedAt            string
	UpdatedAt            string
	UpdatedBy            string
}{
	ID:                   "id",
	UserID:               "user_id",
	OrderPhaseID:         "order_phase_id",
	OrderStatus:          "order_status",
	CoinAmount:           "coin_amount",
	ChainAmount:          "chain_amount",
	ChainAmountDenom:     "chain_amount_denom",
	Chain:                "chain",
	AddressIndex:         "address_index",
	ChainAddress:         "chain_address",
	ChainAddressSeed:     "chain_address_seed",
	UserStellarPublicKey: "user_stellar_public_key",
	PaymentErrorMessage:  "payment_error_message",
	PaymentTX:            "payment_tx",
	CreatedAt:            "created_at",
	UpdatedAt:            "updated_at",
	UpdatedBy:            "updated_by",
}

// UserOrderRels is where relationship names are stored.
var UserOrderRels = struct {
	User                 string
	OrderPhase           string
	MultipleTransaction  string
	ProcessedTransaction string
}{
	User:                 "User",
	OrderPhase:           "OrderPhase",
	MultipleTransaction:  "MultipleTransaction",
	ProcessedTransaction: "ProcessedTransaction",
}

// userOrderR is where relationships are stored.
type userOrderR struct {
	User                 *UserProfile
	OrderPhase           *IcoPhase
	MultipleTransaction  *MultipleTransaction
	ProcessedTransaction *ProcessedTransaction
}

// NewStruct creates a new relationship struct
func (*userOrderR) NewStruct() *userOrderR {
	return &userOrderR{}
}

// userOrderL is where Load methods for each relationship are stored.
type userOrderL struct{}

var (
	userOrderColumns               = []string{"id", "user_id", "order_phase_id", "order_status", "coin_amount", "chain_amount", "chain_amount_denom", "chain", "address_index", "chain_address", "chain_address_seed", "user_stellar_public_key", "payment_error_message", "payment_tx", "created_at", "updated_at", "updated_by"}
	userOrderColumnsWithoutDefault = []string{"user_id", "order_phase_id", "order_status", "coin_amount", "chain_amount", "chain_amount_denom", "chain", "address_index", "chain_address", "chain_address_seed", "user_stellar_public_key", "payment_error_message", "payment_tx", "updated_by"}
	userOrderColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	userOrderPrimaryKeyColumns     = []string{"id"}
)

type (
	// UserOrderSlice is an alias for a slice of pointers to UserOrder.
	// This should generally be used opposed to []UserOrder.
	UserOrderSlice []*UserOrder
	// UserOrderHook is the signature for custom UserOrder hook methods
	UserOrderHook func(boil.Executor, *UserOrder) error

	userOrderQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userOrderType                 = reflect.TypeOf(&UserOrder{})
	userOrderMapping              = queries.MakeStructMapping(userOrderType)
	userOrderPrimaryKeyMapping, _ = queries.BindMapping(userOrderType, userOrderMapping, userOrderPrimaryKeyColumns)
	userOrderInsertCacheMut       sync.RWMutex
	userOrderInsertCache          = make(map[string]insertCache)
	userOrderUpdateCacheMut       sync.RWMutex
	userOrderUpdateCache          = make(map[string]updateCache)
	userOrderUpsertCacheMut       sync.RWMutex
	userOrderUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var userOrderBeforeInsertHooks []UserOrderHook
var userOrderBeforeUpdateHooks []UserOrderHook
var userOrderBeforeDeleteHooks []UserOrderHook
var userOrderBeforeUpsertHooks []UserOrderHook

var userOrderAfterInsertHooks []UserOrderHook
var userOrderAfterSelectHooks []UserOrderHook
var userOrderAfterUpdateHooks []UserOrderHook
var userOrderAfterDeleteHooks []UserOrderHook
var userOrderAfterUpsertHooks []UserOrderHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserOrder) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userOrderBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserOrder) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userOrderBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserOrder) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userOrderBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserOrder) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userOrderBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserOrder) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userOrderAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserOrder) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range userOrderAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserOrder) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userOrderAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserOrder) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userOrderAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserOrder) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userOrderAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserOrderHook registers your hook function for all future operations.
func AddUserOrderHook(hookPoint boil.HookPoint, userOrderHook UserOrderHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userOrderBeforeInsertHooks = append(userOrderBeforeInsertHooks, userOrderHook)
	case boil.BeforeUpdateHook:
		userOrderBeforeUpdateHooks = append(userOrderBeforeUpdateHooks, userOrderHook)
	case boil.BeforeDeleteHook:
		userOrderBeforeDeleteHooks = append(userOrderBeforeDeleteHooks, userOrderHook)
	case boil.BeforeUpsertHook:
		userOrderBeforeUpsertHooks = append(userOrderBeforeUpsertHooks, userOrderHook)
	case boil.AfterInsertHook:
		userOrderAfterInsertHooks = append(userOrderAfterInsertHooks, userOrderHook)
	case boil.AfterSelectHook:
		userOrderAfterSelectHooks = append(userOrderAfterSelectHooks, userOrderHook)
	case boil.AfterUpdateHook:
		userOrderAfterUpdateHooks = append(userOrderAfterUpdateHooks, userOrderHook)
	case boil.AfterDeleteHook:
		userOrderAfterDeleteHooks = append(userOrderAfterDeleteHooks, userOrderHook)
	case boil.AfterUpsertHook:
		userOrderAfterUpsertHooks = append(userOrderAfterUpsertHooks, userOrderHook)
	}
}

// OneG returns a single userOrder record from the query using the global executor.
func (q userOrderQuery) OneG() (*UserOrder, error) {
	return q.One(boil.GetDB())
}

// One returns a single userOrder record from the query.
func (q userOrderQuery) One(exec boil.Executor) (*UserOrder, error) {
	o := &UserOrder{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_order")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all UserOrder records from the query using the global executor.
func (q userOrderQuery) AllG() (UserOrderSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all UserOrder records from the query.
func (q userOrderQuery) All(exec boil.Executor) (UserOrderSlice, error) {
	var o []*UserOrder

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserOrder slice")
	}

	if len(userOrderAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all UserOrder records in the query, and panics on error.
func (q userOrderQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all UserOrder records in the query.
func (q userOrderQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_order rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q userOrderQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q userOrderQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_order exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *UserOrder) User(mods ...qm.QueryMod) userProfileQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := UserProfiles(queryMods...)
	queries.SetFrom(query.Query, "\"user_profile\"")

	return query
}

// OrderPhase pointed to by the foreign key.
func (o *UserOrder) OrderPhase(mods ...qm.QueryMod) icoPhaseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("phase_name=?", o.OrderPhaseID),
	}

	queryMods = append(queryMods, mods...)

	query := IcoPhases(queryMods...)
	queries.SetFrom(query.Query, "\"ico_phase\"")

	return query
}

// MultipleTransaction pointed to by the foreign key.
func (o *UserOrder) MultipleTransaction(mods ...qm.QueryMod) multipleTransactionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("user_order_id=?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := MultipleTransactions(queryMods...)
	queries.SetFrom(query.Query, "\"multiple_transaction\"")

	return query
}

// ProcessedTransaction pointed to by the foreign key.
func (o *UserOrder) ProcessedTransaction(mods ...qm.QueryMod) processedTransactionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("user_order_id=?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := ProcessedTransactions(queryMods...)
	queries.SetFrom(query.Query, "\"processed_transaction\"")

	return query
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userOrderL) LoadUser(e boil.Executor, singular bool, maybeUserOrder interface{}, mods queries.Applicator) error {
	var slice []*UserOrder
	var object *UserOrder

	if singular {
		object = maybeUserOrder.(*UserOrder)
	} else {
		slice = *maybeUserOrder.(*[]*UserOrder)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userOrderR{}
		}
		args = append(args, object.UserID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userOrderR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)
		}
	}

	query := NewQuery(qm.From(`user_profile`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserProfile")
	}

	var resultSlice []*UserProfile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserProfile")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_profile")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_profile")
	}

	if len(userOrderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userProfileR{}
		}
		foreign.R.UserUserOrders = append(foreign.R.UserUserOrders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userProfileR{}
				}
				foreign.R.UserUserOrders = append(foreign.R.UserUserOrders, local)
				break
			}
		}
	}

	return nil
}

// LoadOrderPhase allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userOrderL) LoadOrderPhase(e boil.Executor, singular bool, maybeUserOrder interface{}, mods queries.Applicator) error {
	var slice []*UserOrder
	var object *UserOrder

	if singular {
		object = maybeUserOrder.(*UserOrder)
	} else {
		slice = *maybeUserOrder.(*[]*UserOrder)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userOrderR{}
		}
		args = append(args, object.OrderPhaseID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userOrderR{}
			}

			for _, a := range args {
				if a == obj.OrderPhaseID {
					continue Outer
				}
			}

			args = append(args, obj.OrderPhaseID)
		}
	}

	query := NewQuery(qm.From(`ico_phase`), qm.WhereIn(`phase_name in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load IcoPhase")
	}

	var resultSlice []*IcoPhase
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice IcoPhase")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for ico_phase")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ico_phase")
	}

	if len(userOrderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrderPhase = foreign
		if foreign.R == nil {
			foreign.R = &icoPhaseR{}
		}
		foreign.R.OrderPhaseUserOrders = append(foreign.R.OrderPhaseUserOrders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrderPhaseID == foreign.PhaseName {
				local.R.OrderPhase = foreign
				if foreign.R == nil {
					foreign.R = &icoPhaseR{}
				}
				foreign.R.OrderPhaseUserOrders = append(foreign.R.OrderPhaseUserOrders, local)
				break
			}
		}
	}

	return nil
}

// LoadMultipleTransaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (userOrderL) LoadMultipleTransaction(e boil.Executor, singular bool, maybeUserOrder interface{}, mods queries.Applicator) error {
	var slice []*UserOrder
	var object *UserOrder

	if singular {
		object = maybeUserOrder.(*UserOrder)
	} else {
		slice = *maybeUserOrder.(*[]*UserOrder)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userOrderR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userOrderR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`multiple_transaction`), qm.WhereIn(`user_order_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MultipleTransaction")
	}

	var resultSlice []*MultipleTransaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MultipleTransaction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for multiple_transaction")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for multiple_transaction")
	}

	if len(userOrderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MultipleTransaction = foreign
		if foreign.R == nil {
			foreign.R = &multipleTransactionR{}
		}
		foreign.R.UserOrder = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.UserOrderID {
				local.R.MultipleTransaction = foreign
				if foreign.R == nil {
					foreign.R = &multipleTransactionR{}
				}
				foreign.R.UserOrder = local
				break
			}
		}
	}

	return nil
}

// LoadProcessedTransaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (userOrderL) LoadProcessedTransaction(e boil.Executor, singular bool, maybeUserOrder interface{}, mods queries.Applicator) error {
	var slice []*UserOrder
	var object *UserOrder

	if singular {
		object = maybeUserOrder.(*UserOrder)
	} else {
		slice = *maybeUserOrder.(*[]*UserOrder)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userOrderR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userOrderR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`processed_transaction`), qm.WhereIn(`user_order_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProcessedTransaction")
	}

	var resultSlice []*ProcessedTransaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProcessedTransaction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for processed_transaction")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for processed_transaction")
	}

	if len(userOrderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProcessedTransaction = foreign
		if foreign.R == nil {
			foreign.R = &processedTransactionR{}
		}
		foreign.R.UserOrder = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.UserOrderID {
				local.R.ProcessedTransaction = foreign
				if foreign.R == nil {
					foreign.R = &processedTransactionR{}
				}
				foreign.R.UserOrder = local
				break
			}
		}
	}

	return nil
}

// SetUserG of the userOrder to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserUserOrders.
// Uses the global database handle.
func (o *UserOrder) SetUserG(insert bool, related *UserProfile) error {
	return o.SetUser(boil.GetDB(), insert, related)
}

// SetUser of the userOrder to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserUserOrders.
func (o *UserOrder) SetUser(exec boil.Executor, insert bool, related *UserProfile) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_order\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userOrderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userOrderR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userProfileR{
			UserUserOrders: UserOrderSlice{o},
		}
	} else {
		related.R.UserUserOrders = append(related.R.UserUserOrders, o)
	}

	return nil
}

// SetOrderPhaseG of the userOrder to the related item.
// Sets o.R.OrderPhase to related.
// Adds o to related.R.OrderPhaseUserOrders.
// Uses the global database handle.
func (o *UserOrder) SetOrderPhaseG(insert bool, related *IcoPhase) error {
	return o.SetOrderPhase(boil.GetDB(), insert, related)
}

// SetOrderPhase of the userOrder to the related item.
// Sets o.R.OrderPhase to related.
// Adds o to related.R.OrderPhaseUserOrders.
func (o *UserOrder) SetOrderPhase(exec boil.Executor, insert bool, related *IcoPhase) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_order\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"order_phase_id"}),
		strmangle.WhereClause("\"", "\"", 2, userOrderPrimaryKeyColumns),
	)
	values := []interface{}{related.PhaseName, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrderPhaseID = related.PhaseName
	if o.R == nil {
		o.R = &userOrderR{
			OrderPhase: related,
		}
	} else {
		o.R.OrderPhase = related
	}

	if related.R == nil {
		related.R = &icoPhaseR{
			OrderPhaseUserOrders: UserOrderSlice{o},
		}
	} else {
		related.R.OrderPhaseUserOrders = append(related.R.OrderPhaseUserOrders, o)
	}

	return nil
}

// SetMultipleTransactionG of the userOrder to the related item.
// Sets o.R.MultipleTransaction to related.
// Adds o to related.R.UserOrder.
// Uses the global database handle.
func (o *UserOrder) SetMultipleTransactionG(insert bool, related *MultipleTransaction) error {
	return o.SetMultipleTransaction(boil.GetDB(), insert, related)
}

// SetMultipleTransaction of the userOrder to the related item.
// Sets o.R.MultipleTransaction to related.
// Adds o to related.R.UserOrder.
func (o *UserOrder) SetMultipleTransaction(exec boil.Executor, insert bool, related *MultipleTransaction) error {
	var err error

	if insert {
		related.UserOrderID = o.ID

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"multiple_transaction\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"user_order_id"}),
			strmangle.WhereClause("\"", "\"", 2, multipleTransactionPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.UserOrderID = o.ID

	}

	if o.R == nil {
		o.R = &userOrderR{
			MultipleTransaction: related,
		}
	} else {
		o.R.MultipleTransaction = related
	}

	if related.R == nil {
		related.R = &multipleTransactionR{
			UserOrder: o,
		}
	} else {
		related.R.UserOrder = o
	}
	return nil
}

// SetProcessedTransactionG of the userOrder to the related item.
// Sets o.R.ProcessedTransaction to related.
// Adds o to related.R.UserOrder.
// Uses the global database handle.
func (o *UserOrder) SetProcessedTransactionG(insert bool, related *ProcessedTransaction) error {
	return o.SetProcessedTransaction(boil.GetDB(), insert, related)
}

// SetProcessedTransaction of the userOrder to the related item.
// Sets o.R.ProcessedTransaction to related.
// Adds o to related.R.UserOrder.
func (o *UserOrder) SetProcessedTransaction(exec boil.Executor, insert bool, related *ProcessedTransaction) error {
	var err error

	if insert {
		related.UserOrderID = o.ID

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"processed_transaction\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"user_order_id"}),
			strmangle.WhereClause("\"", "\"", 2, processedTransactionPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.Chain, related.TransactionID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.UserOrderID = o.ID

	}

	if o.R == nil {
		o.R = &userOrderR{
			ProcessedTransaction: related,
		}
	} else {
		o.R.ProcessedTransaction = related
	}

	if related.R == nil {
		related.R = &processedTransactionR{
			UserOrder: o,
		}
	} else {
		related.R.UserOrder = o
	}
	return nil
}

// UserOrders retrieves all the records using an executor.
func UserOrders(mods ...qm.QueryMod) userOrderQuery {
	mods = append(mods, qm.From("\"user_order\""))
	return userOrderQuery{NewQuery(mods...)}
}

// FindUserOrderG retrieves a single record by ID.
func FindUserOrderG(iD int, selectCols ...string) (*UserOrder, error) {
	return FindUserOrder(boil.GetDB(), iD, selectCols...)
}

// FindUserOrder retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserOrder(exec boil.Executor, iD int, selectCols ...string) (*UserOrder, error) {
	userOrderObj := &UserOrder{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_order\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, userOrderObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_order")
	}

	return userOrderObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UserOrder) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserOrder) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_order provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userOrderColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userOrderInsertCacheMut.RLock()
	cache, cached := userOrderInsertCache[key]
	userOrderInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userOrderColumns,
			userOrderColumnsWithDefault,
			userOrderColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userOrderType, userOrderMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userOrderType, userOrderMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_order\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_order\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_order")
	}

	if !cached {
		userOrderInsertCacheMut.Lock()
		userOrderInsertCache[key] = cache
		userOrderInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single UserOrder record using the global executor.
// See Update for more documentation.
func (o *UserOrder) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the UserOrder.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserOrder) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userOrderUpdateCacheMut.RLock()
	cache, cached := userOrderUpdateCache[key]
	userOrderUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userOrderColumns,
			userOrderPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_order, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_order\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userOrderPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userOrderType, userOrderMapping, append(wl, userOrderPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_order row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_order")
	}

	if !cached {
		userOrderUpdateCacheMut.Lock()
		userOrderUpdateCache[key] = cache
		userOrderUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userOrderQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_order")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_order")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UserOrderSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserOrderSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userOrderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_order\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userOrderPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userOrder slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userOrder")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UserOrder) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserOrder) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_order provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userOrderColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userOrderUpsertCacheMut.RLock()
	cache, cached := userOrderUpsertCache[key]
	userOrderUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userOrderColumns,
			userOrderColumnsWithDefault,
			userOrderColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userOrderColumns,
			userOrderPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert user_order, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userOrderPrimaryKeyColumns))
			copy(conflict, userOrderPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_order\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userOrderType, userOrderMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userOrderType, userOrderMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_order")
	}

	if !cached {
		userOrderUpsertCacheMut.Lock()
		userOrderUpsertCache[key] = cache
		userOrderUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single UserOrder record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UserOrder) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single UserOrder record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserOrder) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserOrder provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userOrderPrimaryKeyMapping)
	sql := "DELETE FROM \"user_order\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_order")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_order")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userOrderQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userOrderQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_order")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_order")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o UserOrderSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserOrderSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserOrder slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(userOrderBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userOrderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_order\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userOrderPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userOrder slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_order")
	}

	if len(userOrderAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UserOrder) ReloadG() error {
	if o == nil {
		return errors.New("models: no UserOrder provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserOrder) Reload(exec boil.Executor) error {
	ret, err := FindUserOrder(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserOrderSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty UserOrderSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserOrderSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserOrderSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userOrderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_order\".* FROM \"user_order\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userOrderPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserOrderSlice")
	}

	*o = slice

	return nil
}

// UserOrderExistsG checks if the UserOrder row exists.
func UserOrderExistsG(iD int) (bool, error) {
	return UserOrderExists(boil.GetDB(), iD)
}

// UserOrderExists checks if the UserOrder row exists.
func UserOrderExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_order\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_order exists")
	}

	return exists, nil
}
