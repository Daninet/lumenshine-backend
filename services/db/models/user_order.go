// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// UserOrder is an object representing the database table.
type UserOrder struct {
	ID                   int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID               int       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	OrderPhaseID         string    `boil:"order_phase_id" json:"order_phase_id" toml:"order_phase_id" yaml:"order_phase_id"`
	OrderStatus          string    `boil:"order_status" json:"order_status" toml:"order_status" yaml:"order_status"`
	CoinAmount           int64     `boil:"coin_amount" json:"coin_amount" toml:"coin_amount" yaml:"coin_amount"`
	ChainAmount          float64   `boil:"chain_amount" json:"chain_amount" toml:"chain_amount" yaml:"chain_amount"`
	ChainAmountDenom     string    `boil:"chain_amount_denom" json:"chain_amount_denom" toml:"chain_amount_denom" yaml:"chain_amount_denom"`
	Chain                string    `boil:"chain" json:"chain" toml:"chain" yaml:"chain"`
	AddressIndex         int64     `boil:"address_index" json:"address_index" toml:"address_index" yaml:"address_index"`
	ChainAddress         string    `boil:"chain_address" json:"chain_address" toml:"chain_address" yaml:"chain_address"`
	ChainAddressSeed     string    `boil:"chain_address_seed" json:"chain_address_seed" toml:"chain_address_seed" yaml:"chain_address_seed"`
	UserStellarPublicKey string    `boil:"user_stellar_public_key" json:"user_stellar_public_key" toml:"user_stellar_public_key" yaml:"user_stellar_public_key"`
	PaymentErrorMessage  string    `boil:"payment_error_message" json:"payment_error_message" toml:"payment_error_message" yaml:"payment_error_message"`
	PaymentTX            string    `boil:"payment_tx" json:"payment_tx" toml:"payment_tx" yaml:"payment_tx"`
	CreatedAt            time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt            time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UpdatedBy            string    `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`

	R *userOrderR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userOrderL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserOrderColumns = struct {
	ID                   string
	UserID               string
	OrderPhaseID         string
	OrderStatus          string
	CoinAmount           string
	ChainAmount          string
	ChainAmountDenom     string
	Chain                string
	AddressIndex         string
	ChainAddress         string
	ChainAddressSeed     string
	UserStellarPublicKey string
	PaymentErrorMessage  string
	PaymentTX            string
	CreatedAt            string
	UpdatedAt            string
	UpdatedBy            string
}{
	ID:                   "id",
	UserID:               "user_id",
	OrderPhaseID:         "order_phase_id",
	OrderStatus:          "order_status",
	CoinAmount:           "coin_amount",
	ChainAmount:          "chain_amount",
	ChainAmountDenom:     "chain_amount_denom",
	Chain:                "chain",
	AddressIndex:         "address_index",
	ChainAddress:         "chain_address",
	ChainAddressSeed:     "chain_address_seed",
	UserStellarPublicKey: "user_stellar_public_key",
	PaymentErrorMessage:  "payment_error_message",
	PaymentTX:            "payment_tx",
	CreatedAt:            "created_at",
	UpdatedAt:            "updated_at",
	UpdatedBy:            "updated_by",
}

// userOrderR is where relationships are stored.
type userOrderR struct {
	User                 *UserProfile
	OrderPhase           *IcoPhase
	MultipleTransaction  *MultipleTransaction
	ProcessedTransaction *ProcessedTransaction
}

// userOrderL is where Load methods for each relationship are stored.
type userOrderL struct{}

var (
	userOrderColumns               = []string{"id", "user_id", "order_phase_id", "order_status", "coin_amount", "chain_amount", "chain_amount_denom", "chain", "address_index", "chain_address", "chain_address_seed", "user_stellar_public_key", "payment_error_message", "payment_tx", "created_at", "updated_at", "updated_by"}
	userOrderColumnsWithoutDefault = []string{"user_id", "order_phase_id", "order_status", "coin_amount", "chain_amount", "chain_amount_denom", "chain", "address_index", "chain_address", "chain_address_seed", "user_stellar_public_key", "payment_error_message", "payment_tx", "updated_by"}
	userOrderColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	userOrderPrimaryKeyColumns     = []string{"id"}
)

type (
	// UserOrderSlice is an alias for a slice of pointers to UserOrder.
	// This should generally be used opposed to []UserOrder.
	UserOrderSlice []*UserOrder
	// UserOrderHook is the signature for custom UserOrder hook methods
	UserOrderHook func(boil.Executor, *UserOrder) error

	userOrderQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userOrderType                 = reflect.TypeOf(&UserOrder{})
	userOrderMapping              = queries.MakeStructMapping(userOrderType)
	userOrderPrimaryKeyMapping, _ = queries.BindMapping(userOrderType, userOrderMapping, userOrderPrimaryKeyColumns)
	userOrderInsertCacheMut       sync.RWMutex
	userOrderInsertCache          = make(map[string]insertCache)
	userOrderUpdateCacheMut       sync.RWMutex
	userOrderUpdateCache          = make(map[string]updateCache)
	userOrderUpsertCacheMut       sync.RWMutex
	userOrderUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var userOrderBeforeInsertHooks []UserOrderHook
var userOrderBeforeUpdateHooks []UserOrderHook
var userOrderBeforeDeleteHooks []UserOrderHook
var userOrderBeforeUpsertHooks []UserOrderHook

var userOrderAfterInsertHooks []UserOrderHook
var userOrderAfterSelectHooks []UserOrderHook
var userOrderAfterUpdateHooks []UserOrderHook
var userOrderAfterDeleteHooks []UserOrderHook
var userOrderAfterUpsertHooks []UserOrderHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserOrder) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userOrderBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserOrder) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userOrderBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserOrder) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userOrderBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserOrder) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userOrderBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserOrder) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userOrderAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserOrder) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range userOrderAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserOrder) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userOrderAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserOrder) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userOrderAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserOrder) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userOrderAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserOrderHook registers your hook function for all future operations.
func AddUserOrderHook(hookPoint boil.HookPoint, userOrderHook UserOrderHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userOrderBeforeInsertHooks = append(userOrderBeforeInsertHooks, userOrderHook)
	case boil.BeforeUpdateHook:
		userOrderBeforeUpdateHooks = append(userOrderBeforeUpdateHooks, userOrderHook)
	case boil.BeforeDeleteHook:
		userOrderBeforeDeleteHooks = append(userOrderBeforeDeleteHooks, userOrderHook)
	case boil.BeforeUpsertHook:
		userOrderBeforeUpsertHooks = append(userOrderBeforeUpsertHooks, userOrderHook)
	case boil.AfterInsertHook:
		userOrderAfterInsertHooks = append(userOrderAfterInsertHooks, userOrderHook)
	case boil.AfterSelectHook:
		userOrderAfterSelectHooks = append(userOrderAfterSelectHooks, userOrderHook)
	case boil.AfterUpdateHook:
		userOrderAfterUpdateHooks = append(userOrderAfterUpdateHooks, userOrderHook)
	case boil.AfterDeleteHook:
		userOrderAfterDeleteHooks = append(userOrderAfterDeleteHooks, userOrderHook)
	case boil.AfterUpsertHook:
		userOrderAfterUpsertHooks = append(userOrderAfterUpsertHooks, userOrderHook)
	}
}

// OneP returns a single userOrder record from the query, and panics on error.
func (q userOrderQuery) OneP() *UserOrder {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single userOrder record from the query.
func (q userOrderQuery) One() (*UserOrder, error) {
	o := &UserOrder{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_order")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all UserOrder records from the query, and panics on error.
func (q userOrderQuery) AllP() UserOrderSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all UserOrder records from the query.
func (q userOrderQuery) All() (UserOrderSlice, error) {
	var o []*UserOrder

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserOrder slice")
	}

	if len(userOrderAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all UserOrder records in the query, and panics on error.
func (q userOrderQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all UserOrder records in the query.
func (q userOrderQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_order rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q userOrderQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q userOrderQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_order exists")
	}

	return count > 0, nil
}

// UserG pointed to by the foreign key.
func (o *UserOrder) UserG(mods ...qm.QueryMod) userProfileQuery {
	return o.User(boil.GetDB(), mods...)
}

// User pointed to by the foreign key.
func (o *UserOrder) User(exec boil.Executor, mods ...qm.QueryMod) userProfileQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := UserProfiles(exec, queryMods...)
	queries.SetFrom(query.Query, "\"user_profile\"")

	return query
}

// OrderPhaseG pointed to by the foreign key.
func (o *UserOrder) OrderPhaseG(mods ...qm.QueryMod) icoPhaseQuery {
	return o.OrderPhase(boil.GetDB(), mods...)
}

// OrderPhase pointed to by the foreign key.
func (o *UserOrder) OrderPhase(exec boil.Executor, mods ...qm.QueryMod) icoPhaseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("phase_name=?", o.OrderPhaseID),
	}

	queryMods = append(queryMods, mods...)

	query := IcoPhases(exec, queryMods...)
	queries.SetFrom(query.Query, "\"ico_phase\"")

	return query
}

// MultipleTransactionG pointed to by the foreign key.
func (o *UserOrder) MultipleTransactionG(mods ...qm.QueryMod) multipleTransactionQuery {
	return o.MultipleTransaction(boil.GetDB(), mods...)
}

// MultipleTransaction pointed to by the foreign key.
func (o *UserOrder) MultipleTransaction(exec boil.Executor, mods ...qm.QueryMod) multipleTransactionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("user_order_id=?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := MultipleTransactions(exec, queryMods...)
	queries.SetFrom(query.Query, "\"multiple_transaction\"")

	return query
}

// ProcessedTransactionG pointed to by the foreign key.
func (o *UserOrder) ProcessedTransactionG(mods ...qm.QueryMod) processedTransactionQuery {
	return o.ProcessedTransaction(boil.GetDB(), mods...)
}

// ProcessedTransaction pointed to by the foreign key.
func (o *UserOrder) ProcessedTransaction(exec boil.Executor, mods ...qm.QueryMod) processedTransactionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("user_order_id=?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := ProcessedTransactions(exec, queryMods...)
	queries.SetFrom(query.Query, "\"processed_transaction\"")

	return query
} // LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (userOrderL) LoadUser(e boil.Executor, singular bool, maybeUserOrder interface{}) error {
	var slice []*UserOrder
	var object *UserOrder

	count := 1
	if singular {
		object = maybeUserOrder.(*UserOrder)
	} else {
		slice = *maybeUserOrder.(*[]*UserOrder)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &userOrderR{}
		}
		args[0] = object.UserID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &userOrderR{}
			}
			args[i] = obj.UserID
		}
	}

	query := fmt.Sprintf(
		"select * from \"user_profile\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserProfile")
	}
	defer results.Close()

	var resultSlice []*UserProfile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserProfile")
	}

	if len(userOrderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.User = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				break
			}
		}
	}

	return nil
}

// LoadOrderPhase allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (userOrderL) LoadOrderPhase(e boil.Executor, singular bool, maybeUserOrder interface{}) error {
	var slice []*UserOrder
	var object *UserOrder

	count := 1
	if singular {
		object = maybeUserOrder.(*UserOrder)
	} else {
		slice = *maybeUserOrder.(*[]*UserOrder)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &userOrderR{}
		}
		args[0] = object.OrderPhaseID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &userOrderR{}
			}
			args[i] = obj.OrderPhaseID
		}
	}

	query := fmt.Sprintf(
		"select * from \"ico_phase\" where \"phase_name\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load IcoPhase")
	}
	defer results.Close()

	var resultSlice []*IcoPhase
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice IcoPhase")
	}

	if len(userOrderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.OrderPhase = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrderPhaseID == foreign.PhaseName {
				local.R.OrderPhase = foreign
				break
			}
		}
	}

	return nil
}

// LoadMultipleTransaction allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (userOrderL) LoadMultipleTransaction(e boil.Executor, singular bool, maybeUserOrder interface{}) error {
	var slice []*UserOrder
	var object *UserOrder

	count := 1
	if singular {
		object = maybeUserOrder.(*UserOrder)
	} else {
		slice = *maybeUserOrder.(*[]*UserOrder)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &userOrderR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &userOrderR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"multiple_transaction\" where \"user_order_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MultipleTransaction")
	}
	defer results.Close()

	var resultSlice []*MultipleTransaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MultipleTransaction")
	}

	if len(userOrderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.MultipleTransaction = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.UserOrderID {
				local.R.MultipleTransaction = foreign
				break
			}
		}
	}

	return nil
}

// LoadProcessedTransaction allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (userOrderL) LoadProcessedTransaction(e boil.Executor, singular bool, maybeUserOrder interface{}) error {
	var slice []*UserOrder
	var object *UserOrder

	count := 1
	if singular {
		object = maybeUserOrder.(*UserOrder)
	} else {
		slice = *maybeUserOrder.(*[]*UserOrder)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &userOrderR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &userOrderR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"processed_transaction\" where \"user_order_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProcessedTransaction")
	}
	defer results.Close()

	var resultSlice []*ProcessedTransaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProcessedTransaction")
	}

	if len(userOrderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.ProcessedTransaction = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.UserOrderID {
				local.R.ProcessedTransaction = foreign
				break
			}
		}
	}

	return nil
}

// SetUserG of the user_order to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserUserOrders.
// Uses the global database handle.
func (o *UserOrder) SetUserG(insert bool, related *UserProfile) error {
	return o.SetUser(boil.GetDB(), insert, related)
}

// SetUserP of the user_order to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserUserOrders.
// Panics on error.
func (o *UserOrder) SetUserP(exec boil.Executor, insert bool, related *UserProfile) {
	if err := o.SetUser(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUserGP of the user_order to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserUserOrders.
// Uses the global database handle and panics on error.
func (o *UserOrder) SetUserGP(insert bool, related *UserProfile) {
	if err := o.SetUser(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUser of the user_order to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserUserOrders.
func (o *UserOrder) SetUser(exec boil.Executor, insert bool, related *UserProfile) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_order\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userOrderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID

	if o.R == nil {
		o.R = &userOrderR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userProfileR{
			UserUserOrders: UserOrderSlice{o},
		}
	} else {
		related.R.UserUserOrders = append(related.R.UserUserOrders, o)
	}

	return nil
}

// SetOrderPhaseG of the user_order to the related item.
// Sets o.R.OrderPhase to related.
// Adds o to related.R.OrderPhaseUserOrders.
// Uses the global database handle.
func (o *UserOrder) SetOrderPhaseG(insert bool, related *IcoPhase) error {
	return o.SetOrderPhase(boil.GetDB(), insert, related)
}

// SetOrderPhaseP of the user_order to the related item.
// Sets o.R.OrderPhase to related.
// Adds o to related.R.OrderPhaseUserOrders.
// Panics on error.
func (o *UserOrder) SetOrderPhaseP(exec boil.Executor, insert bool, related *IcoPhase) {
	if err := o.SetOrderPhase(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOrderPhaseGP of the user_order to the related item.
// Sets o.R.OrderPhase to related.
// Adds o to related.R.OrderPhaseUserOrders.
// Uses the global database handle and panics on error.
func (o *UserOrder) SetOrderPhaseGP(insert bool, related *IcoPhase) {
	if err := o.SetOrderPhase(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOrderPhase of the user_order to the related item.
// Sets o.R.OrderPhase to related.
// Adds o to related.R.OrderPhaseUserOrders.
func (o *UserOrder) SetOrderPhase(exec boil.Executor, insert bool, related *IcoPhase) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_order\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"order_phase_id"}),
		strmangle.WhereClause("\"", "\"", 2, userOrderPrimaryKeyColumns),
	)
	values := []interface{}{related.PhaseName, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrderPhaseID = related.PhaseName

	if o.R == nil {
		o.R = &userOrderR{
			OrderPhase: related,
		}
	} else {
		o.R.OrderPhase = related
	}

	if related.R == nil {
		related.R = &icoPhaseR{
			OrderPhaseUserOrders: UserOrderSlice{o},
		}
	} else {
		related.R.OrderPhaseUserOrders = append(related.R.OrderPhaseUserOrders, o)
	}

	return nil
}

// SetMultipleTransactionG of the user_order to the related item.
// Sets o.R.MultipleTransaction to related.
// Adds o to related.R.UserOrder.
// Uses the global database handle.
func (o *UserOrder) SetMultipleTransactionG(insert bool, related *MultipleTransaction) error {
	return o.SetMultipleTransaction(boil.GetDB(), insert, related)
}

// SetMultipleTransactionP of the user_order to the related item.
// Sets o.R.MultipleTransaction to related.
// Adds o to related.R.UserOrder.
// Panics on error.
func (o *UserOrder) SetMultipleTransactionP(exec boil.Executor, insert bool, related *MultipleTransaction) {
	if err := o.SetMultipleTransaction(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetMultipleTransactionGP of the user_order to the related item.
// Sets o.R.MultipleTransaction to related.
// Adds o to related.R.UserOrder.
// Uses the global database handle and panics on error.
func (o *UserOrder) SetMultipleTransactionGP(insert bool, related *MultipleTransaction) {
	if err := o.SetMultipleTransaction(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetMultipleTransaction of the user_order to the related item.
// Sets o.R.MultipleTransaction to related.
// Adds o to related.R.UserOrder.
func (o *UserOrder) SetMultipleTransaction(exec boil.Executor, insert bool, related *MultipleTransaction) error {
	var err error

	if insert {
		related.UserOrderID = o.ID

		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"multiple_transaction\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"user_order_id"}),
			strmangle.WhereClause("\"", "\"", 2, multipleTransactionPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.UserOrderID = o.ID

	}

	if o.R == nil {
		o.R = &userOrderR{
			MultipleTransaction: related,
		}
	} else {
		o.R.MultipleTransaction = related
	}

	if related.R == nil {
		related.R = &multipleTransactionR{
			UserOrder: o,
		}
	} else {
		related.R.UserOrder = o
	}
	return nil
}

// SetProcessedTransactionG of the user_order to the related item.
// Sets o.R.ProcessedTransaction to related.
// Adds o to related.R.UserOrder.
// Uses the global database handle.
func (o *UserOrder) SetProcessedTransactionG(insert bool, related *ProcessedTransaction) error {
	return o.SetProcessedTransaction(boil.GetDB(), insert, related)
}

// SetProcessedTransactionP of the user_order to the related item.
// Sets o.R.ProcessedTransaction to related.
// Adds o to related.R.UserOrder.
// Panics on error.
func (o *UserOrder) SetProcessedTransactionP(exec boil.Executor, insert bool, related *ProcessedTransaction) {
	if err := o.SetProcessedTransaction(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetProcessedTransactionGP of the user_order to the related item.
// Sets o.R.ProcessedTransaction to related.
// Adds o to related.R.UserOrder.
// Uses the global database handle and panics on error.
func (o *UserOrder) SetProcessedTransactionGP(insert bool, related *ProcessedTransaction) {
	if err := o.SetProcessedTransaction(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetProcessedTransaction of the user_order to the related item.
// Sets o.R.ProcessedTransaction to related.
// Adds o to related.R.UserOrder.
func (o *UserOrder) SetProcessedTransaction(exec boil.Executor, insert bool, related *ProcessedTransaction) error {
	var err error

	if insert {
		related.UserOrderID = o.ID

		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"processed_transaction\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"user_order_id"}),
			strmangle.WhereClause("\"", "\"", 2, processedTransactionPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.Chain, related.TransactionID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.UserOrderID = o.ID

	}

	if o.R == nil {
		o.R = &userOrderR{
			ProcessedTransaction: related,
		}
	} else {
		o.R.ProcessedTransaction = related
	}

	if related.R == nil {
		related.R = &processedTransactionR{
			UserOrder: o,
		}
	} else {
		related.R.UserOrder = o
	}
	return nil
}

// UserOrdersG retrieves all records.
func UserOrdersG(mods ...qm.QueryMod) userOrderQuery {
	return UserOrders(boil.GetDB(), mods...)
}

// UserOrders retrieves all the records using an executor.
func UserOrders(exec boil.Executor, mods ...qm.QueryMod) userOrderQuery {
	mods = append(mods, qm.From("\"user_order\""))
	return userOrderQuery{NewQuery(exec, mods...)}
}

// FindUserOrderG retrieves a single record by ID.
func FindUserOrderG(id int, selectCols ...string) (*UserOrder, error) {
	return FindUserOrder(boil.GetDB(), id, selectCols...)
}

// FindUserOrderGP retrieves a single record by ID, and panics on error.
func FindUserOrderGP(id int, selectCols ...string) *UserOrder {
	retobj, err := FindUserOrder(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindUserOrder retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserOrder(exec boil.Executor, id int, selectCols ...string) (*UserOrder, error) {
	userOrderObj := &UserOrder{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_order\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(userOrderObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_order")
	}

	return userOrderObj, nil
}

// FindUserOrderP retrieves a single record by ID with an executor, and panics on error.
func FindUserOrderP(exec boil.Executor, id int, selectCols ...string) *UserOrder {
	retobj, err := FindUserOrder(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UserOrder) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *UserOrder) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *UserOrder) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *UserOrder) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no user_order provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userOrderColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	userOrderInsertCacheMut.RLock()
	cache, cached := userOrderInsertCache[key]
	userOrderInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			userOrderColumns,
			userOrderColumnsWithDefault,
			userOrderColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(userOrderType, userOrderMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userOrderType, userOrderMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_order\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_order\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_order")
	}

	if !cached {
		userOrderInsertCacheMut.Lock()
		userOrderInsertCache[key] = cache
		userOrderInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single UserOrder record. See Update for
// whitelist behavior description.
func (o *UserOrder) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single UserOrder record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *UserOrder) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the UserOrder, and panics on error.
// See Update for whitelist behavior description.
func (o *UserOrder) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the UserOrder.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *UserOrder) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	userOrderUpdateCacheMut.RLock()
	cache, cached := userOrderUpdateCache[key]
	userOrderUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			userOrderColumns,
			userOrderPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update user_order, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_order\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userOrderPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userOrderType, userOrderMapping, append(wl, userOrderPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update user_order row")
	}

	if !cached {
		userOrderUpdateCacheMut.Lock()
		userOrderUpdateCache[key] = cache
		userOrderUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q userOrderQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q userOrderQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for user_order")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UserOrderSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o UserOrderSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o UserOrderSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserOrderSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userOrderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_order\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userOrderPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in userOrder slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UserOrder) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *UserOrder) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *UserOrder) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *UserOrder) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no user_order provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userOrderColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userOrderUpsertCacheMut.RLock()
	cache, cached := userOrderUpsertCache[key]
	userOrderUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			userOrderColumns,
			userOrderColumnsWithDefault,
			userOrderColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			userOrderColumns,
			userOrderPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert user_order, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userOrderPrimaryKeyColumns))
			copy(conflict, userOrderPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"user_order\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userOrderType, userOrderMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userOrderType, userOrderMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_order")
	}

	if !cached {
		userOrderUpsertCacheMut.Lock()
		userOrderUpsertCache[key] = cache
		userOrderUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single UserOrder record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UserOrder) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single UserOrder record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UserOrder) DeleteG() error {
	if o == nil {
		return errors.New("models: no UserOrder provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single UserOrder record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UserOrder) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single UserOrder record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserOrder) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no UserOrder provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userOrderPrimaryKeyMapping)
	sql := "DELETE FROM \"user_order\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from user_order")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q userOrderQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q userOrderQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no userOrderQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from user_order")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o UserOrderSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o UserOrderSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no UserOrder slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o UserOrderSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserOrderSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no UserOrder slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(userOrderBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userOrderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_order\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userOrderPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from userOrder slice")
	}

	if len(userOrderAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *UserOrder) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *UserOrder) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UserOrder) ReloadG() error {
	if o == nil {
		return errors.New("models: no UserOrder provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserOrder) Reload(exec boil.Executor) error {
	ret, err := FindUserOrder(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UserOrderSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UserOrderSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserOrderSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty UserOrderSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserOrderSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	userOrders := UserOrderSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userOrderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_order\".* FROM \"user_order\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userOrderPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&userOrders)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserOrderSlice")
	}

	*o = userOrders

	return nil
}

// UserOrderExists checks if the UserOrder row exists.
func UserOrderExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_order\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_order exists")
	}

	return exists, nil
}

// UserOrderExistsG checks if the UserOrder row exists.
func UserOrderExistsG(id int) (bool, error) {
	return UserOrderExists(boil.GetDB(), id)
}

// UserOrderExistsGP checks if the UserOrder row exists. Panics on error.
func UserOrderExistsGP(id int) bool {
	e, err := UserOrderExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// UserOrderExistsP checks if the UserOrder row exists. Panics on error.
func UserOrderExistsP(exec boil.Executor, id int) bool {
	e, err := UserOrderExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
