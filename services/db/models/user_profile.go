// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// UserProfile is an object representing the database table.
type UserProfile struct {
	ID                         int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Email                      string    `boil:"email" json:"email" toml:"email" yaml:"email"`
	Forename                   string    `boil:"forename" json:"forename" toml:"forename" yaml:"forename"`
	Lastname                   string    `boil:"lastname" json:"lastname" toml:"lastname" yaml:"lastname"`
	Company                    string    `boil:"company" json:"company" toml:"company" yaml:"company"`
	Salutation                 string    `boil:"salutation" json:"salutation" toml:"salutation" yaml:"salutation"`
	Title                      string    `boil:"title" json:"title" toml:"title" yaml:"title"`
	StreetAddress              string    `boil:"street_address" json:"street_address" toml:"street_address" yaml:"street_address"`
	StreetNumber               string    `boil:"street_number" json:"street_number" toml:"street_number" yaml:"street_number"`
	ZipCode                    string    `boil:"zip_code" json:"zip_code" toml:"zip_code" yaml:"zip_code"`
	City                       string    `boil:"city" json:"city" toml:"city" yaml:"city"`
	State                      string    `boil:"state" json:"state" toml:"state" yaml:"state"`
	CountryCode                string    `boil:"country_code" json:"country_code" toml:"country_code" yaml:"country_code"`
	Nationality                string    `boil:"nationality" json:"nationality" toml:"nationality" yaml:"nationality"`
	MobileNR                   string    `boil:"mobile_nr" json:"mobile_nr" toml:"mobile_nr" yaml:"mobile_nr"`
	BirthDay                   time.Time `boil:"birth_day" json:"birth_day" toml:"birth_day" yaml:"birth_day"`
	BirthPlace                 string    `boil:"birth_place" json:"birth_place" toml:"birth_place" yaml:"birth_place"`
	MailConfirmationKey        string    `boil:"mail_confirmation_key" json:"mail_confirmation_key" toml:"mail_confirmation_key" yaml:"mail_confirmation_key"`
	MailConfirmationExpiryDate time.Time `boil:"mail_confirmation_expiry_date" json:"mail_confirmation_expiry_date" toml:"mail_confirmation_expiry_date" yaml:"mail_confirmation_expiry_date"`
	TfaSecret                  string    `boil:"tfa_secret" json:"tfa_secret" toml:"tfa_secret" yaml:"tfa_secret"`
	TfaQrcode                  []byte    `boil:"tfa_qrcode" json:"tfa_qrcode" toml:"tfa_qrcode" yaml:"tfa_qrcode"`
	TfaURL                     string    `boil:"tfa_url" json:"tfa_url" toml:"tfa_url" yaml:"tfa_url"`
	MailConfirmed              bool      `boil:"mail_confirmed" json:"mail_confirmed" toml:"mail_confirmed" yaml:"mail_confirmed"`
	TfaConfirmed               bool      `boil:"tfa_confirmed" json:"tfa_confirmed" toml:"tfa_confirmed" yaml:"tfa_confirmed"`
	MnemonicConfirmed          bool      `boil:"mnemonic_confirmed" json:"mnemonic_confirmed" toml:"mnemonic_confirmed" yaml:"mnemonic_confirmed"`
	MessageCount               int       `boil:"message_count" json:"message_count" toml:"message_count" yaml:"message_count"`
	PaymentState               string    `boil:"payment_state" json:"payment_state" toml:"payment_state" yaml:"payment_state"`
	Password                   string    `boil:"password" json:"password" toml:"password" yaml:"password"`
	CreatedAt                  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt                  time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UpdatedBy                  string    `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`
	KycStatus                  string    `boil:"kyc_status" json:"kyc_status" toml:"kyc_status" yaml:"kyc_status"`

	R *userProfileR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userProfileL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserProfileColumns = struct {
	ID                         string
	Email                      string
	Forename                   string
	Lastname                   string
	Company                    string
	Salutation                 string
	Title                      string
	StreetAddress              string
	StreetNumber               string
	ZipCode                    string
	City                       string
	State                      string
	CountryCode                string
	Nationality                string
	MobileNR                   string
	BirthDay                   string
	BirthPlace                 string
	MailConfirmationKey        string
	MailConfirmationExpiryDate string
	TfaSecret                  string
	TfaQrcode                  string
	TfaURL                     string
	MailConfirmed              string
	TfaConfirmed               string
	MnemonicConfirmed          string
	MessageCount               string
	PaymentState               string
	Password                   string
	CreatedAt                  string
	UpdatedAt                  string
	UpdatedBy                  string
	KycStatus                  string
}{
	ID:                         "id",
	Email:                      "email",
	Forename:                   "forename",
	Lastname:                   "lastname",
	Company:                    "company",
	Salutation:                 "salutation",
	Title:                      "title",
	StreetAddress:              "street_address",
	StreetNumber:               "street_number",
	ZipCode:                    "zip_code",
	City:                       "city",
	State:                      "state",
	CountryCode:                "country_code",
	Nationality:                "nationality",
	MobileNR:                   "mobile_nr",
	BirthDay:                   "birth_day",
	BirthPlace:                 "birth_place",
	MailConfirmationKey:        "mail_confirmation_key",
	MailConfirmationExpiryDate: "mail_confirmation_expiry_date",
	TfaSecret:                  "tfa_secret",
	TfaQrcode:                  "tfa_qrcode",
	TfaURL:                     "tfa_url",
	MailConfirmed:              "mail_confirmed",
	TfaConfirmed:               "tfa_confirmed",
	MnemonicConfirmed:          "mnemonic_confirmed",
	MessageCount:               "message_count",
	PaymentState:               "payment_state",
	Password:                   "password",
	CreatedAt:                  "created_at",
	UpdatedAt:                  "updated_at",
	UpdatedBy:                  "updated_by",
	KycStatus:                  "kyc_status",
}

// userProfileR is where relationships are stored.
type userProfileR struct {
	UserUserSecurity         *UserSecurity
	UserNotifications        NotificationSlice
	UserNotificationArchives NotificationArchiveSlice
	UserUserMessages         UserMessageSlice
	UserUserMessageArchives  UserMessageArchiveSlice
	UserUserOrders           UserOrderSlice
	UserUserPushtokens       UserPushtokenSlice
	UserUserWallets          UserWalletSlice
}

// userProfileL is where Load methods for each relationship are stored.
type userProfileL struct{}

var (
	userProfileColumns               = []string{"id", "email", "forename", "lastname", "company", "salutation", "title", "street_address", "street_number", "zip_code", "city", "state", "country_code", "nationality", "mobile_nr", "birth_day", "birth_place", "mail_confirmation_key", "mail_confirmation_expiry_date", "tfa_secret", "tfa_qrcode", "tfa_url", "mail_confirmed", "tfa_confirmed", "mnemonic_confirmed", "message_count", "payment_state", "password", "created_at", "updated_at", "updated_by", "kyc_status"}
	userProfileColumnsWithoutDefault = []string{"email", "forename", "lastname", "company", "salutation", "title", "street_address", "street_number", "zip_code", "city", "state", "country_code", "nationality", "mobile_nr", "birth_day", "birth_place", "mail_confirmation_key", "mail_confirmation_expiry_date", "tfa_secret", "tfa_qrcode", "tfa_url", "password", "updated_by"}
	userProfileColumnsWithDefault    = []string{"id", "mail_confirmed", "tfa_confirmed", "mnemonic_confirmed", "message_count", "payment_state", "created_at", "updated_at", "kyc_status"}
	userProfilePrimaryKeyColumns     = []string{"id"}
)

type (
	// UserProfileSlice is an alias for a slice of pointers to UserProfile.
	// This should generally be used opposed to []UserProfile.
	UserProfileSlice []*UserProfile
	// UserProfileHook is the signature for custom UserProfile hook methods
	UserProfileHook func(boil.Executor, *UserProfile) error

	userProfileQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userProfileType                 = reflect.TypeOf(&UserProfile{})
	userProfileMapping              = queries.MakeStructMapping(userProfileType)
	userProfilePrimaryKeyMapping, _ = queries.BindMapping(userProfileType, userProfileMapping, userProfilePrimaryKeyColumns)
	userProfileInsertCacheMut       sync.RWMutex
	userProfileInsertCache          = make(map[string]insertCache)
	userProfileUpdateCacheMut       sync.RWMutex
	userProfileUpdateCache          = make(map[string]updateCache)
	userProfileUpsertCacheMut       sync.RWMutex
	userProfileUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var userProfileBeforeInsertHooks []UserProfileHook
var userProfileBeforeUpdateHooks []UserProfileHook
var userProfileBeforeDeleteHooks []UserProfileHook
var userProfileBeforeUpsertHooks []UserProfileHook

var userProfileAfterInsertHooks []UserProfileHook
var userProfileAfterSelectHooks []UserProfileHook
var userProfileAfterUpdateHooks []UserProfileHook
var userProfileAfterDeleteHooks []UserProfileHook
var userProfileAfterUpsertHooks []UserProfileHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserProfile) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userProfileBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserProfile) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userProfileBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserProfile) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userProfileBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserProfile) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userProfileBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserProfile) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userProfileAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserProfile) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range userProfileAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserProfile) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userProfileAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserProfile) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userProfileAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserProfile) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userProfileAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserProfileHook registers your hook function for all future operations.
func AddUserProfileHook(hookPoint boil.HookPoint, userProfileHook UserProfileHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userProfileBeforeInsertHooks = append(userProfileBeforeInsertHooks, userProfileHook)
	case boil.BeforeUpdateHook:
		userProfileBeforeUpdateHooks = append(userProfileBeforeUpdateHooks, userProfileHook)
	case boil.BeforeDeleteHook:
		userProfileBeforeDeleteHooks = append(userProfileBeforeDeleteHooks, userProfileHook)
	case boil.BeforeUpsertHook:
		userProfileBeforeUpsertHooks = append(userProfileBeforeUpsertHooks, userProfileHook)
	case boil.AfterInsertHook:
		userProfileAfterInsertHooks = append(userProfileAfterInsertHooks, userProfileHook)
	case boil.AfterSelectHook:
		userProfileAfterSelectHooks = append(userProfileAfterSelectHooks, userProfileHook)
	case boil.AfterUpdateHook:
		userProfileAfterUpdateHooks = append(userProfileAfterUpdateHooks, userProfileHook)
	case boil.AfterDeleteHook:
		userProfileAfterDeleteHooks = append(userProfileAfterDeleteHooks, userProfileHook)
	case boil.AfterUpsertHook:
		userProfileAfterUpsertHooks = append(userProfileAfterUpsertHooks, userProfileHook)
	}
}

// OneP returns a single userProfile record from the query, and panics on error.
func (q userProfileQuery) OneP() *UserProfile {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single userProfile record from the query.
func (q userProfileQuery) One() (*UserProfile, error) {
	o := &UserProfile{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_profile")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all UserProfile records from the query, and panics on error.
func (q userProfileQuery) AllP() UserProfileSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all UserProfile records from the query.
func (q userProfileQuery) All() (UserProfileSlice, error) {
	var o []*UserProfile

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserProfile slice")
	}

	if len(userProfileAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all UserProfile records in the query, and panics on error.
func (q userProfileQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all UserProfile records in the query.
func (q userProfileQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_profile rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q userProfileQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q userProfileQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_profile exists")
	}

	return count > 0, nil
}

// UserUserSecurityG pointed to by the foreign key.
func (o *UserProfile) UserUserSecurityG(mods ...qm.QueryMod) userSecurityQuery {
	return o.UserUserSecurity(boil.GetDB(), mods...)
}

// UserUserSecurity pointed to by the foreign key.
func (o *UserProfile) UserUserSecurity(exec boil.Executor, mods ...qm.QueryMod) userSecurityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("user_id=?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := UserSecurities(exec, queryMods...)
	queries.SetFrom(query.Query, "\"user_security\"")

	return query
}

// UserNotificationsG retrieves all the notification's notification via user_id column.
func (o *UserProfile) UserNotificationsG(mods ...qm.QueryMod) notificationQuery {
	return o.UserNotifications(boil.GetDB(), mods...)
}

// UserNotifications retrieves all the notification's notification with an executor via user_id column.
func (o *UserProfile) UserNotifications(exec boil.Executor, mods ...qm.QueryMod) notificationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"notification\".\"user_id\"=?", o.ID),
	)

	query := Notifications(exec, queryMods...)
	queries.SetFrom(query.Query, "\"notification\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"notification\".*"})
	}

	return query
}

// UserNotificationArchivesG retrieves all the notification_archive's notification archive via user_id column.
func (o *UserProfile) UserNotificationArchivesG(mods ...qm.QueryMod) notificationArchiveQuery {
	return o.UserNotificationArchives(boil.GetDB(), mods...)
}

// UserNotificationArchives retrieves all the notification_archive's notification archive with an executor via user_id column.
func (o *UserProfile) UserNotificationArchives(exec boil.Executor, mods ...qm.QueryMod) notificationArchiveQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"notification_archive\".\"user_id\"=?", o.ID),
	)

	query := NotificationArchives(exec, queryMods...)
	queries.SetFrom(query.Query, "\"notification_archive\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"notification_archive\".*"})
	}

	return query
}

// UserUserMessagesG retrieves all the user_message's user message via user_id column.
func (o *UserProfile) UserUserMessagesG(mods ...qm.QueryMod) userMessageQuery {
	return o.UserUserMessages(boil.GetDB(), mods...)
}

// UserUserMessages retrieves all the user_message's user message with an executor via user_id column.
func (o *UserProfile) UserUserMessages(exec boil.Executor, mods ...qm.QueryMod) userMessageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_message\".\"user_id\"=?", o.ID),
	)

	query := UserMessages(exec, queryMods...)
	queries.SetFrom(query.Query, "\"user_message\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_message\".*"})
	}

	return query
}

// UserUserMessageArchivesG retrieves all the user_message_archive's user message archive via user_id column.
func (o *UserProfile) UserUserMessageArchivesG(mods ...qm.QueryMod) userMessageArchiveQuery {
	return o.UserUserMessageArchives(boil.GetDB(), mods...)
}

// UserUserMessageArchives retrieves all the user_message_archive's user message archive with an executor via user_id column.
func (o *UserProfile) UserUserMessageArchives(exec boil.Executor, mods ...qm.QueryMod) userMessageArchiveQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_message_archive\".\"user_id\"=?", o.ID),
	)

	query := UserMessageArchives(exec, queryMods...)
	queries.SetFrom(query.Query, "\"user_message_archive\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_message_archive\".*"})
	}

	return query
}

// UserUserOrdersG retrieves all the user_order's user order via user_id column.
func (o *UserProfile) UserUserOrdersG(mods ...qm.QueryMod) userOrderQuery {
	return o.UserUserOrders(boil.GetDB(), mods...)
}

// UserUserOrders retrieves all the user_order's user order with an executor via user_id column.
func (o *UserProfile) UserUserOrders(exec boil.Executor, mods ...qm.QueryMod) userOrderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_order\".\"user_id\"=?", o.ID),
	)

	query := UserOrders(exec, queryMods...)
	queries.SetFrom(query.Query, "\"user_order\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_order\".*"})
	}

	return query
}

// UserUserPushtokensG retrieves all the user_pushtoken's user pushtoken via user_id column.
func (o *UserProfile) UserUserPushtokensG(mods ...qm.QueryMod) userPushtokenQuery {
	return o.UserUserPushtokens(boil.GetDB(), mods...)
}

// UserUserPushtokens retrieves all the user_pushtoken's user pushtoken with an executor via user_id column.
func (o *UserProfile) UserUserPushtokens(exec boil.Executor, mods ...qm.QueryMod) userPushtokenQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_pushtoken\".\"user_id\"=?", o.ID),
	)

	query := UserPushtokens(exec, queryMods...)
	queries.SetFrom(query.Query, "\"user_pushtoken\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_pushtoken\".*"})
	}

	return query
}

// UserUserWalletsG retrieves all the user_wallet's user wallet via user_id column.
func (o *UserProfile) UserUserWalletsG(mods ...qm.QueryMod) userWalletQuery {
	return o.UserUserWallets(boil.GetDB(), mods...)
}

// UserUserWallets retrieves all the user_wallet's user wallet with an executor via user_id column.
func (o *UserProfile) UserUserWallets(exec boil.Executor, mods ...qm.QueryMod) userWalletQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_wallet\".\"user_id\"=?", o.ID),
	)

	query := UserWallets(exec, queryMods...)
	queries.SetFrom(query.Query, "\"user_wallet\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_wallet\".*"})
	}

	return query
}

// LoadUserUserSecurity allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (userProfileL) LoadUserUserSecurity(e boil.Executor, singular bool, maybeUserProfile interface{}) error {
	var slice []*UserProfile
	var object *UserProfile

	count := 1
	if singular {
		object = maybeUserProfile.(*UserProfile)
	} else {
		slice = *maybeUserProfile.(*[]*UserProfile)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &userProfileR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &userProfileR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"user_security\" where \"user_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserSecurity")
	}
	defer results.Close()

	var resultSlice []*UserSecurity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserSecurity")
	}

	if len(userProfileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.UserUserSecurity = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.UserID {
				local.R.UserUserSecurity = foreign
				break
			}
		}
	}

	return nil
}

// LoadUserNotifications allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (userProfileL) LoadUserNotifications(e boil.Executor, singular bool, maybeUserProfile interface{}) error {
	var slice []*UserProfile
	var object *UserProfile

	count := 1
	if singular {
		object = maybeUserProfile.(*UserProfile)
	} else {
		slice = *maybeUserProfile.(*[]*UserProfile)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &userProfileR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &userProfileR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"notification\" where \"user_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load notification")
	}
	defer results.Close()

	var resultSlice []*Notification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice notification")
	}

	if len(notificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserNotifications = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserNotifications = append(local.R.UserNotifications, foreign)
				break
			}
		}
	}

	return nil
}

// LoadUserNotificationArchives allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (userProfileL) LoadUserNotificationArchives(e boil.Executor, singular bool, maybeUserProfile interface{}) error {
	var slice []*UserProfile
	var object *UserProfile

	count := 1
	if singular {
		object = maybeUserProfile.(*UserProfile)
	} else {
		slice = *maybeUserProfile.(*[]*UserProfile)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &userProfileR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &userProfileR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"notification_archive\" where \"user_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load notification_archive")
	}
	defer results.Close()

	var resultSlice []*NotificationArchive
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice notification_archive")
	}

	if len(notificationArchiveAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserNotificationArchives = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserNotificationArchives = append(local.R.UserNotificationArchives, foreign)
				break
			}
		}
	}

	return nil
}

// LoadUserUserMessages allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (userProfileL) LoadUserUserMessages(e boil.Executor, singular bool, maybeUserProfile interface{}) error {
	var slice []*UserProfile
	var object *UserProfile

	count := 1
	if singular {
		object = maybeUserProfile.(*UserProfile)
	} else {
		slice = *maybeUserProfile.(*[]*UserProfile)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &userProfileR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &userProfileR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"user_message\" where \"user_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_message")
	}
	defer results.Close()

	var resultSlice []*UserMessage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_message")
	}

	if len(userMessageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserUserMessages = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserUserMessages = append(local.R.UserUserMessages, foreign)
				break
			}
		}
	}

	return nil
}

// LoadUserUserMessageArchives allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (userProfileL) LoadUserUserMessageArchives(e boil.Executor, singular bool, maybeUserProfile interface{}) error {
	var slice []*UserProfile
	var object *UserProfile

	count := 1
	if singular {
		object = maybeUserProfile.(*UserProfile)
	} else {
		slice = *maybeUserProfile.(*[]*UserProfile)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &userProfileR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &userProfileR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"user_message_archive\" where \"user_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_message_archive")
	}
	defer results.Close()

	var resultSlice []*UserMessageArchive
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_message_archive")
	}

	if len(userMessageArchiveAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserUserMessageArchives = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserUserMessageArchives = append(local.R.UserUserMessageArchives, foreign)
				break
			}
		}
	}

	return nil
}

// LoadUserUserOrders allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (userProfileL) LoadUserUserOrders(e boil.Executor, singular bool, maybeUserProfile interface{}) error {
	var slice []*UserProfile
	var object *UserProfile

	count := 1
	if singular {
		object = maybeUserProfile.(*UserProfile)
	} else {
		slice = *maybeUserProfile.(*[]*UserProfile)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &userProfileR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &userProfileR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"user_order\" where \"user_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_order")
	}
	defer results.Close()

	var resultSlice []*UserOrder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_order")
	}

	if len(userOrderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserUserOrders = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserUserOrders = append(local.R.UserUserOrders, foreign)
				break
			}
		}
	}

	return nil
}

// LoadUserUserPushtokens allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (userProfileL) LoadUserUserPushtokens(e boil.Executor, singular bool, maybeUserProfile interface{}) error {
	var slice []*UserProfile
	var object *UserProfile

	count := 1
	if singular {
		object = maybeUserProfile.(*UserProfile)
	} else {
		slice = *maybeUserProfile.(*[]*UserProfile)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &userProfileR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &userProfileR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"user_pushtoken\" where \"user_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_pushtoken")
	}
	defer results.Close()

	var resultSlice []*UserPushtoken
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_pushtoken")
	}

	if len(userPushtokenAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserUserPushtokens = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserUserPushtokens = append(local.R.UserUserPushtokens, foreign)
				break
			}
		}
	}

	return nil
}

// LoadUserUserWallets allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (userProfileL) LoadUserUserWallets(e boil.Executor, singular bool, maybeUserProfile interface{}) error {
	var slice []*UserProfile
	var object *UserProfile

	count := 1
	if singular {
		object = maybeUserProfile.(*UserProfile)
	} else {
		slice = *maybeUserProfile.(*[]*UserProfile)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &userProfileR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &userProfileR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"user_wallet\" where \"user_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_wallet")
	}
	defer results.Close()

	var resultSlice []*UserWallet
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_wallet")
	}

	if len(userWalletAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserUserWallets = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserUserWallets = append(local.R.UserUserWallets, foreign)
				break
			}
		}
	}

	return nil
}

// SetUserUserSecurityG of the user_profile to the related item.
// Sets o.R.UserUserSecurity to related.
// Adds o to related.R.User.
// Uses the global database handle.
func (o *UserProfile) SetUserUserSecurityG(insert bool, related *UserSecurity) error {
	return o.SetUserUserSecurity(boil.GetDB(), insert, related)
}

// SetUserUserSecurityP of the user_profile to the related item.
// Sets o.R.UserUserSecurity to related.
// Adds o to related.R.User.
// Panics on error.
func (o *UserProfile) SetUserUserSecurityP(exec boil.Executor, insert bool, related *UserSecurity) {
	if err := o.SetUserUserSecurity(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUserUserSecurityGP of the user_profile to the related item.
// Sets o.R.UserUserSecurity to related.
// Adds o to related.R.User.
// Uses the global database handle and panics on error.
func (o *UserProfile) SetUserUserSecurityGP(insert bool, related *UserSecurity) {
	if err := o.SetUserUserSecurity(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUserUserSecurity of the user_profile to the related item.
// Sets o.R.UserUserSecurity to related.
// Adds o to related.R.User.
func (o *UserProfile) SetUserUserSecurity(exec boil.Executor, insert bool, related *UserSecurity) error {
	var err error

	if insert {
		related.UserID = o.ID

		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"user_security\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
			strmangle.WhereClause("\"", "\"", 2, userSecurityPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.UserID = o.ID

	}

	if o.R == nil {
		o.R = &userProfileR{
			UserUserSecurity: related,
		}
	} else {
		o.R.UserUserSecurity = related
	}

	if related.R == nil {
		related.R = &userSecurityR{
			User: o,
		}
	} else {
		related.R.User = o
	}
	return nil
}

// AddUserNotificationsG adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserNotifications.
// Sets related.R.User appropriately.
// Uses the global database handle.
func (o *UserProfile) AddUserNotificationsG(insert bool, related ...*Notification) error {
	return o.AddUserNotifications(boil.GetDB(), insert, related...)
}

// AddUserNotificationsP adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserNotifications.
// Sets related.R.User appropriately.
// Panics on error.
func (o *UserProfile) AddUserNotificationsP(exec boil.Executor, insert bool, related ...*Notification) {
	if err := o.AddUserNotifications(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserNotificationsGP adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserNotifications.
// Sets related.R.User appropriately.
// Uses the global database handle and panics on error.
func (o *UserProfile) AddUserNotificationsGP(insert bool, related ...*Notification) {
	if err := o.AddUserNotifications(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserNotifications adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserNotifications.
// Sets related.R.User appropriately.
func (o *UserProfile) AddUserNotifications(exec boil.Executor, insert bool, related ...*Notification) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"notification\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, notificationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userProfileR{
			UserNotifications: related,
		}
	} else {
		o.R.UserNotifications = append(o.R.UserNotifications, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &notificationR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserNotificationArchivesG adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserNotificationArchives.
// Sets related.R.User appropriately.
// Uses the global database handle.
func (o *UserProfile) AddUserNotificationArchivesG(insert bool, related ...*NotificationArchive) error {
	return o.AddUserNotificationArchives(boil.GetDB(), insert, related...)
}

// AddUserNotificationArchivesP adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserNotificationArchives.
// Sets related.R.User appropriately.
// Panics on error.
func (o *UserProfile) AddUserNotificationArchivesP(exec boil.Executor, insert bool, related ...*NotificationArchive) {
	if err := o.AddUserNotificationArchives(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserNotificationArchivesGP adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserNotificationArchives.
// Sets related.R.User appropriately.
// Uses the global database handle and panics on error.
func (o *UserProfile) AddUserNotificationArchivesGP(insert bool, related ...*NotificationArchive) {
	if err := o.AddUserNotificationArchives(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserNotificationArchives adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserNotificationArchives.
// Sets related.R.User appropriately.
func (o *UserProfile) AddUserNotificationArchives(exec boil.Executor, insert bool, related ...*NotificationArchive) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"notification_archive\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, notificationArchivePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userProfileR{
			UserNotificationArchives: related,
		}
	} else {
		o.R.UserNotificationArchives = append(o.R.UserNotificationArchives, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &notificationArchiveR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserUserMessagesG adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserUserMessages.
// Sets related.R.User appropriately.
// Uses the global database handle.
func (o *UserProfile) AddUserUserMessagesG(insert bool, related ...*UserMessage) error {
	return o.AddUserUserMessages(boil.GetDB(), insert, related...)
}

// AddUserUserMessagesP adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserUserMessages.
// Sets related.R.User appropriately.
// Panics on error.
func (o *UserProfile) AddUserUserMessagesP(exec boil.Executor, insert bool, related ...*UserMessage) {
	if err := o.AddUserUserMessages(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserUserMessagesGP adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserUserMessages.
// Sets related.R.User appropriately.
// Uses the global database handle and panics on error.
func (o *UserProfile) AddUserUserMessagesGP(insert bool, related ...*UserMessage) {
	if err := o.AddUserUserMessages(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserUserMessages adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserUserMessages.
// Sets related.R.User appropriately.
func (o *UserProfile) AddUserUserMessages(exec boil.Executor, insert bool, related ...*UserMessage) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_message\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, userMessagePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userProfileR{
			UserUserMessages: related,
		}
	} else {
		o.R.UserUserMessages = append(o.R.UserUserMessages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userMessageR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserUserMessageArchivesG adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserUserMessageArchives.
// Sets related.R.User appropriately.
// Uses the global database handle.
func (o *UserProfile) AddUserUserMessageArchivesG(insert bool, related ...*UserMessageArchive) error {
	return o.AddUserUserMessageArchives(boil.GetDB(), insert, related...)
}

// AddUserUserMessageArchivesP adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserUserMessageArchives.
// Sets related.R.User appropriately.
// Panics on error.
func (o *UserProfile) AddUserUserMessageArchivesP(exec boil.Executor, insert bool, related ...*UserMessageArchive) {
	if err := o.AddUserUserMessageArchives(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserUserMessageArchivesGP adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserUserMessageArchives.
// Sets related.R.User appropriately.
// Uses the global database handle and panics on error.
func (o *UserProfile) AddUserUserMessageArchivesGP(insert bool, related ...*UserMessageArchive) {
	if err := o.AddUserUserMessageArchives(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserUserMessageArchives adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserUserMessageArchives.
// Sets related.R.User appropriately.
func (o *UserProfile) AddUserUserMessageArchives(exec boil.Executor, insert bool, related ...*UserMessageArchive) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_message_archive\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, userMessageArchivePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userProfileR{
			UserUserMessageArchives: related,
		}
	} else {
		o.R.UserUserMessageArchives = append(o.R.UserUserMessageArchives, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userMessageArchiveR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserUserOrdersG adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserUserOrders.
// Sets related.R.User appropriately.
// Uses the global database handle.
func (o *UserProfile) AddUserUserOrdersG(insert bool, related ...*UserOrder) error {
	return o.AddUserUserOrders(boil.GetDB(), insert, related...)
}

// AddUserUserOrdersP adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserUserOrders.
// Sets related.R.User appropriately.
// Panics on error.
func (o *UserProfile) AddUserUserOrdersP(exec boil.Executor, insert bool, related ...*UserOrder) {
	if err := o.AddUserUserOrders(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserUserOrdersGP adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserUserOrders.
// Sets related.R.User appropriately.
// Uses the global database handle and panics on error.
func (o *UserProfile) AddUserUserOrdersGP(insert bool, related ...*UserOrder) {
	if err := o.AddUserUserOrders(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserUserOrders adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserUserOrders.
// Sets related.R.User appropriately.
func (o *UserProfile) AddUserUserOrders(exec boil.Executor, insert bool, related ...*UserOrder) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_order\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, userOrderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userProfileR{
			UserUserOrders: related,
		}
	} else {
		o.R.UserUserOrders = append(o.R.UserUserOrders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userOrderR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserUserPushtokensG adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserUserPushtokens.
// Sets related.R.User appropriately.
// Uses the global database handle.
func (o *UserProfile) AddUserUserPushtokensG(insert bool, related ...*UserPushtoken) error {
	return o.AddUserUserPushtokens(boil.GetDB(), insert, related...)
}

// AddUserUserPushtokensP adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserUserPushtokens.
// Sets related.R.User appropriately.
// Panics on error.
func (o *UserProfile) AddUserUserPushtokensP(exec boil.Executor, insert bool, related ...*UserPushtoken) {
	if err := o.AddUserUserPushtokens(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserUserPushtokensGP adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserUserPushtokens.
// Sets related.R.User appropriately.
// Uses the global database handle and panics on error.
func (o *UserProfile) AddUserUserPushtokensGP(insert bool, related ...*UserPushtoken) {
	if err := o.AddUserUserPushtokens(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserUserPushtokens adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserUserPushtokens.
// Sets related.R.User appropriately.
func (o *UserProfile) AddUserUserPushtokens(exec boil.Executor, insert bool, related ...*UserPushtoken) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_pushtoken\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, userPushtokenPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userProfileR{
			UserUserPushtokens: related,
		}
	} else {
		o.R.UserUserPushtokens = append(o.R.UserUserPushtokens, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userPushtokenR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserUserWalletsG adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserUserWallets.
// Sets related.R.User appropriately.
// Uses the global database handle.
func (o *UserProfile) AddUserUserWalletsG(insert bool, related ...*UserWallet) error {
	return o.AddUserUserWallets(boil.GetDB(), insert, related...)
}

// AddUserUserWalletsP adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserUserWallets.
// Sets related.R.User appropriately.
// Panics on error.
func (o *UserProfile) AddUserUserWalletsP(exec boil.Executor, insert bool, related ...*UserWallet) {
	if err := o.AddUserUserWallets(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserUserWalletsGP adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserUserWallets.
// Sets related.R.User appropriately.
// Uses the global database handle and panics on error.
func (o *UserProfile) AddUserUserWalletsGP(insert bool, related ...*UserWallet) {
	if err := o.AddUserUserWallets(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserUserWallets adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserUserWallets.
// Sets related.R.User appropriately.
func (o *UserProfile) AddUserUserWallets(exec boil.Executor, insert bool, related ...*UserWallet) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_wallet\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, userWalletPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userProfileR{
			UserUserWallets: related,
		}
	} else {
		o.R.UserUserWallets = append(o.R.UserUserWallets, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userWalletR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// UserProfilesG retrieves all records.
func UserProfilesG(mods ...qm.QueryMod) userProfileQuery {
	return UserProfiles(boil.GetDB(), mods...)
}

// UserProfiles retrieves all the records using an executor.
func UserProfiles(exec boil.Executor, mods ...qm.QueryMod) userProfileQuery {
	mods = append(mods, qm.From("\"user_profile\""))
	return userProfileQuery{NewQuery(exec, mods...)}
}

// FindUserProfileG retrieves a single record by ID.
func FindUserProfileG(id int, selectCols ...string) (*UserProfile, error) {
	return FindUserProfile(boil.GetDB(), id, selectCols...)
}

// FindUserProfileGP retrieves a single record by ID, and panics on error.
func FindUserProfileGP(id int, selectCols ...string) *UserProfile {
	retobj, err := FindUserProfile(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindUserProfile retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserProfile(exec boil.Executor, id int, selectCols ...string) (*UserProfile, error) {
	userProfileObj := &UserProfile{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_profile\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(userProfileObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_profile")
	}

	return userProfileObj, nil
}

// FindUserProfileP retrieves a single record by ID with an executor, and panics on error.
func FindUserProfileP(exec boil.Executor, id int, selectCols ...string) *UserProfile {
	retobj, err := FindUserProfile(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UserProfile) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *UserProfile) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *UserProfile) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *UserProfile) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no user_profile provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userProfileColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	userProfileInsertCacheMut.RLock()
	cache, cached := userProfileInsertCache[key]
	userProfileInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			userProfileColumns,
			userProfileColumnsWithDefault,
			userProfileColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(userProfileType, userProfileMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userProfileType, userProfileMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_profile\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_profile\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_profile")
	}

	if !cached {
		userProfileInsertCacheMut.Lock()
		userProfileInsertCache[key] = cache
		userProfileInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single UserProfile record. See Update for
// whitelist behavior description.
func (o *UserProfile) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single UserProfile record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *UserProfile) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the UserProfile, and panics on error.
// See Update for whitelist behavior description.
func (o *UserProfile) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the UserProfile.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *UserProfile) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	userProfileUpdateCacheMut.RLock()
	cache, cached := userProfileUpdateCache[key]
	userProfileUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			userProfileColumns,
			userProfilePrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update user_profile, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_profile\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userProfilePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userProfileType, userProfileMapping, append(wl, userProfilePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update user_profile row")
	}

	if !cached {
		userProfileUpdateCacheMut.Lock()
		userProfileUpdateCache[key] = cache
		userProfileUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q userProfileQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q userProfileQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for user_profile")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UserProfileSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o UserProfileSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o UserProfileSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserProfileSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userProfilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_profile\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userProfilePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in userProfile slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UserProfile) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *UserProfile) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *UserProfile) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *UserProfile) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no user_profile provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userProfileColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userProfileUpsertCacheMut.RLock()
	cache, cached := userProfileUpsertCache[key]
	userProfileUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			userProfileColumns,
			userProfileColumnsWithDefault,
			userProfileColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			userProfileColumns,
			userProfilePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert user_profile, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userProfilePrimaryKeyColumns))
			copy(conflict, userProfilePrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"user_profile\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userProfileType, userProfileMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userProfileType, userProfileMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_profile")
	}

	if !cached {
		userProfileUpsertCacheMut.Lock()
		userProfileUpsertCache[key] = cache
		userProfileUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single UserProfile record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UserProfile) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single UserProfile record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UserProfile) DeleteG() error {
	if o == nil {
		return errors.New("models: no UserProfile provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single UserProfile record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UserProfile) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single UserProfile record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserProfile) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no UserProfile provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userProfilePrimaryKeyMapping)
	sql := "DELETE FROM \"user_profile\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from user_profile")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q userProfileQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q userProfileQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no userProfileQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from user_profile")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o UserProfileSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o UserProfileSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no UserProfile slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o UserProfileSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserProfileSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no UserProfile slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(userProfileBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userProfilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_profile\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userProfilePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from userProfile slice")
	}

	if len(userProfileAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *UserProfile) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *UserProfile) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UserProfile) ReloadG() error {
	if o == nil {
		return errors.New("models: no UserProfile provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserProfile) Reload(exec boil.Executor) error {
	ret, err := FindUserProfile(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UserProfileSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UserProfileSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserProfileSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty UserProfileSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserProfileSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	userProfiles := UserProfileSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userProfilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_profile\".* FROM \"user_profile\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userProfilePrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&userProfiles)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserProfileSlice")
	}

	*o = userProfiles

	return nil
}

// UserProfileExists checks if the UserProfile row exists.
func UserProfileExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_profile\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_profile exists")
	}

	return exists, nil
}

// UserProfileExistsG checks if the UserProfile row exists.
func UserProfileExistsG(id int) (bool, error) {
	return UserProfileExists(boil.GetDB(), id)
}

// UserProfileExistsGP checks if the UserProfile row exists. Panics on error.
func UserProfileExistsGP(id int) bool {
	e, err := UserProfileExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// UserProfileExistsP checks if the UserProfile row exists. Panics on error.
func UserProfileExistsP(exec boil.Executor, id int) bool {
	e, err := UserProfileExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
