// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Icophase is an object representing the database table.
type Icophase struct {
	ID                 int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	IcoID              int       `boil:"ico_id" json:"ico_id" toml:"ico_id" yaml:"ico_id"`
	IcophaseName       string    `boil:"icophase_name" json:"icophase_name" toml:"icophase_name" yaml:"icophase_name"`
	IcophaseStatus     string    `boil:"icophase_status" json:"icophase_status" toml:"icophase_status" yaml:"icophase_status"`
	DistPK             string    `boil:"dist_pk" json:"dist_pk" toml:"dist_pk" yaml:"dist_pk"`
	DistPresignerPK    string    `boil:"dist_presigner_pk" json:"dist_presigner_pk" toml:"dist_presigner_pk" yaml:"dist_presigner_pk"`
	DistPresignerSeed  string    `boil:"dist_presigner_seed" json:"dist_presigner_seed" toml:"dist_presigner_seed" yaml:"dist_presigner_seed"`
	DistPostsignerPK   string    `boil:"dist_postsigner_pk" json:"dist_postsigner_pk" toml:"dist_postsigner_pk" yaml:"dist_postsigner_pk"`
	DistPostsignerSeed string    `boil:"dist_postsigner_seed" json:"dist_postsigner_seed" toml:"dist_postsigner_seed" yaml:"dist_postsigner_seed"`
	StartTime          time.Time `boil:"start_time" json:"start_time" toml:"start_time" yaml:"start_time"`
	EndTime            time.Time `boil:"end_time" json:"end_time" toml:"end_time" yaml:"end_time"`
	TokensToDistribute int64     `boil:"tokens_to_distribute" json:"tokens_to_distribute" toml:"tokens_to_distribute" yaml:"tokens_to_distribute"`
	TokensReleased     int64     `boil:"tokens_released" json:"tokens_released" toml:"tokens_released" yaml:"tokens_released"`
	TokensBlocked      int64     `boil:"tokens_blocked" json:"tokens_blocked" toml:"tokens_blocked" yaml:"tokens_blocked"`
	TokensLeft         int64     `boil:"tokens_left" json:"tokens_left" toml:"tokens_left" yaml:"tokens_left"`
	CreatedAt          time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UpdatedBy          string    `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`

	R *icophaseR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L icophaseL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var IcophaseColumns = struct {
	ID                 string
	IcoID              string
	IcophaseName       string
	IcophaseStatus     string
	DistPK             string
	DistPresignerPK    string
	DistPresignerSeed  string
	DistPostsignerPK   string
	DistPostsignerSeed string
	StartTime          string
	EndTime            string
	TokensToDistribute string
	TokensReleased     string
	TokensBlocked      string
	TokensLeft         string
	CreatedAt          string
	UpdatedAt          string
	UpdatedBy          string
}{
	ID:                 "id",
	IcoID:              "ico_id",
	IcophaseName:       "icophase_name",
	IcophaseStatus:     "icophase_status",
	DistPK:             "dist_pk",
	DistPresignerPK:    "dist_presigner_pk",
	DistPresignerSeed:  "dist_presigner_seed",
	DistPostsignerPK:   "dist_postsigner_pk",
	DistPostsignerSeed: "dist_postsigner_seed",
	StartTime:          "start_time",
	EndTime:            "end_time",
	TokensToDistribute: "tokens_to_distribute",
	TokensReleased:     "tokens_released",
	TokensBlocked:      "tokens_blocked",
	TokensLeft:         "tokens_left",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	UpdatedBy:          "updated_by",
}

// IcophaseRels is where relationship names are stored.
var IcophaseRels = struct {
	Ico                                 string
	IcophaseActivatedExchangeCurrencies string
}{
	Ico:                                 "Ico",
	IcophaseActivatedExchangeCurrencies: "IcophaseActivatedExchangeCurrencies",
}

// icophaseR is where relationships are stored.
type icophaseR struct {
	Ico                                 *Ico
	IcophaseActivatedExchangeCurrencies IcophaseActivatedExchangeCurrencySlice
}

// NewStruct creates a new relationship struct
func (*icophaseR) NewStruct() *icophaseR {
	return &icophaseR{}
}

// icophaseL is where Load methods for each relationship are stored.
type icophaseL struct{}

var (
	icophaseColumns               = []string{"id", "ico_id", "icophase_name", "icophase_status", "dist_pk", "dist_presigner_pk", "dist_presigner_seed", "dist_postsigner_pk", "dist_postsigner_seed", "start_time", "end_time", "tokens_to_distribute", "tokens_released", "tokens_blocked", "tokens_left", "created_at", "updated_at", "updated_by"}
	icophaseColumnsWithoutDefault = []string{"ico_id", "icophase_name", "icophase_status", "dist_pk", "dist_presigner_pk", "dist_presigner_seed", "dist_postsigner_pk", "dist_postsigner_seed", "start_time", "end_time", "tokens_to_distribute", "tokens_released", "tokens_blocked", "tokens_left", "updated_by"}
	icophaseColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	icophasePrimaryKeyColumns     = []string{"id"}
)

type (
	// IcophaseSlice is an alias for a slice of pointers to Icophase.
	// This should generally be used opposed to []Icophase.
	IcophaseSlice []*Icophase
	// IcophaseHook is the signature for custom Icophase hook methods
	IcophaseHook func(boil.Executor, *Icophase) error

	icophaseQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	icophaseType                 = reflect.TypeOf(&Icophase{})
	icophaseMapping              = queries.MakeStructMapping(icophaseType)
	icophasePrimaryKeyMapping, _ = queries.BindMapping(icophaseType, icophaseMapping, icophasePrimaryKeyColumns)
	icophaseInsertCacheMut       sync.RWMutex
	icophaseInsertCache          = make(map[string]insertCache)
	icophaseUpdateCacheMut       sync.RWMutex
	icophaseUpdateCache          = make(map[string]updateCache)
	icophaseUpsertCacheMut       sync.RWMutex
	icophaseUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var icophaseBeforeInsertHooks []IcophaseHook
var icophaseBeforeUpdateHooks []IcophaseHook
var icophaseBeforeDeleteHooks []IcophaseHook
var icophaseBeforeUpsertHooks []IcophaseHook

var icophaseAfterInsertHooks []IcophaseHook
var icophaseAfterSelectHooks []IcophaseHook
var icophaseAfterUpdateHooks []IcophaseHook
var icophaseAfterDeleteHooks []IcophaseHook
var icophaseAfterUpsertHooks []IcophaseHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Icophase) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range icophaseBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Icophase) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range icophaseBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Icophase) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range icophaseBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Icophase) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range icophaseBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Icophase) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range icophaseAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Icophase) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range icophaseAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Icophase) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range icophaseAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Icophase) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range icophaseAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Icophase) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range icophaseAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddIcophaseHook registers your hook function for all future operations.
func AddIcophaseHook(hookPoint boil.HookPoint, icophaseHook IcophaseHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		icophaseBeforeInsertHooks = append(icophaseBeforeInsertHooks, icophaseHook)
	case boil.BeforeUpdateHook:
		icophaseBeforeUpdateHooks = append(icophaseBeforeUpdateHooks, icophaseHook)
	case boil.BeforeDeleteHook:
		icophaseBeforeDeleteHooks = append(icophaseBeforeDeleteHooks, icophaseHook)
	case boil.BeforeUpsertHook:
		icophaseBeforeUpsertHooks = append(icophaseBeforeUpsertHooks, icophaseHook)
	case boil.AfterInsertHook:
		icophaseAfterInsertHooks = append(icophaseAfterInsertHooks, icophaseHook)
	case boil.AfterSelectHook:
		icophaseAfterSelectHooks = append(icophaseAfterSelectHooks, icophaseHook)
	case boil.AfterUpdateHook:
		icophaseAfterUpdateHooks = append(icophaseAfterUpdateHooks, icophaseHook)
	case boil.AfterDeleteHook:
		icophaseAfterDeleteHooks = append(icophaseAfterDeleteHooks, icophaseHook)
	case boil.AfterUpsertHook:
		icophaseAfterUpsertHooks = append(icophaseAfterUpsertHooks, icophaseHook)
	}
}

// OneG returns a single icophase record from the query using the global executor.
func (q icophaseQuery) OneG() (*Icophase, error) {
	return q.One(boil.GetDB())
}

// One returns a single icophase record from the query.
func (q icophaseQuery) One(exec boil.Executor) (*Icophase, error) {
	o := &Icophase{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for icophase")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Icophase records from the query using the global executor.
func (q icophaseQuery) AllG() (IcophaseSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Icophase records from the query.
func (q icophaseQuery) All(exec boil.Executor) (IcophaseSlice, error) {
	var o []*Icophase

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Icophase slice")
	}

	if len(icophaseAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Icophase records in the query, and panics on error.
func (q icophaseQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Icophase records in the query.
func (q icophaseQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count icophase rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q icophaseQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q icophaseQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if icophase exists")
	}

	return count > 0, nil
}

// Ico pointed to by the foreign key.
func (o *Icophase) Ico(mods ...qm.QueryMod) icoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.IcoID),
	}

	queryMods = append(queryMods, mods...)

	query := Icos(queryMods...)
	queries.SetFrom(query.Query, "\"ico\"")

	return query
}

// IcophaseActivatedExchangeCurrencies retrieves all the icophase_activated_exchange_currency's IcophaseActivatedExchangeCurrencies with an executor.
func (o *Icophase) IcophaseActivatedExchangeCurrencies(mods ...qm.QueryMod) icophaseActivatedExchangeCurrencyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"icophase_activated_exchange_currency\".\"icophase_id\"=?", o.ID),
	)

	query := IcophaseActivatedExchangeCurrencies(queryMods...)
	queries.SetFrom(query.Query, "\"icophase_activated_exchange_currency\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"icophase_activated_exchange_currency\".*"})
	}

	return query
}

// LoadIco allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (icophaseL) LoadIco(e boil.Executor, singular bool, maybeIcophase interface{}, mods queries.Applicator) error {
	var slice []*Icophase
	var object *Icophase

	if singular {
		object = maybeIcophase.(*Icophase)
	} else {
		slice = *maybeIcophase.(*[]*Icophase)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &icophaseR{}
		}
		args = append(args, object.IcoID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &icophaseR{}
			}

			for _, a := range args {
				if a == obj.IcoID {
					continue Outer
				}
			}

			args = append(args, obj.IcoID)
		}
	}

	query := NewQuery(qm.From(`ico`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Ico")
	}

	var resultSlice []*Ico
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Ico")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for ico")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ico")
	}

	if len(icophaseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Ico = foreign
		if foreign.R == nil {
			foreign.R = &icoR{}
		}
		foreign.R.Icophases = append(foreign.R.Icophases, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IcoID == foreign.ID {
				local.R.Ico = foreign
				if foreign.R == nil {
					foreign.R = &icoR{}
				}
				foreign.R.Icophases = append(foreign.R.Icophases, local)
				break
			}
		}
	}

	return nil
}

// LoadIcophaseActivatedExchangeCurrencies allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (icophaseL) LoadIcophaseActivatedExchangeCurrencies(e boil.Executor, singular bool, maybeIcophase interface{}, mods queries.Applicator) error {
	var slice []*Icophase
	var object *Icophase

	if singular {
		object = maybeIcophase.(*Icophase)
	} else {
		slice = *maybeIcophase.(*[]*Icophase)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &icophaseR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &icophaseR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`icophase_activated_exchange_currency`), qm.WhereIn(`icophase_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load icophase_activated_exchange_currency")
	}

	var resultSlice []*IcophaseActivatedExchangeCurrency
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice icophase_activated_exchange_currency")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on icophase_activated_exchange_currency")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for icophase_activated_exchange_currency")
	}

	if len(icophaseActivatedExchangeCurrencyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IcophaseActivatedExchangeCurrencies = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &icophaseActivatedExchangeCurrencyR{}
			}
			foreign.R.Icophase = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IcophaseID {
				local.R.IcophaseActivatedExchangeCurrencies = append(local.R.IcophaseActivatedExchangeCurrencies, foreign)
				if foreign.R == nil {
					foreign.R = &icophaseActivatedExchangeCurrencyR{}
				}
				foreign.R.Icophase = local
				break
			}
		}
	}

	return nil
}

// SetIcoG of the icophase to the related item.
// Sets o.R.Ico to related.
// Adds o to related.R.Icophases.
// Uses the global database handle.
func (o *Icophase) SetIcoG(insert bool, related *Ico) error {
	return o.SetIco(boil.GetDB(), insert, related)
}

// SetIco of the icophase to the related item.
// Sets o.R.Ico to related.
// Adds o to related.R.Icophases.
func (o *Icophase) SetIco(exec boil.Executor, insert bool, related *Ico) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"icophase\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"ico_id"}),
		strmangle.WhereClause("\"", "\"", 2, icophasePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IcoID = related.ID
	if o.R == nil {
		o.R = &icophaseR{
			Ico: related,
		}
	} else {
		o.R.Ico = related
	}

	if related.R == nil {
		related.R = &icoR{
			Icophases: IcophaseSlice{o},
		}
	} else {
		related.R.Icophases = append(related.R.Icophases, o)
	}

	return nil
}

// AddIcophaseActivatedExchangeCurrenciesG adds the given related objects to the existing relationships
// of the icophase, optionally inserting them as new records.
// Appends related to o.R.IcophaseActivatedExchangeCurrencies.
// Sets related.R.Icophase appropriately.
// Uses the global database handle.
func (o *Icophase) AddIcophaseActivatedExchangeCurrenciesG(insert bool, related ...*IcophaseActivatedExchangeCurrency) error {
	return o.AddIcophaseActivatedExchangeCurrencies(boil.GetDB(), insert, related...)
}

// AddIcophaseActivatedExchangeCurrencies adds the given related objects to the existing relationships
// of the icophase, optionally inserting them as new records.
// Appends related to o.R.IcophaseActivatedExchangeCurrencies.
// Sets related.R.Icophase appropriately.
func (o *Icophase) AddIcophaseActivatedExchangeCurrencies(exec boil.Executor, insert bool, related ...*IcophaseActivatedExchangeCurrency) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IcophaseID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"icophase_activated_exchange_currency\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"icophase_id"}),
				strmangle.WhereClause("\"", "\"", 2, icophaseActivatedExchangeCurrencyPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IcophaseID = o.ID
		}
	}

	if o.R == nil {
		o.R = &icophaseR{
			IcophaseActivatedExchangeCurrencies: related,
		}
	} else {
		o.R.IcophaseActivatedExchangeCurrencies = append(o.R.IcophaseActivatedExchangeCurrencies, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &icophaseActivatedExchangeCurrencyR{
				Icophase: o,
			}
		} else {
			rel.R.Icophase = o
		}
	}
	return nil
}

// Icophases retrieves all the records using an executor.
func Icophases(mods ...qm.QueryMod) icophaseQuery {
	mods = append(mods, qm.From("\"icophase\""))
	return icophaseQuery{NewQuery(mods...)}
}

// FindIcophaseG retrieves a single record by ID.
func FindIcophaseG(iD int, selectCols ...string) (*Icophase, error) {
	return FindIcophase(boil.GetDB(), iD, selectCols...)
}

// FindIcophase retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindIcophase(exec boil.Executor, iD int, selectCols ...string) (*Icophase, error) {
	icophaseObj := &Icophase{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"icophase\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, icophaseObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from icophase")
	}

	return icophaseObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Icophase) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Icophase) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no icophase provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(icophaseColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	icophaseInsertCacheMut.RLock()
	cache, cached := icophaseInsertCache[key]
	icophaseInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			icophaseColumns,
			icophaseColumnsWithDefault,
			icophaseColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(icophaseType, icophaseMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(icophaseType, icophaseMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"icophase\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"icophase\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into icophase")
	}

	if !cached {
		icophaseInsertCacheMut.Lock()
		icophaseInsertCache[key] = cache
		icophaseInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Icophase record using the global executor.
// See Update for more documentation.
func (o *Icophase) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Icophase.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Icophase) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	icophaseUpdateCacheMut.RLock()
	cache, cached := icophaseUpdateCache[key]
	icophaseUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			icophaseColumns,
			icophasePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update icophase, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"icophase\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, icophasePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(icophaseType, icophaseMapping, append(wl, icophasePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update icophase row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for icophase")
	}

	if !cached {
		icophaseUpdateCacheMut.Lock()
		icophaseUpdateCache[key] = cache
		icophaseUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q icophaseQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for icophase")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for icophase")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o IcophaseSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o IcophaseSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), icophasePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"icophase\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, icophasePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in icophase slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all icophase")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Icophase) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Icophase) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no icophase provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(icophaseColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	icophaseUpsertCacheMut.RLock()
	cache, cached := icophaseUpsertCache[key]
	icophaseUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			icophaseColumns,
			icophaseColumnsWithDefault,
			icophaseColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			icophaseColumns,
			icophasePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert icophase, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(icophasePrimaryKeyColumns))
			copy(conflict, icophasePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"icophase\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(icophaseType, icophaseMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(icophaseType, icophaseMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert icophase")
	}

	if !cached {
		icophaseUpsertCacheMut.Lock()
		icophaseUpsertCache[key] = cache
		icophaseUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single Icophase record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Icophase) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Icophase record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Icophase) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Icophase provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), icophasePrimaryKeyMapping)
	sql := "DELETE FROM \"icophase\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from icophase")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for icophase")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q icophaseQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no icophaseQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from icophase")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for icophase")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o IcophaseSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o IcophaseSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Icophase slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(icophaseBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), icophasePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"icophase\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, icophasePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from icophase slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for icophase")
	}

	if len(icophaseAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Icophase) ReloadG() error {
	if o == nil {
		return errors.New("models: no Icophase provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Icophase) Reload(exec boil.Executor) error {
	ret, err := FindIcophase(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IcophaseSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty IcophaseSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IcophaseSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := IcophaseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), icophasePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"icophase\".* FROM \"icophase\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, icophasePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in IcophaseSlice")
	}

	*o = slice

	return nil
}

// IcophaseExistsG checks if the Icophase row exists.
func IcophaseExistsG(iD int) (bool, error) {
	return IcophaseExists(boil.GetDB(), iD)
}

// IcophaseExists checks if the Icophase row exists.
func IcophaseExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"icophase\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if icophase exists")
	}

	return exists, nil
}
