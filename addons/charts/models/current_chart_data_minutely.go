// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// CurrentChartDataMinutely is an object representing the database table.
type CurrentChartDataMinutely struct {
	ID                    int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	ExchangeRateTime      time.Time `boil:"exchange_rate_time" json:"exchange_rate_time" toml:"exchange_rate_time" yaml:"exchange_rate_time"`
	SourceCurrencyID      int       `boil:"source_currency_id" json:"source_currency_id" toml:"source_currency_id" yaml:"source_currency_id"`
	DestinationCurrencyID int       `boil:"destination_currency_id" json:"destination_currency_id" toml:"destination_currency_id" yaml:"destination_currency_id"`
	ExchangeRate          float64   `boil:"exchange_rate" json:"exchange_rate" toml:"exchange_rate" yaml:"exchange_rate"`
	CreatedAt             time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt             time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UpdatedBy             string    `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`

	R *currentChartDataMinutelyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L currentChartDataMinutelyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CurrentChartDataMinutelyColumns = struct {
	ID                    string
	ExchangeRateTime      string
	SourceCurrencyID      string
	DestinationCurrencyID string
	ExchangeRate          string
	CreatedAt             string
	UpdatedAt             string
	UpdatedBy             string
}{
	ID:                    "id",
	ExchangeRateTime:      "exchange_rate_time",
	SourceCurrencyID:      "source_currency_id",
	DestinationCurrencyID: "destination_currency_id",
	ExchangeRate:          "exchange_rate",
	CreatedAt:             "created_at",
	UpdatedAt:             "updated_at",
	UpdatedBy:             "updated_by",
}

// CurrentChartDataMinutelyRels is where relationship names are stored.
var CurrentChartDataMinutelyRels = struct {
	SourceCurrency      string
	DestinationCurrency string
}{
	SourceCurrency:      "SourceCurrency",
	DestinationCurrency: "DestinationCurrency",
}

// currentChartDataMinutelyR is where relationships are stored.
type currentChartDataMinutelyR struct {
	SourceCurrency      *Currency
	DestinationCurrency *Currency
}

// NewStruct creates a new relationship struct
func (*currentChartDataMinutelyR) NewStruct() *currentChartDataMinutelyR {
	return &currentChartDataMinutelyR{}
}

// currentChartDataMinutelyL is where Load methods for each relationship are stored.
type currentChartDataMinutelyL struct{}

var (
	currentChartDataMinutelyColumns               = []string{"id", "exchange_rate_time", "source_currency_id", "destination_currency_id", "exchange_rate", "created_at", "updated_at", "updated_by"}
	currentChartDataMinutelyColumnsWithoutDefault = []string{"source_currency_id", "destination_currency_id", "exchange_rate", "updated_by"}
	currentChartDataMinutelyColumnsWithDefault    = []string{"id", "exchange_rate_time", "created_at", "updated_at"}
	currentChartDataMinutelyPrimaryKeyColumns     = []string{"id"}
)

type (
	// CurrentChartDataMinutelySlice is an alias for a slice of pointers to CurrentChartDataMinutely.
	// This should generally be used opposed to []CurrentChartDataMinutely.
	CurrentChartDataMinutelySlice []*CurrentChartDataMinutely
	// CurrentChartDataMinutelyHook is the signature for custom CurrentChartDataMinutely hook methods
	CurrentChartDataMinutelyHook func(boil.Executor, *CurrentChartDataMinutely) error

	currentChartDataMinutelyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	currentChartDataMinutelyType                 = reflect.TypeOf(&CurrentChartDataMinutely{})
	currentChartDataMinutelyMapping              = queries.MakeStructMapping(currentChartDataMinutelyType)
	currentChartDataMinutelyPrimaryKeyMapping, _ = queries.BindMapping(currentChartDataMinutelyType, currentChartDataMinutelyMapping, currentChartDataMinutelyPrimaryKeyColumns)
	currentChartDataMinutelyInsertCacheMut       sync.RWMutex
	currentChartDataMinutelyInsertCache          = make(map[string]insertCache)
	currentChartDataMinutelyUpdateCacheMut       sync.RWMutex
	currentChartDataMinutelyUpdateCache          = make(map[string]updateCache)
	currentChartDataMinutelyUpsertCacheMut       sync.RWMutex
	currentChartDataMinutelyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var currentChartDataMinutelyBeforeInsertHooks []CurrentChartDataMinutelyHook
var currentChartDataMinutelyBeforeUpdateHooks []CurrentChartDataMinutelyHook
var currentChartDataMinutelyBeforeDeleteHooks []CurrentChartDataMinutelyHook
var currentChartDataMinutelyBeforeUpsertHooks []CurrentChartDataMinutelyHook

var currentChartDataMinutelyAfterInsertHooks []CurrentChartDataMinutelyHook
var currentChartDataMinutelyAfterSelectHooks []CurrentChartDataMinutelyHook
var currentChartDataMinutelyAfterUpdateHooks []CurrentChartDataMinutelyHook
var currentChartDataMinutelyAfterDeleteHooks []CurrentChartDataMinutelyHook
var currentChartDataMinutelyAfterUpsertHooks []CurrentChartDataMinutelyHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CurrentChartDataMinutely) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range currentChartDataMinutelyBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CurrentChartDataMinutely) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range currentChartDataMinutelyBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CurrentChartDataMinutely) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range currentChartDataMinutelyBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CurrentChartDataMinutely) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range currentChartDataMinutelyBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CurrentChartDataMinutely) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range currentChartDataMinutelyAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CurrentChartDataMinutely) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range currentChartDataMinutelyAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CurrentChartDataMinutely) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range currentChartDataMinutelyAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CurrentChartDataMinutely) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range currentChartDataMinutelyAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CurrentChartDataMinutely) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range currentChartDataMinutelyAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCurrentChartDataMinutelyHook registers your hook function for all future operations.
func AddCurrentChartDataMinutelyHook(hookPoint boil.HookPoint, currentChartDataMinutelyHook CurrentChartDataMinutelyHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		currentChartDataMinutelyBeforeInsertHooks = append(currentChartDataMinutelyBeforeInsertHooks, currentChartDataMinutelyHook)
	case boil.BeforeUpdateHook:
		currentChartDataMinutelyBeforeUpdateHooks = append(currentChartDataMinutelyBeforeUpdateHooks, currentChartDataMinutelyHook)
	case boil.BeforeDeleteHook:
		currentChartDataMinutelyBeforeDeleteHooks = append(currentChartDataMinutelyBeforeDeleteHooks, currentChartDataMinutelyHook)
	case boil.BeforeUpsertHook:
		currentChartDataMinutelyBeforeUpsertHooks = append(currentChartDataMinutelyBeforeUpsertHooks, currentChartDataMinutelyHook)
	case boil.AfterInsertHook:
		currentChartDataMinutelyAfterInsertHooks = append(currentChartDataMinutelyAfterInsertHooks, currentChartDataMinutelyHook)
	case boil.AfterSelectHook:
		currentChartDataMinutelyAfterSelectHooks = append(currentChartDataMinutelyAfterSelectHooks, currentChartDataMinutelyHook)
	case boil.AfterUpdateHook:
		currentChartDataMinutelyAfterUpdateHooks = append(currentChartDataMinutelyAfterUpdateHooks, currentChartDataMinutelyHook)
	case boil.AfterDeleteHook:
		currentChartDataMinutelyAfterDeleteHooks = append(currentChartDataMinutelyAfterDeleteHooks, currentChartDataMinutelyHook)
	case boil.AfterUpsertHook:
		currentChartDataMinutelyAfterUpsertHooks = append(currentChartDataMinutelyAfterUpsertHooks, currentChartDataMinutelyHook)
	}
}

// One returns a single currentChartDataMinutely record from the query.
func (q currentChartDataMinutelyQuery) One(exec boil.Executor) (*CurrentChartDataMinutely, error) {
	o := &CurrentChartDataMinutely{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for current_chart_data_minutely")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CurrentChartDataMinutely records from the query.
func (q currentChartDataMinutelyQuery) All(exec boil.Executor) (CurrentChartDataMinutelySlice, error) {
	var o []*CurrentChartDataMinutely

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CurrentChartDataMinutely slice")
	}

	if len(currentChartDataMinutelyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CurrentChartDataMinutely records in the query.
func (q currentChartDataMinutelyQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count current_chart_data_minutely rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q currentChartDataMinutelyQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if current_chart_data_minutely exists")
	}

	return count > 0, nil
}

// SourceCurrency pointed to by the foreign key.
func (o *CurrentChartDataMinutely) SourceCurrency(mods ...qm.QueryMod) currencyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.SourceCurrencyID),
	}

	queryMods = append(queryMods, mods...)

	query := Currencies(queryMods...)
	queries.SetFrom(query.Query, "\"currency\"")

	return query
}

// DestinationCurrency pointed to by the foreign key.
func (o *CurrentChartDataMinutely) DestinationCurrency(mods ...qm.QueryMod) currencyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.DestinationCurrencyID),
	}

	queryMods = append(queryMods, mods...)

	query := Currencies(queryMods...)
	queries.SetFrom(query.Query, "\"currency\"")

	return query
}

// LoadSourceCurrency allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (currentChartDataMinutelyL) LoadSourceCurrency(e boil.Executor, singular bool, maybeCurrentChartDataMinutely interface{}, mods queries.Applicator) error {
	var slice []*CurrentChartDataMinutely
	var object *CurrentChartDataMinutely

	if singular {
		object = maybeCurrentChartDataMinutely.(*CurrentChartDataMinutely)
	} else {
		slice = *maybeCurrentChartDataMinutely.(*[]*CurrentChartDataMinutely)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &currentChartDataMinutelyR{}
		}
		args = append(args, object.SourceCurrencyID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &currentChartDataMinutelyR{}
			}

			for _, a := range args {
				if a == obj.SourceCurrencyID {
					continue Outer
				}
			}

			args = append(args, obj.SourceCurrencyID)
		}
	}

	query := NewQuery(qm.From(`currency`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Currency")
	}

	var resultSlice []*Currency
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Currency")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for currency")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for currency")
	}

	if len(currentChartDataMinutelyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SourceCurrency = foreign
		if foreign.R == nil {
			foreign.R = &currencyR{}
		}
		foreign.R.SourceCurrencyCurrentChartDataMinutelies = append(foreign.R.SourceCurrencyCurrentChartDataMinutelies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SourceCurrencyID == foreign.ID {
				local.R.SourceCurrency = foreign
				if foreign.R == nil {
					foreign.R = &currencyR{}
				}
				foreign.R.SourceCurrencyCurrentChartDataMinutelies = append(foreign.R.SourceCurrencyCurrentChartDataMinutelies, local)
				break
			}
		}
	}

	return nil
}

// LoadDestinationCurrency allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (currentChartDataMinutelyL) LoadDestinationCurrency(e boil.Executor, singular bool, maybeCurrentChartDataMinutely interface{}, mods queries.Applicator) error {
	var slice []*CurrentChartDataMinutely
	var object *CurrentChartDataMinutely

	if singular {
		object = maybeCurrentChartDataMinutely.(*CurrentChartDataMinutely)
	} else {
		slice = *maybeCurrentChartDataMinutely.(*[]*CurrentChartDataMinutely)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &currentChartDataMinutelyR{}
		}
		args = append(args, object.DestinationCurrencyID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &currentChartDataMinutelyR{}
			}

			for _, a := range args {
				if a == obj.DestinationCurrencyID {
					continue Outer
				}
			}

			args = append(args, obj.DestinationCurrencyID)
		}
	}

	query := NewQuery(qm.From(`currency`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Currency")
	}

	var resultSlice []*Currency
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Currency")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for currency")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for currency")
	}

	if len(currentChartDataMinutelyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DestinationCurrency = foreign
		if foreign.R == nil {
			foreign.R = &currencyR{}
		}
		foreign.R.DestinationCurrencyCurrentChartDataMinutelies = append(foreign.R.DestinationCurrencyCurrentChartDataMinutelies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DestinationCurrencyID == foreign.ID {
				local.R.DestinationCurrency = foreign
				if foreign.R == nil {
					foreign.R = &currencyR{}
				}
				foreign.R.DestinationCurrencyCurrentChartDataMinutelies = append(foreign.R.DestinationCurrencyCurrentChartDataMinutelies, local)
				break
			}
		}
	}

	return nil
}

// SetSourceCurrency of the currentChartDataMinutely to the related item.
// Sets o.R.SourceCurrency to related.
// Adds o to related.R.SourceCurrencyCurrentChartDataMinutelies.
func (o *CurrentChartDataMinutely) SetSourceCurrency(exec boil.Executor, insert bool, related *Currency) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"current_chart_data_minutely\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"source_currency_id"}),
		strmangle.WhereClause("\"", "\"", 2, currentChartDataMinutelyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SourceCurrencyID = related.ID
	if o.R == nil {
		o.R = &currentChartDataMinutelyR{
			SourceCurrency: related,
		}
	} else {
		o.R.SourceCurrency = related
	}

	if related.R == nil {
		related.R = &currencyR{
			SourceCurrencyCurrentChartDataMinutelies: CurrentChartDataMinutelySlice{o},
		}
	} else {
		related.R.SourceCurrencyCurrentChartDataMinutelies = append(related.R.SourceCurrencyCurrentChartDataMinutelies, o)
	}

	return nil
}

// SetDestinationCurrency of the currentChartDataMinutely to the related item.
// Sets o.R.DestinationCurrency to related.
// Adds o to related.R.DestinationCurrencyCurrentChartDataMinutelies.
func (o *CurrentChartDataMinutely) SetDestinationCurrency(exec boil.Executor, insert bool, related *Currency) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"current_chart_data_minutely\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"destination_currency_id"}),
		strmangle.WhereClause("\"", "\"", 2, currentChartDataMinutelyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DestinationCurrencyID = related.ID
	if o.R == nil {
		o.R = &currentChartDataMinutelyR{
			DestinationCurrency: related,
		}
	} else {
		o.R.DestinationCurrency = related
	}

	if related.R == nil {
		related.R = &currencyR{
			DestinationCurrencyCurrentChartDataMinutelies: CurrentChartDataMinutelySlice{o},
		}
	} else {
		related.R.DestinationCurrencyCurrentChartDataMinutelies = append(related.R.DestinationCurrencyCurrentChartDataMinutelies, o)
	}

	return nil
}

// CurrentChartDataMinutelies retrieves all the records using an executor.
func CurrentChartDataMinutelies(mods ...qm.QueryMod) currentChartDataMinutelyQuery {
	mods = append(mods, qm.From("\"current_chart_data_minutely\""))
	return currentChartDataMinutelyQuery{NewQuery(mods...)}
}

// FindCurrentChartDataMinutely retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCurrentChartDataMinutely(exec boil.Executor, iD int, selectCols ...string) (*CurrentChartDataMinutely, error) {
	currentChartDataMinutelyObj := &CurrentChartDataMinutely{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"current_chart_data_minutely\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, currentChartDataMinutelyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from current_chart_data_minutely")
	}

	return currentChartDataMinutelyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CurrentChartDataMinutely) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no current_chart_data_minutely provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(currentChartDataMinutelyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	currentChartDataMinutelyInsertCacheMut.RLock()
	cache, cached := currentChartDataMinutelyInsertCache[key]
	currentChartDataMinutelyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			currentChartDataMinutelyColumns,
			currentChartDataMinutelyColumnsWithDefault,
			currentChartDataMinutelyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(currentChartDataMinutelyType, currentChartDataMinutelyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(currentChartDataMinutelyType, currentChartDataMinutelyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"current_chart_data_minutely\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"current_chart_data_minutely\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into current_chart_data_minutely")
	}

	if !cached {
		currentChartDataMinutelyInsertCacheMut.Lock()
		currentChartDataMinutelyInsertCache[key] = cache
		currentChartDataMinutelyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the CurrentChartDataMinutely.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CurrentChartDataMinutely) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	currentChartDataMinutelyUpdateCacheMut.RLock()
	cache, cached := currentChartDataMinutelyUpdateCache[key]
	currentChartDataMinutelyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			currentChartDataMinutelyColumns,
			currentChartDataMinutelyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update current_chart_data_minutely, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"current_chart_data_minutely\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, currentChartDataMinutelyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(currentChartDataMinutelyType, currentChartDataMinutelyMapping, append(wl, currentChartDataMinutelyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update current_chart_data_minutely row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for current_chart_data_minutely")
	}

	if !cached {
		currentChartDataMinutelyUpdateCacheMut.Lock()
		currentChartDataMinutelyUpdateCache[key] = cache
		currentChartDataMinutelyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q currentChartDataMinutelyQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for current_chart_data_minutely")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for current_chart_data_minutely")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CurrentChartDataMinutelySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currentChartDataMinutelyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"current_chart_data_minutely\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, currentChartDataMinutelyPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in currentChartDataMinutely slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all currentChartDataMinutely")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CurrentChartDataMinutely) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no current_chart_data_minutely provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(currentChartDataMinutelyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	currentChartDataMinutelyUpsertCacheMut.RLock()
	cache, cached := currentChartDataMinutelyUpsertCache[key]
	currentChartDataMinutelyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			currentChartDataMinutelyColumns,
			currentChartDataMinutelyColumnsWithDefault,
			currentChartDataMinutelyColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			currentChartDataMinutelyColumns,
			currentChartDataMinutelyPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert current_chart_data_minutely, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(currentChartDataMinutelyPrimaryKeyColumns))
			copy(conflict, currentChartDataMinutelyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"current_chart_data_minutely\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(currentChartDataMinutelyType, currentChartDataMinutelyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(currentChartDataMinutelyType, currentChartDataMinutelyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert current_chart_data_minutely")
	}

	if !cached {
		currentChartDataMinutelyUpsertCacheMut.Lock()
		currentChartDataMinutelyUpsertCache[key] = cache
		currentChartDataMinutelyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single CurrentChartDataMinutely record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CurrentChartDataMinutely) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CurrentChartDataMinutely provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), currentChartDataMinutelyPrimaryKeyMapping)
	sql := "DELETE FROM \"current_chart_data_minutely\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from current_chart_data_minutely")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for current_chart_data_minutely")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q currentChartDataMinutelyQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no currentChartDataMinutelyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from current_chart_data_minutely")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for current_chart_data_minutely")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CurrentChartDataMinutelySlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CurrentChartDataMinutely slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(currentChartDataMinutelyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currentChartDataMinutelyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"current_chart_data_minutely\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, currentChartDataMinutelyPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from currentChartDataMinutely slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for current_chart_data_minutely")
	}

	if len(currentChartDataMinutelyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CurrentChartDataMinutely) Reload(exec boil.Executor) error {
	ret, err := FindCurrentChartDataMinutely(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CurrentChartDataMinutelySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CurrentChartDataMinutelySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currentChartDataMinutelyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"current_chart_data_minutely\".* FROM \"current_chart_data_minutely\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, currentChartDataMinutelyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CurrentChartDataMinutelySlice")
	}

	*o = slice

	return nil
}

// CurrentChartDataMinutelyExists checks if the CurrentChartDataMinutely row exists.
func CurrentChartDataMinutelyExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"current_chart_data_minutely\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if current_chart_data_minutely exists")
	}

	return exists, nil
}
