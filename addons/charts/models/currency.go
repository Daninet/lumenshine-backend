// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Currency is an object representing the database table.
type Currency struct {
	ID             int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CurrencyCode   string    `boil:"currency_code" json:"currency_code" toml:"currency_code" yaml:"currency_code"`
	CurrencyName   string    `boil:"currency_name" json:"currency_name" toml:"currency_name" yaml:"currency_name"`
	CurrencyIssuer string    `boil:"currency_issuer" json:"currency_issuer" toml:"currency_issuer" yaml:"currency_issuer"`
	CreatedAt      time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UpdatedBy      string    `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`

	R *currencyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L currencyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CurrencyColumns = struct {
	ID             string
	CurrencyCode   string
	CurrencyName   string
	CurrencyIssuer string
	CreatedAt      string
	UpdatedAt      string
	UpdatedBy      string
}{
	ID:             "id",
	CurrencyCode:   "currency_code",
	CurrencyName:   "currency_name",
	CurrencyIssuer: "currency_issuer",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	UpdatedBy:      "updated_by",
}

// CurrencyRels is where relationship names are stored.
var CurrencyRels = struct {
	SourceCurrencyCurrentChartDataHourlies        string
	DestinationCurrencyCurrentChartDataHourlies   string
	SourceCurrencyCurrentChartDataMinutelies      string
	DestinationCurrencyCurrentChartDataMinutelies string
	SourceCurrencyHistoryChartData                string
	DestinationCurrencyHistoryChartData           string
}{
	SourceCurrencyCurrentChartDataHourlies:        "SourceCurrencyCurrentChartDataHourlies",
	DestinationCurrencyCurrentChartDataHourlies:   "DestinationCurrencyCurrentChartDataHourlies",
	SourceCurrencyCurrentChartDataMinutelies:      "SourceCurrencyCurrentChartDataMinutelies",
	DestinationCurrencyCurrentChartDataMinutelies: "DestinationCurrencyCurrentChartDataMinutelies",
	SourceCurrencyHistoryChartData:                "SourceCurrencyHistoryChartData",
	DestinationCurrencyHistoryChartData:           "DestinationCurrencyHistoryChartData",
}

// currencyR is where relationships are stored.
type currencyR struct {
	SourceCurrencyCurrentChartDataHourlies        CurrentChartDataHourlySlice
	DestinationCurrencyCurrentChartDataHourlies   CurrentChartDataHourlySlice
	SourceCurrencyCurrentChartDataMinutelies      CurrentChartDataMinutelySlice
	DestinationCurrencyCurrentChartDataMinutelies CurrentChartDataMinutelySlice
	SourceCurrencyHistoryChartData                HistoryChartDatumSlice
	DestinationCurrencyHistoryChartData           HistoryChartDatumSlice
}

// NewStruct creates a new relationship struct
func (*currencyR) NewStruct() *currencyR {
	return &currencyR{}
}

// currencyL is where Load methods for each relationship are stored.
type currencyL struct{}

var (
	currencyColumns               = []string{"id", "currency_code", "currency_name", "currency_issuer", "created_at", "updated_at", "updated_by"}
	currencyColumnsWithoutDefault = []string{"currency_code", "currency_name", "currency_issuer", "updated_by"}
	currencyColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	currencyPrimaryKeyColumns     = []string{"id"}
)

type (
	// CurrencySlice is an alias for a slice of pointers to Currency.
	// This should generally be used opposed to []Currency.
	CurrencySlice []*Currency
	// CurrencyHook is the signature for custom Currency hook methods
	CurrencyHook func(boil.Executor, *Currency) error

	currencyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	currencyType                 = reflect.TypeOf(&Currency{})
	currencyMapping              = queries.MakeStructMapping(currencyType)
	currencyPrimaryKeyMapping, _ = queries.BindMapping(currencyType, currencyMapping, currencyPrimaryKeyColumns)
	currencyInsertCacheMut       sync.RWMutex
	currencyInsertCache          = make(map[string]insertCache)
	currencyUpdateCacheMut       sync.RWMutex
	currencyUpdateCache          = make(map[string]updateCache)
	currencyUpsertCacheMut       sync.RWMutex
	currencyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var currencyBeforeInsertHooks []CurrencyHook
var currencyBeforeUpdateHooks []CurrencyHook
var currencyBeforeDeleteHooks []CurrencyHook
var currencyBeforeUpsertHooks []CurrencyHook

var currencyAfterInsertHooks []CurrencyHook
var currencyAfterSelectHooks []CurrencyHook
var currencyAfterUpdateHooks []CurrencyHook
var currencyAfterDeleteHooks []CurrencyHook
var currencyAfterUpsertHooks []CurrencyHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Currency) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range currencyBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Currency) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range currencyBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Currency) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range currencyBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Currency) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range currencyBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Currency) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range currencyAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Currency) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range currencyAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Currency) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range currencyAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Currency) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range currencyAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Currency) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range currencyAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCurrencyHook registers your hook function for all future operations.
func AddCurrencyHook(hookPoint boil.HookPoint, currencyHook CurrencyHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		currencyBeforeInsertHooks = append(currencyBeforeInsertHooks, currencyHook)
	case boil.BeforeUpdateHook:
		currencyBeforeUpdateHooks = append(currencyBeforeUpdateHooks, currencyHook)
	case boil.BeforeDeleteHook:
		currencyBeforeDeleteHooks = append(currencyBeforeDeleteHooks, currencyHook)
	case boil.BeforeUpsertHook:
		currencyBeforeUpsertHooks = append(currencyBeforeUpsertHooks, currencyHook)
	case boil.AfterInsertHook:
		currencyAfterInsertHooks = append(currencyAfterInsertHooks, currencyHook)
	case boil.AfterSelectHook:
		currencyAfterSelectHooks = append(currencyAfterSelectHooks, currencyHook)
	case boil.AfterUpdateHook:
		currencyAfterUpdateHooks = append(currencyAfterUpdateHooks, currencyHook)
	case boil.AfterDeleteHook:
		currencyAfterDeleteHooks = append(currencyAfterDeleteHooks, currencyHook)
	case boil.AfterUpsertHook:
		currencyAfterUpsertHooks = append(currencyAfterUpsertHooks, currencyHook)
	}
}

// One returns a single currency record from the query.
func (q currencyQuery) One(exec boil.Executor) (*Currency, error) {
	o := &Currency{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for currency")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Currency records from the query.
func (q currencyQuery) All(exec boil.Executor) (CurrencySlice, error) {
	var o []*Currency

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Currency slice")
	}

	if len(currencyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Currency records in the query.
func (q currencyQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count currency rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q currencyQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if currency exists")
	}

	return count > 0, nil
}

// SourceCurrencyCurrentChartDataHourlies retrieves all the current_chart_data_hourly's CurrentChartDataHourlies with an executor via source_currency_id column.
func (o *Currency) SourceCurrencyCurrentChartDataHourlies(mods ...qm.QueryMod) currentChartDataHourlyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"current_chart_data_hourly\".\"source_currency_id\"=?", o.ID),
	)

	query := CurrentChartDataHourlies(queryMods...)
	queries.SetFrom(query.Query, "\"current_chart_data_hourly\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"current_chart_data_hourly\".*"})
	}

	return query
}

// DestinationCurrencyCurrentChartDataHourlies retrieves all the current_chart_data_hourly's CurrentChartDataHourlies with an executor via destination_currency_id column.
func (o *Currency) DestinationCurrencyCurrentChartDataHourlies(mods ...qm.QueryMod) currentChartDataHourlyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"current_chart_data_hourly\".\"destination_currency_id\"=?", o.ID),
	)

	query := CurrentChartDataHourlies(queryMods...)
	queries.SetFrom(query.Query, "\"current_chart_data_hourly\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"current_chart_data_hourly\".*"})
	}

	return query
}

// SourceCurrencyCurrentChartDataMinutelies retrieves all the current_chart_data_minutely's CurrentChartDataMinutelies with an executor via source_currency_id column.
func (o *Currency) SourceCurrencyCurrentChartDataMinutelies(mods ...qm.QueryMod) currentChartDataMinutelyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"current_chart_data_minutely\".\"source_currency_id\"=?", o.ID),
	)

	query := CurrentChartDataMinutelies(queryMods...)
	queries.SetFrom(query.Query, "\"current_chart_data_minutely\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"current_chart_data_minutely\".*"})
	}

	return query
}

// DestinationCurrencyCurrentChartDataMinutelies retrieves all the current_chart_data_minutely's CurrentChartDataMinutelies with an executor via destination_currency_id column.
func (o *Currency) DestinationCurrencyCurrentChartDataMinutelies(mods ...qm.QueryMod) currentChartDataMinutelyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"current_chart_data_minutely\".\"destination_currency_id\"=?", o.ID),
	)

	query := CurrentChartDataMinutelies(queryMods...)
	queries.SetFrom(query.Query, "\"current_chart_data_minutely\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"current_chart_data_minutely\".*"})
	}

	return query
}

// SourceCurrencyHistoryChartData retrieves all the history_chart_datum's HistoryChartData with an executor via source_currency_id column.
func (o *Currency) SourceCurrencyHistoryChartData(mods ...qm.QueryMod) historyChartDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"history_chart_data\".\"source_currency_id\"=?", o.ID),
	)

	query := HistoryChartData(queryMods...)
	queries.SetFrom(query.Query, "\"history_chart_data\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"history_chart_data\".*"})
	}

	return query
}

// DestinationCurrencyHistoryChartData retrieves all the history_chart_datum's HistoryChartData with an executor via destination_currency_id column.
func (o *Currency) DestinationCurrencyHistoryChartData(mods ...qm.QueryMod) historyChartDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"history_chart_data\".\"destination_currency_id\"=?", o.ID),
	)

	query := HistoryChartData(queryMods...)
	queries.SetFrom(query.Query, "\"history_chart_data\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"history_chart_data\".*"})
	}

	return query
}

// LoadSourceCurrencyCurrentChartDataHourlies allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (currencyL) LoadSourceCurrencyCurrentChartDataHourlies(e boil.Executor, singular bool, maybeCurrency interface{}, mods queries.Applicator) error {
	var slice []*Currency
	var object *Currency

	if singular {
		object = maybeCurrency.(*Currency)
	} else {
		slice = *maybeCurrency.(*[]*Currency)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &currencyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &currencyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`current_chart_data_hourly`), qm.WhereIn(`source_currency_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load current_chart_data_hourly")
	}

	var resultSlice []*CurrentChartDataHourly
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice current_chart_data_hourly")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on current_chart_data_hourly")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for current_chart_data_hourly")
	}

	if len(currentChartDataHourlyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SourceCurrencyCurrentChartDataHourlies = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &currentChartDataHourlyR{}
			}
			foreign.R.SourceCurrency = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SourceCurrencyID {
				local.R.SourceCurrencyCurrentChartDataHourlies = append(local.R.SourceCurrencyCurrentChartDataHourlies, foreign)
				if foreign.R == nil {
					foreign.R = &currentChartDataHourlyR{}
				}
				foreign.R.SourceCurrency = local
				break
			}
		}
	}

	return nil
}

// LoadDestinationCurrencyCurrentChartDataHourlies allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (currencyL) LoadDestinationCurrencyCurrentChartDataHourlies(e boil.Executor, singular bool, maybeCurrency interface{}, mods queries.Applicator) error {
	var slice []*Currency
	var object *Currency

	if singular {
		object = maybeCurrency.(*Currency)
	} else {
		slice = *maybeCurrency.(*[]*Currency)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &currencyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &currencyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`current_chart_data_hourly`), qm.WhereIn(`destination_currency_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load current_chart_data_hourly")
	}

	var resultSlice []*CurrentChartDataHourly
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice current_chart_data_hourly")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on current_chart_data_hourly")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for current_chart_data_hourly")
	}

	if len(currentChartDataHourlyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DestinationCurrencyCurrentChartDataHourlies = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &currentChartDataHourlyR{}
			}
			foreign.R.DestinationCurrency = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DestinationCurrencyID {
				local.R.DestinationCurrencyCurrentChartDataHourlies = append(local.R.DestinationCurrencyCurrentChartDataHourlies, foreign)
				if foreign.R == nil {
					foreign.R = &currentChartDataHourlyR{}
				}
				foreign.R.DestinationCurrency = local
				break
			}
		}
	}

	return nil
}

// LoadSourceCurrencyCurrentChartDataMinutelies allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (currencyL) LoadSourceCurrencyCurrentChartDataMinutelies(e boil.Executor, singular bool, maybeCurrency interface{}, mods queries.Applicator) error {
	var slice []*Currency
	var object *Currency

	if singular {
		object = maybeCurrency.(*Currency)
	} else {
		slice = *maybeCurrency.(*[]*Currency)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &currencyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &currencyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`current_chart_data_minutely`), qm.WhereIn(`source_currency_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load current_chart_data_minutely")
	}

	var resultSlice []*CurrentChartDataMinutely
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice current_chart_data_minutely")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on current_chart_data_minutely")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for current_chart_data_minutely")
	}

	if len(currentChartDataMinutelyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SourceCurrencyCurrentChartDataMinutelies = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &currentChartDataMinutelyR{}
			}
			foreign.R.SourceCurrency = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SourceCurrencyID {
				local.R.SourceCurrencyCurrentChartDataMinutelies = append(local.R.SourceCurrencyCurrentChartDataMinutelies, foreign)
				if foreign.R == nil {
					foreign.R = &currentChartDataMinutelyR{}
				}
				foreign.R.SourceCurrency = local
				break
			}
		}
	}

	return nil
}

// LoadDestinationCurrencyCurrentChartDataMinutelies allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (currencyL) LoadDestinationCurrencyCurrentChartDataMinutelies(e boil.Executor, singular bool, maybeCurrency interface{}, mods queries.Applicator) error {
	var slice []*Currency
	var object *Currency

	if singular {
		object = maybeCurrency.(*Currency)
	} else {
		slice = *maybeCurrency.(*[]*Currency)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &currencyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &currencyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`current_chart_data_minutely`), qm.WhereIn(`destination_currency_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load current_chart_data_minutely")
	}

	var resultSlice []*CurrentChartDataMinutely
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice current_chart_data_minutely")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on current_chart_data_minutely")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for current_chart_data_minutely")
	}

	if len(currentChartDataMinutelyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DestinationCurrencyCurrentChartDataMinutelies = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &currentChartDataMinutelyR{}
			}
			foreign.R.DestinationCurrency = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DestinationCurrencyID {
				local.R.DestinationCurrencyCurrentChartDataMinutelies = append(local.R.DestinationCurrencyCurrentChartDataMinutelies, foreign)
				if foreign.R == nil {
					foreign.R = &currentChartDataMinutelyR{}
				}
				foreign.R.DestinationCurrency = local
				break
			}
		}
	}

	return nil
}

// LoadSourceCurrencyHistoryChartData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (currencyL) LoadSourceCurrencyHistoryChartData(e boil.Executor, singular bool, maybeCurrency interface{}, mods queries.Applicator) error {
	var slice []*Currency
	var object *Currency

	if singular {
		object = maybeCurrency.(*Currency)
	} else {
		slice = *maybeCurrency.(*[]*Currency)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &currencyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &currencyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`history_chart_data`), qm.WhereIn(`source_currency_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load history_chart_data")
	}

	var resultSlice []*HistoryChartDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice history_chart_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on history_chart_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for history_chart_data")
	}

	if len(historyChartDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SourceCurrencyHistoryChartData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &historyChartDatumR{}
			}
			foreign.R.SourceCurrency = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SourceCurrencyID {
				local.R.SourceCurrencyHistoryChartData = append(local.R.SourceCurrencyHistoryChartData, foreign)
				if foreign.R == nil {
					foreign.R = &historyChartDatumR{}
				}
				foreign.R.SourceCurrency = local
				break
			}
		}
	}

	return nil
}

// LoadDestinationCurrencyHistoryChartData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (currencyL) LoadDestinationCurrencyHistoryChartData(e boil.Executor, singular bool, maybeCurrency interface{}, mods queries.Applicator) error {
	var slice []*Currency
	var object *Currency

	if singular {
		object = maybeCurrency.(*Currency)
	} else {
		slice = *maybeCurrency.(*[]*Currency)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &currencyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &currencyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`history_chart_data`), qm.WhereIn(`destination_currency_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load history_chart_data")
	}

	var resultSlice []*HistoryChartDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice history_chart_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on history_chart_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for history_chart_data")
	}

	if len(historyChartDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DestinationCurrencyHistoryChartData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &historyChartDatumR{}
			}
			foreign.R.DestinationCurrency = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DestinationCurrencyID {
				local.R.DestinationCurrencyHistoryChartData = append(local.R.DestinationCurrencyHistoryChartData, foreign)
				if foreign.R == nil {
					foreign.R = &historyChartDatumR{}
				}
				foreign.R.DestinationCurrency = local
				break
			}
		}
	}

	return nil
}

// AddSourceCurrencyCurrentChartDataHourlies adds the given related objects to the existing relationships
// of the currency, optionally inserting them as new records.
// Appends related to o.R.SourceCurrencyCurrentChartDataHourlies.
// Sets related.R.SourceCurrency appropriately.
func (o *Currency) AddSourceCurrencyCurrentChartDataHourlies(exec boil.Executor, insert bool, related ...*CurrentChartDataHourly) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SourceCurrencyID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"current_chart_data_hourly\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"source_currency_id"}),
				strmangle.WhereClause("\"", "\"", 2, currentChartDataHourlyPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SourceCurrencyID = o.ID
		}
	}

	if o.R == nil {
		o.R = &currencyR{
			SourceCurrencyCurrentChartDataHourlies: related,
		}
	} else {
		o.R.SourceCurrencyCurrentChartDataHourlies = append(o.R.SourceCurrencyCurrentChartDataHourlies, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &currentChartDataHourlyR{
				SourceCurrency: o,
			}
		} else {
			rel.R.SourceCurrency = o
		}
	}
	return nil
}

// AddDestinationCurrencyCurrentChartDataHourlies adds the given related objects to the existing relationships
// of the currency, optionally inserting them as new records.
// Appends related to o.R.DestinationCurrencyCurrentChartDataHourlies.
// Sets related.R.DestinationCurrency appropriately.
func (o *Currency) AddDestinationCurrencyCurrentChartDataHourlies(exec boil.Executor, insert bool, related ...*CurrentChartDataHourly) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DestinationCurrencyID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"current_chart_data_hourly\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"destination_currency_id"}),
				strmangle.WhereClause("\"", "\"", 2, currentChartDataHourlyPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DestinationCurrencyID = o.ID
		}
	}

	if o.R == nil {
		o.R = &currencyR{
			DestinationCurrencyCurrentChartDataHourlies: related,
		}
	} else {
		o.R.DestinationCurrencyCurrentChartDataHourlies = append(o.R.DestinationCurrencyCurrentChartDataHourlies, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &currentChartDataHourlyR{
				DestinationCurrency: o,
			}
		} else {
			rel.R.DestinationCurrency = o
		}
	}
	return nil
}

// AddSourceCurrencyCurrentChartDataMinutelies adds the given related objects to the existing relationships
// of the currency, optionally inserting them as new records.
// Appends related to o.R.SourceCurrencyCurrentChartDataMinutelies.
// Sets related.R.SourceCurrency appropriately.
func (o *Currency) AddSourceCurrencyCurrentChartDataMinutelies(exec boil.Executor, insert bool, related ...*CurrentChartDataMinutely) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SourceCurrencyID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"current_chart_data_minutely\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"source_currency_id"}),
				strmangle.WhereClause("\"", "\"", 2, currentChartDataMinutelyPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SourceCurrencyID = o.ID
		}
	}

	if o.R == nil {
		o.R = &currencyR{
			SourceCurrencyCurrentChartDataMinutelies: related,
		}
	} else {
		o.R.SourceCurrencyCurrentChartDataMinutelies = append(o.R.SourceCurrencyCurrentChartDataMinutelies, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &currentChartDataMinutelyR{
				SourceCurrency: o,
			}
		} else {
			rel.R.SourceCurrency = o
		}
	}
	return nil
}

// AddDestinationCurrencyCurrentChartDataMinutelies adds the given related objects to the existing relationships
// of the currency, optionally inserting them as new records.
// Appends related to o.R.DestinationCurrencyCurrentChartDataMinutelies.
// Sets related.R.DestinationCurrency appropriately.
func (o *Currency) AddDestinationCurrencyCurrentChartDataMinutelies(exec boil.Executor, insert bool, related ...*CurrentChartDataMinutely) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DestinationCurrencyID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"current_chart_data_minutely\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"destination_currency_id"}),
				strmangle.WhereClause("\"", "\"", 2, currentChartDataMinutelyPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DestinationCurrencyID = o.ID
		}
	}

	if o.R == nil {
		o.R = &currencyR{
			DestinationCurrencyCurrentChartDataMinutelies: related,
		}
	} else {
		o.R.DestinationCurrencyCurrentChartDataMinutelies = append(o.R.DestinationCurrencyCurrentChartDataMinutelies, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &currentChartDataMinutelyR{
				DestinationCurrency: o,
			}
		} else {
			rel.R.DestinationCurrency = o
		}
	}
	return nil
}

// AddSourceCurrencyHistoryChartData adds the given related objects to the existing relationships
// of the currency, optionally inserting them as new records.
// Appends related to o.R.SourceCurrencyHistoryChartData.
// Sets related.R.SourceCurrency appropriately.
func (o *Currency) AddSourceCurrencyHistoryChartData(exec boil.Executor, insert bool, related ...*HistoryChartDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SourceCurrencyID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"history_chart_data\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"source_currency_id"}),
				strmangle.WhereClause("\"", "\"", 2, historyChartDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SourceCurrencyID = o.ID
		}
	}

	if o.R == nil {
		o.R = &currencyR{
			SourceCurrencyHistoryChartData: related,
		}
	} else {
		o.R.SourceCurrencyHistoryChartData = append(o.R.SourceCurrencyHistoryChartData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &historyChartDatumR{
				SourceCurrency: o,
			}
		} else {
			rel.R.SourceCurrency = o
		}
	}
	return nil
}

// AddDestinationCurrencyHistoryChartData adds the given related objects to the existing relationships
// of the currency, optionally inserting them as new records.
// Appends related to o.R.DestinationCurrencyHistoryChartData.
// Sets related.R.DestinationCurrency appropriately.
func (o *Currency) AddDestinationCurrencyHistoryChartData(exec boil.Executor, insert bool, related ...*HistoryChartDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DestinationCurrencyID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"history_chart_data\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"destination_currency_id"}),
				strmangle.WhereClause("\"", "\"", 2, historyChartDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DestinationCurrencyID = o.ID
		}
	}

	if o.R == nil {
		o.R = &currencyR{
			DestinationCurrencyHistoryChartData: related,
		}
	} else {
		o.R.DestinationCurrencyHistoryChartData = append(o.R.DestinationCurrencyHistoryChartData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &historyChartDatumR{
				DestinationCurrency: o,
			}
		} else {
			rel.R.DestinationCurrency = o
		}
	}
	return nil
}

// Currencies retrieves all the records using an executor.
func Currencies(mods ...qm.QueryMod) currencyQuery {
	mods = append(mods, qm.From("\"currency\""))
	return currencyQuery{NewQuery(mods...)}
}

// FindCurrency retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCurrency(exec boil.Executor, iD int, selectCols ...string) (*Currency, error) {
	currencyObj := &Currency{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"currency\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, currencyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from currency")
	}

	return currencyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Currency) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no currency provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(currencyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	currencyInsertCacheMut.RLock()
	cache, cached := currencyInsertCache[key]
	currencyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			currencyColumns,
			currencyColumnsWithDefault,
			currencyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(currencyType, currencyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(currencyType, currencyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"currency\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"currency\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into currency")
	}

	if !cached {
		currencyInsertCacheMut.Lock()
		currencyInsertCache[key] = cache
		currencyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Currency.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Currency) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	currencyUpdateCacheMut.RLock()
	cache, cached := currencyUpdateCache[key]
	currencyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			currencyColumns,
			currencyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update currency, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"currency\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, currencyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(currencyType, currencyMapping, append(wl, currencyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update currency row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for currency")
	}

	if !cached {
		currencyUpdateCacheMut.Lock()
		currencyUpdateCache[key] = cache
		currencyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q currencyQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for currency")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for currency")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CurrencySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"currency\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, currencyPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in currency slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all currency")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Currency) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no currency provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(currencyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	currencyUpsertCacheMut.RLock()
	cache, cached := currencyUpsertCache[key]
	currencyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			currencyColumns,
			currencyColumnsWithDefault,
			currencyColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			currencyColumns,
			currencyPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert currency, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(currencyPrimaryKeyColumns))
			copy(conflict, currencyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"currency\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(currencyType, currencyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(currencyType, currencyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert currency")
	}

	if !cached {
		currencyUpsertCacheMut.Lock()
		currencyUpsertCache[key] = cache
		currencyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Currency record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Currency) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Currency provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), currencyPrimaryKeyMapping)
	sql := "DELETE FROM \"currency\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from currency")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for currency")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q currencyQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no currencyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from currency")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for currency")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CurrencySlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Currency slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(currencyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"currency\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, currencyPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from currency slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for currency")
	}

	if len(currencyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Currency) Reload(exec boil.Executor) error {
	ret, err := FindCurrency(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CurrencySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CurrencySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"currency\".* FROM \"currency\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, currencyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CurrencySlice")
	}

	*o = slice

	return nil
}

// CurrencyExists checks if the Currency row exists.
func CurrencyExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"currency\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if currency exists")
	}

	return exists, nil
}
