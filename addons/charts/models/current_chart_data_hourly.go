// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// CurrentChartDataHourly is an object representing the database table.
type CurrentChartDataHourly struct {
	ID                    int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	ExchangeRateTime      time.Time `boil:"exchange_rate_time" json:"exchange_rate_time" toml:"exchange_rate_time" yaml:"exchange_rate_time"`
	SourceCurrencyID      int       `boil:"source_currency_id" json:"source_currency_id" toml:"source_currency_id" yaml:"source_currency_id"`
	DestinationCurrencyID int       `boil:"destination_currency_id" json:"destination_currency_id" toml:"destination_currency_id" yaml:"destination_currency_id"`
	ExchangeRate          float64   `boil:"exchange_rate" json:"exchange_rate" toml:"exchange_rate" yaml:"exchange_rate"`
	CreatedAt             time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt             time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UpdatedBy             string    `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`

	R *currentChartDataHourlyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L currentChartDataHourlyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CurrentChartDataHourlyColumns = struct {
	ID                    string
	ExchangeRateTime      string
	SourceCurrencyID      string
	DestinationCurrencyID string
	ExchangeRate          string
	CreatedAt             string
	UpdatedAt             string
	UpdatedBy             string
}{
	ID:                    "id",
	ExchangeRateTime:      "exchange_rate_time",
	SourceCurrencyID:      "source_currency_id",
	DestinationCurrencyID: "destination_currency_id",
	ExchangeRate:          "exchange_rate",
	CreatedAt:             "created_at",
	UpdatedAt:             "updated_at",
	UpdatedBy:             "updated_by",
}

// CurrentChartDataHourlyRels is where relationship names are stored.
var CurrentChartDataHourlyRels = struct {
	SourceCurrency      string
	DestinationCurrency string
}{
	SourceCurrency:      "SourceCurrency",
	DestinationCurrency: "DestinationCurrency",
}

// currentChartDataHourlyR is where relationships are stored.
type currentChartDataHourlyR struct {
	SourceCurrency      *Currency
	DestinationCurrency *Currency
}

// NewStruct creates a new relationship struct
func (*currentChartDataHourlyR) NewStruct() *currentChartDataHourlyR {
	return &currentChartDataHourlyR{}
}

// currentChartDataHourlyL is where Load methods for each relationship are stored.
type currentChartDataHourlyL struct{}

var (
	currentChartDataHourlyColumns               = []string{"id", "exchange_rate_time", "source_currency_id", "destination_currency_id", "exchange_rate", "created_at", "updated_at", "updated_by"}
	currentChartDataHourlyColumnsWithoutDefault = []string{"source_currency_id", "destination_currency_id", "exchange_rate", "updated_by"}
	currentChartDataHourlyColumnsWithDefault    = []string{"id", "exchange_rate_time", "created_at", "updated_at"}
	currentChartDataHourlyPrimaryKeyColumns     = []string{"id"}
)

type (
	// CurrentChartDataHourlySlice is an alias for a slice of pointers to CurrentChartDataHourly.
	// This should generally be used opposed to []CurrentChartDataHourly.
	CurrentChartDataHourlySlice []*CurrentChartDataHourly
	// CurrentChartDataHourlyHook is the signature for custom CurrentChartDataHourly hook methods
	CurrentChartDataHourlyHook func(boil.Executor, *CurrentChartDataHourly) error

	currentChartDataHourlyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	currentChartDataHourlyType                 = reflect.TypeOf(&CurrentChartDataHourly{})
	currentChartDataHourlyMapping              = queries.MakeStructMapping(currentChartDataHourlyType)
	currentChartDataHourlyPrimaryKeyMapping, _ = queries.BindMapping(currentChartDataHourlyType, currentChartDataHourlyMapping, currentChartDataHourlyPrimaryKeyColumns)
	currentChartDataHourlyInsertCacheMut       sync.RWMutex
	currentChartDataHourlyInsertCache          = make(map[string]insertCache)
	currentChartDataHourlyUpdateCacheMut       sync.RWMutex
	currentChartDataHourlyUpdateCache          = make(map[string]updateCache)
	currentChartDataHourlyUpsertCacheMut       sync.RWMutex
	currentChartDataHourlyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var currentChartDataHourlyBeforeInsertHooks []CurrentChartDataHourlyHook
var currentChartDataHourlyBeforeUpdateHooks []CurrentChartDataHourlyHook
var currentChartDataHourlyBeforeDeleteHooks []CurrentChartDataHourlyHook
var currentChartDataHourlyBeforeUpsertHooks []CurrentChartDataHourlyHook

var currentChartDataHourlyAfterInsertHooks []CurrentChartDataHourlyHook
var currentChartDataHourlyAfterSelectHooks []CurrentChartDataHourlyHook
var currentChartDataHourlyAfterUpdateHooks []CurrentChartDataHourlyHook
var currentChartDataHourlyAfterDeleteHooks []CurrentChartDataHourlyHook
var currentChartDataHourlyAfterUpsertHooks []CurrentChartDataHourlyHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CurrentChartDataHourly) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range currentChartDataHourlyBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CurrentChartDataHourly) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range currentChartDataHourlyBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CurrentChartDataHourly) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range currentChartDataHourlyBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CurrentChartDataHourly) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range currentChartDataHourlyBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CurrentChartDataHourly) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range currentChartDataHourlyAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CurrentChartDataHourly) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range currentChartDataHourlyAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CurrentChartDataHourly) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range currentChartDataHourlyAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CurrentChartDataHourly) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range currentChartDataHourlyAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CurrentChartDataHourly) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range currentChartDataHourlyAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCurrentChartDataHourlyHook registers your hook function for all future operations.
func AddCurrentChartDataHourlyHook(hookPoint boil.HookPoint, currentChartDataHourlyHook CurrentChartDataHourlyHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		currentChartDataHourlyBeforeInsertHooks = append(currentChartDataHourlyBeforeInsertHooks, currentChartDataHourlyHook)
	case boil.BeforeUpdateHook:
		currentChartDataHourlyBeforeUpdateHooks = append(currentChartDataHourlyBeforeUpdateHooks, currentChartDataHourlyHook)
	case boil.BeforeDeleteHook:
		currentChartDataHourlyBeforeDeleteHooks = append(currentChartDataHourlyBeforeDeleteHooks, currentChartDataHourlyHook)
	case boil.BeforeUpsertHook:
		currentChartDataHourlyBeforeUpsertHooks = append(currentChartDataHourlyBeforeUpsertHooks, currentChartDataHourlyHook)
	case boil.AfterInsertHook:
		currentChartDataHourlyAfterInsertHooks = append(currentChartDataHourlyAfterInsertHooks, currentChartDataHourlyHook)
	case boil.AfterSelectHook:
		currentChartDataHourlyAfterSelectHooks = append(currentChartDataHourlyAfterSelectHooks, currentChartDataHourlyHook)
	case boil.AfterUpdateHook:
		currentChartDataHourlyAfterUpdateHooks = append(currentChartDataHourlyAfterUpdateHooks, currentChartDataHourlyHook)
	case boil.AfterDeleteHook:
		currentChartDataHourlyAfterDeleteHooks = append(currentChartDataHourlyAfterDeleteHooks, currentChartDataHourlyHook)
	case boil.AfterUpsertHook:
		currentChartDataHourlyAfterUpsertHooks = append(currentChartDataHourlyAfterUpsertHooks, currentChartDataHourlyHook)
	}
}

// One returns a single currentChartDataHourly record from the query.
func (q currentChartDataHourlyQuery) One(exec boil.Executor) (*CurrentChartDataHourly, error) {
	o := &CurrentChartDataHourly{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for current_chart_data_hourly")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CurrentChartDataHourly records from the query.
func (q currentChartDataHourlyQuery) All(exec boil.Executor) (CurrentChartDataHourlySlice, error) {
	var o []*CurrentChartDataHourly

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CurrentChartDataHourly slice")
	}

	if len(currentChartDataHourlyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CurrentChartDataHourly records in the query.
func (q currentChartDataHourlyQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count current_chart_data_hourly rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q currentChartDataHourlyQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if current_chart_data_hourly exists")
	}

	return count > 0, nil
}

// SourceCurrency pointed to by the foreign key.
func (o *CurrentChartDataHourly) SourceCurrency(mods ...qm.QueryMod) currencyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.SourceCurrencyID),
	}

	queryMods = append(queryMods, mods...)

	query := Currencies(queryMods...)
	queries.SetFrom(query.Query, "\"currency\"")

	return query
}

// DestinationCurrency pointed to by the foreign key.
func (o *CurrentChartDataHourly) DestinationCurrency(mods ...qm.QueryMod) currencyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.DestinationCurrencyID),
	}

	queryMods = append(queryMods, mods...)

	query := Currencies(queryMods...)
	queries.SetFrom(query.Query, "\"currency\"")

	return query
}

// LoadSourceCurrency allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (currentChartDataHourlyL) LoadSourceCurrency(e boil.Executor, singular bool, maybeCurrentChartDataHourly interface{}, mods queries.Applicator) error {
	var slice []*CurrentChartDataHourly
	var object *CurrentChartDataHourly

	if singular {
		object = maybeCurrentChartDataHourly.(*CurrentChartDataHourly)
	} else {
		slice = *maybeCurrentChartDataHourly.(*[]*CurrentChartDataHourly)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &currentChartDataHourlyR{}
		}
		args = append(args, object.SourceCurrencyID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &currentChartDataHourlyR{}
			}

			for _, a := range args {
				if a == obj.SourceCurrencyID {
					continue Outer
				}
			}

			args = append(args, obj.SourceCurrencyID)
		}
	}

	query := NewQuery(qm.From(`currency`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Currency")
	}

	var resultSlice []*Currency
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Currency")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for currency")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for currency")
	}

	if len(currentChartDataHourlyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SourceCurrency = foreign
		if foreign.R == nil {
			foreign.R = &currencyR{}
		}
		foreign.R.SourceCurrencyCurrentChartDataHourlies = append(foreign.R.SourceCurrencyCurrentChartDataHourlies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SourceCurrencyID == foreign.ID {
				local.R.SourceCurrency = foreign
				if foreign.R == nil {
					foreign.R = &currencyR{}
				}
				foreign.R.SourceCurrencyCurrentChartDataHourlies = append(foreign.R.SourceCurrencyCurrentChartDataHourlies, local)
				break
			}
		}
	}

	return nil
}

// LoadDestinationCurrency allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (currentChartDataHourlyL) LoadDestinationCurrency(e boil.Executor, singular bool, maybeCurrentChartDataHourly interface{}, mods queries.Applicator) error {
	var slice []*CurrentChartDataHourly
	var object *CurrentChartDataHourly

	if singular {
		object = maybeCurrentChartDataHourly.(*CurrentChartDataHourly)
	} else {
		slice = *maybeCurrentChartDataHourly.(*[]*CurrentChartDataHourly)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &currentChartDataHourlyR{}
		}
		args = append(args, object.DestinationCurrencyID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &currentChartDataHourlyR{}
			}

			for _, a := range args {
				if a == obj.DestinationCurrencyID {
					continue Outer
				}
			}

			args = append(args, obj.DestinationCurrencyID)
		}
	}

	query := NewQuery(qm.From(`currency`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Currency")
	}

	var resultSlice []*Currency
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Currency")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for currency")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for currency")
	}

	if len(currentChartDataHourlyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DestinationCurrency = foreign
		if foreign.R == nil {
			foreign.R = &currencyR{}
		}
		foreign.R.DestinationCurrencyCurrentChartDataHourlies = append(foreign.R.DestinationCurrencyCurrentChartDataHourlies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DestinationCurrencyID == foreign.ID {
				local.R.DestinationCurrency = foreign
				if foreign.R == nil {
					foreign.R = &currencyR{}
				}
				foreign.R.DestinationCurrencyCurrentChartDataHourlies = append(foreign.R.DestinationCurrencyCurrentChartDataHourlies, local)
				break
			}
		}
	}

	return nil
}

// SetSourceCurrency of the currentChartDataHourly to the related item.
// Sets o.R.SourceCurrency to related.
// Adds o to related.R.SourceCurrencyCurrentChartDataHourlies.
func (o *CurrentChartDataHourly) SetSourceCurrency(exec boil.Executor, insert bool, related *Currency) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"current_chart_data_hourly\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"source_currency_id"}),
		strmangle.WhereClause("\"", "\"", 2, currentChartDataHourlyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SourceCurrencyID = related.ID
	if o.R == nil {
		o.R = &currentChartDataHourlyR{
			SourceCurrency: related,
		}
	} else {
		o.R.SourceCurrency = related
	}

	if related.R == nil {
		related.R = &currencyR{
			SourceCurrencyCurrentChartDataHourlies: CurrentChartDataHourlySlice{o},
		}
	} else {
		related.R.SourceCurrencyCurrentChartDataHourlies = append(related.R.SourceCurrencyCurrentChartDataHourlies, o)
	}

	return nil
}

// SetDestinationCurrency of the currentChartDataHourly to the related item.
// Sets o.R.DestinationCurrency to related.
// Adds o to related.R.DestinationCurrencyCurrentChartDataHourlies.
func (o *CurrentChartDataHourly) SetDestinationCurrency(exec boil.Executor, insert bool, related *Currency) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"current_chart_data_hourly\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"destination_currency_id"}),
		strmangle.WhereClause("\"", "\"", 2, currentChartDataHourlyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DestinationCurrencyID = related.ID
	if o.R == nil {
		o.R = &currentChartDataHourlyR{
			DestinationCurrency: related,
		}
	} else {
		o.R.DestinationCurrency = related
	}

	if related.R == nil {
		related.R = &currencyR{
			DestinationCurrencyCurrentChartDataHourlies: CurrentChartDataHourlySlice{o},
		}
	} else {
		related.R.DestinationCurrencyCurrentChartDataHourlies = append(related.R.DestinationCurrencyCurrentChartDataHourlies, o)
	}

	return nil
}

// CurrentChartDataHourlies retrieves all the records using an executor.
func CurrentChartDataHourlies(mods ...qm.QueryMod) currentChartDataHourlyQuery {
	mods = append(mods, qm.From("\"current_chart_data_hourly\""))
	return currentChartDataHourlyQuery{NewQuery(mods...)}
}

// FindCurrentChartDataHourly retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCurrentChartDataHourly(exec boil.Executor, iD int, selectCols ...string) (*CurrentChartDataHourly, error) {
	currentChartDataHourlyObj := &CurrentChartDataHourly{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"current_chart_data_hourly\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, currentChartDataHourlyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from current_chart_data_hourly")
	}

	return currentChartDataHourlyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CurrentChartDataHourly) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no current_chart_data_hourly provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(currentChartDataHourlyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	currentChartDataHourlyInsertCacheMut.RLock()
	cache, cached := currentChartDataHourlyInsertCache[key]
	currentChartDataHourlyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			currentChartDataHourlyColumns,
			currentChartDataHourlyColumnsWithDefault,
			currentChartDataHourlyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(currentChartDataHourlyType, currentChartDataHourlyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(currentChartDataHourlyType, currentChartDataHourlyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"current_chart_data_hourly\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"current_chart_data_hourly\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into current_chart_data_hourly")
	}

	if !cached {
		currentChartDataHourlyInsertCacheMut.Lock()
		currentChartDataHourlyInsertCache[key] = cache
		currentChartDataHourlyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the CurrentChartDataHourly.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CurrentChartDataHourly) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	currentChartDataHourlyUpdateCacheMut.RLock()
	cache, cached := currentChartDataHourlyUpdateCache[key]
	currentChartDataHourlyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			currentChartDataHourlyColumns,
			currentChartDataHourlyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update current_chart_data_hourly, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"current_chart_data_hourly\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, currentChartDataHourlyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(currentChartDataHourlyType, currentChartDataHourlyMapping, append(wl, currentChartDataHourlyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update current_chart_data_hourly row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for current_chart_data_hourly")
	}

	if !cached {
		currentChartDataHourlyUpdateCacheMut.Lock()
		currentChartDataHourlyUpdateCache[key] = cache
		currentChartDataHourlyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q currentChartDataHourlyQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for current_chart_data_hourly")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for current_chart_data_hourly")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CurrentChartDataHourlySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currentChartDataHourlyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"current_chart_data_hourly\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, currentChartDataHourlyPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in currentChartDataHourly slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all currentChartDataHourly")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CurrentChartDataHourly) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no current_chart_data_hourly provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(currentChartDataHourlyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	currentChartDataHourlyUpsertCacheMut.RLock()
	cache, cached := currentChartDataHourlyUpsertCache[key]
	currentChartDataHourlyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			currentChartDataHourlyColumns,
			currentChartDataHourlyColumnsWithDefault,
			currentChartDataHourlyColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			currentChartDataHourlyColumns,
			currentChartDataHourlyPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert current_chart_data_hourly, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(currentChartDataHourlyPrimaryKeyColumns))
			copy(conflict, currentChartDataHourlyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"current_chart_data_hourly\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(currentChartDataHourlyType, currentChartDataHourlyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(currentChartDataHourlyType, currentChartDataHourlyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert current_chart_data_hourly")
	}

	if !cached {
		currentChartDataHourlyUpsertCacheMut.Lock()
		currentChartDataHourlyUpsertCache[key] = cache
		currentChartDataHourlyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single CurrentChartDataHourly record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CurrentChartDataHourly) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CurrentChartDataHourly provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), currentChartDataHourlyPrimaryKeyMapping)
	sql := "DELETE FROM \"current_chart_data_hourly\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from current_chart_data_hourly")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for current_chart_data_hourly")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q currentChartDataHourlyQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no currentChartDataHourlyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from current_chart_data_hourly")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for current_chart_data_hourly")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CurrentChartDataHourlySlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CurrentChartDataHourly slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(currentChartDataHourlyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currentChartDataHourlyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"current_chart_data_hourly\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, currentChartDataHourlyPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from currentChartDataHourly slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for current_chart_data_hourly")
	}

	if len(currentChartDataHourlyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CurrentChartDataHourly) Reload(exec boil.Executor) error {
	ret, err := FindCurrentChartDataHourly(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CurrentChartDataHourlySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CurrentChartDataHourlySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currentChartDataHourlyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"current_chart_data_hourly\".* FROM \"current_chart_data_hourly\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, currentChartDataHourlyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CurrentChartDataHourlySlice")
	}

	*o = slice

	return nil
}

// CurrentChartDataHourlyExists checks if the CurrentChartDataHourly row exists.
func CurrentChartDataHourlyExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"current_chart_data_hourly\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if current_chart_data_hourly exists")
	}

	return exists, nil
}
