// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Dividend is an object representing the database table.
type Dividend struct {
	ID             int        `boil:"id" json:"id" toml:"id" yaml:"id"`
	SnapshotID     int        `boil:"snapshot_id" json:"snapshot_id" toml:"snapshot_id" yaml:"snapshot_id"`
	AccountID      string     `boil:"account_id" json:"account_id" toml:"account_id" yaml:"account_id"`
	BalanceLimit   int64      `boil:"balance_limit" json:"balance_limit" toml:"balance_limit" yaml:"balance_limit"`
	Balance        int64      `boil:"balance" json:"balance" toml:"balance" yaml:"balance"`
	DividendAmount null.Int64 `boil:"dividend_amount" json:"dividend_amount,omitempty" toml:"dividend_amount" yaml:"dividend_amount,omitempty"`

	R *dividendR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dividendL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DividendColumns = struct {
	ID             string
	SnapshotID     string
	AccountID      string
	BalanceLimit   string
	Balance        string
	DividendAmount string
}{
	ID:             "id",
	SnapshotID:     "snapshot_id",
	AccountID:      "account_id",
	BalanceLimit:   "balance_limit",
	Balance:        "balance",
	DividendAmount: "dividend_amount",
}

// DividendRels is where relationship names are stored.
var DividendRels = struct {
	Snapshot string
}{
	Snapshot: "Snapshot",
}

// dividendR is where relationships are stored.
type dividendR struct {
	Snapshot *Snapshot
}

// NewStruct creates a new relationship struct
func (*dividendR) NewStruct() *dividendR {
	return &dividendR{}
}

// dividendL is where Load methods for each relationship are stored.
type dividendL struct{}

var (
	dividendColumns               = []string{"id", "snapshot_id", "account_id", "balance_limit", "balance", "dividend_amount"}
	dividendColumnsWithoutDefault = []string{"snapshot_id", "account_id", "balance_limit", "balance", "dividend_amount"}
	dividendColumnsWithDefault    = []string{"id"}
	dividendPrimaryKeyColumns     = []string{"id"}
)

type (
	// DividendSlice is an alias for a slice of pointers to Dividend.
	// This should generally be used opposed to []Dividend.
	DividendSlice []*Dividend
	// DividendHook is the signature for custom Dividend hook methods
	DividendHook func(boil.Executor, *Dividend) error

	dividendQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dividendType                 = reflect.TypeOf(&Dividend{})
	dividendMapping              = queries.MakeStructMapping(dividendType)
	dividendPrimaryKeyMapping, _ = queries.BindMapping(dividendType, dividendMapping, dividendPrimaryKeyColumns)
	dividendInsertCacheMut       sync.RWMutex
	dividendInsertCache          = make(map[string]insertCache)
	dividendUpdateCacheMut       sync.RWMutex
	dividendUpdateCache          = make(map[string]updateCache)
	dividendUpsertCacheMut       sync.RWMutex
	dividendUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var dividendBeforeInsertHooks []DividendHook
var dividendBeforeUpdateHooks []DividendHook
var dividendBeforeDeleteHooks []DividendHook
var dividendBeforeUpsertHooks []DividendHook

var dividendAfterInsertHooks []DividendHook
var dividendAfterSelectHooks []DividendHook
var dividendAfterUpdateHooks []DividendHook
var dividendAfterDeleteHooks []DividendHook
var dividendAfterUpsertHooks []DividendHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Dividend) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range dividendBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Dividend) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range dividendBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Dividend) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range dividendBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Dividend) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range dividendBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Dividend) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range dividendAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Dividend) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range dividendAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Dividend) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range dividendAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Dividend) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range dividendAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Dividend) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range dividendAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDividendHook registers your hook function for all future operations.
func AddDividendHook(hookPoint boil.HookPoint, dividendHook DividendHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		dividendBeforeInsertHooks = append(dividendBeforeInsertHooks, dividendHook)
	case boil.BeforeUpdateHook:
		dividendBeforeUpdateHooks = append(dividendBeforeUpdateHooks, dividendHook)
	case boil.BeforeDeleteHook:
		dividendBeforeDeleteHooks = append(dividendBeforeDeleteHooks, dividendHook)
	case boil.BeforeUpsertHook:
		dividendBeforeUpsertHooks = append(dividendBeforeUpsertHooks, dividendHook)
	case boil.AfterInsertHook:
		dividendAfterInsertHooks = append(dividendAfterInsertHooks, dividendHook)
	case boil.AfterSelectHook:
		dividendAfterSelectHooks = append(dividendAfterSelectHooks, dividendHook)
	case boil.AfterUpdateHook:
		dividendAfterUpdateHooks = append(dividendAfterUpdateHooks, dividendHook)
	case boil.AfterDeleteHook:
		dividendAfterDeleteHooks = append(dividendAfterDeleteHooks, dividendHook)
	case boil.AfterUpsertHook:
		dividendAfterUpsertHooks = append(dividendAfterUpsertHooks, dividendHook)
	}
}

// One returns a single dividend record from the query.
func (q dividendQuery) One(exec boil.Executor) (*Dividend, error) {
	o := &Dividend{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for dividend")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Dividend records from the query.
func (q dividendQuery) All(exec boil.Executor) (DividendSlice, error) {
	var o []*Dividend

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Dividend slice")
	}

	if len(dividendAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Dividend records in the query.
func (q dividendQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count dividend rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dividendQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if dividend exists")
	}

	return count > 0, nil
}

// Snapshot pointed to by the foreign key.
func (o *Dividend) Snapshot(mods ...qm.QueryMod) snapshotQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.SnapshotID),
	}

	queryMods = append(queryMods, mods...)

	query := Snapshots(queryMods...)
	queries.SetFrom(query.Query, "\"snapshot\"")

	return query
}

// LoadSnapshot allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dividendL) LoadSnapshot(e boil.Executor, singular bool, maybeDividend interface{}, mods queries.Applicator) error {
	var slice []*Dividend
	var object *Dividend

	if singular {
		object = maybeDividend.(*Dividend)
	} else {
		slice = *maybeDividend.(*[]*Dividend)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dividendR{}
		}
		args = append(args, object.SnapshotID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dividendR{}
			}

			for _, a := range args {
				if a == obj.SnapshotID {
					continue Outer
				}
			}

			args = append(args, obj.SnapshotID)
		}
	}

	query := NewQuery(qm.From(`snapshot`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Snapshot")
	}

	var resultSlice []*Snapshot
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Snapshot")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for snapshot")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for snapshot")
	}

	if len(dividendAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Snapshot = foreign
		if foreign.R == nil {
			foreign.R = &snapshotR{}
		}
		foreign.R.Dividends = append(foreign.R.Dividends, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SnapshotID == foreign.ID {
				local.R.Snapshot = foreign
				if foreign.R == nil {
					foreign.R = &snapshotR{}
				}
				foreign.R.Dividends = append(foreign.R.Dividends, local)
				break
			}
		}
	}

	return nil
}

// SetSnapshot of the dividend to the related item.
// Sets o.R.Snapshot to related.
// Adds o to related.R.Dividends.
func (o *Dividend) SetSnapshot(exec boil.Executor, insert bool, related *Snapshot) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"dividend\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"snapshot_id"}),
		strmangle.WhereClause("\"", "\"", 2, dividendPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SnapshotID = related.ID
	if o.R == nil {
		o.R = &dividendR{
			Snapshot: related,
		}
	} else {
		o.R.Snapshot = related
	}

	if related.R == nil {
		related.R = &snapshotR{
			Dividends: DividendSlice{o},
		}
	} else {
		related.R.Dividends = append(related.R.Dividends, o)
	}

	return nil
}

// Dividends retrieves all the records using an executor.
func Dividends(mods ...qm.QueryMod) dividendQuery {
	mods = append(mods, qm.From("\"dividend\""))
	return dividendQuery{NewQuery(mods...)}
}

// FindDividend retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDividend(exec boil.Executor, iD int, selectCols ...string) (*Dividend, error) {
	dividendObj := &Dividend{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"dividend\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, dividendObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from dividend")
	}

	return dividendObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Dividend) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dividend provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dividendColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dividendInsertCacheMut.RLock()
	cache, cached := dividendInsertCache[key]
	dividendInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dividendColumns,
			dividendColumnsWithDefault,
			dividendColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dividendType, dividendMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dividendType, dividendMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"dividend\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"dividend\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into dividend")
	}

	if !cached {
		dividendInsertCacheMut.Lock()
		dividendInsertCache[key] = cache
		dividendInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Dividend.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Dividend) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dividendUpdateCacheMut.RLock()
	cache, cached := dividendUpdateCache[key]
	dividendUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dividendColumns,
			dividendPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update dividend, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"dividend\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, dividendPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dividendType, dividendMapping, append(wl, dividendPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update dividend row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for dividend")
	}

	if !cached {
		dividendUpdateCacheMut.Lock()
		dividendUpdateCache[key] = cache
		dividendUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dividendQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for dividend")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for dividend")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DividendSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dividendPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"dividend\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, dividendPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dividend slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dividend")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Dividend) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dividend provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dividendColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dividendUpsertCacheMut.RLock()
	cache, cached := dividendUpsertCache[key]
	dividendUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dividendColumns,
			dividendColumnsWithDefault,
			dividendColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			dividendColumns,
			dividendPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert dividend, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(dividendPrimaryKeyColumns))
			copy(conflict, dividendPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"dividend\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(dividendType, dividendMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dividendType, dividendMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert dividend")
	}

	if !cached {
		dividendUpsertCacheMut.Lock()
		dividendUpsertCache[key] = cache
		dividendUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Dividend record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Dividend) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Dividend provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dividendPrimaryKeyMapping)
	sql := "DELETE FROM \"dividend\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from dividend")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for dividend")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dividendQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dividendQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dividend")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dividend")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DividendSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Dividend slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(dividendBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dividendPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"dividend\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dividendPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dividend slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dividend")
	}

	if len(dividendAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Dividend) Reload(exec boil.Executor) error {
	ret, err := FindDividend(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DividendSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DividendSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dividendPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"dividend\".* FROM \"dividend\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dividendPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DividendSlice")
	}

	*o = slice

	return nil
}

// DividendExists checks if the Dividend row exists.
func DividendExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"dividend\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if dividend exists")
	}

	return exists, nil
}
