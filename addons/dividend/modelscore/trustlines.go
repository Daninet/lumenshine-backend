// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelscore

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Trustline is an object representing the database table.
type Trustline struct {
	Accountid    string `boil:"accountid" json:"accountid" toml:"accountid" yaml:"accountid"`
	Assettype    int    `boil:"assettype" json:"assettype" toml:"assettype" yaml:"assettype"`
	Issuer       string `boil:"issuer" json:"issuer" toml:"issuer" yaml:"issuer"`
	Assetcode    string `boil:"assetcode" json:"assetcode" toml:"assetcode" yaml:"assetcode"`
	Tlimit       int64  `boil:"tlimit" json:"tlimit" toml:"tlimit" yaml:"tlimit"`
	Balance      int64  `boil:"balance" json:"balance" toml:"balance" yaml:"balance"`
	Flags        int    `boil:"flags" json:"flags" toml:"flags" yaml:"flags"`
	Lastmodified int    `boil:"lastmodified" json:"lastmodified" toml:"lastmodified" yaml:"lastmodified"`

	R *trustlineR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L trustlineL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TrustlineColumns = struct {
	Accountid    string
	Assettype    string
	Issuer       string
	Assetcode    string
	Tlimit       string
	Balance      string
	Flags        string
	Lastmodified string
}{
	Accountid:    "accountid",
	Assettype:    "assettype",
	Issuer:       "issuer",
	Assetcode:    "assetcode",
	Tlimit:       "tlimit",
	Balance:      "balance",
	Flags:        "flags",
	Lastmodified: "lastmodified",
}

// trustlineR is where relationships are stored.
type trustlineR struct {
}

// trustlineL is where Load methods for each relationship are stored.
type trustlineL struct{}

var (
	trustlineColumns               = []string{"accountid", "assettype", "issuer", "assetcode", "tlimit", "balance", "flags", "lastmodified"}
	trustlineColumnsWithoutDefault = []string{"accountid", "assettype", "issuer", "assetcode", "tlimit", "balance", "flags", "lastmodified"}
	trustlineColumnsWithDefault    = []string{}
	trustlinePrimaryKeyColumns     = []string{"accountid", "issuer", "assetcode"}
)

type (
	// TrustlineSlice is an alias for a slice of pointers to Trustline.
	// This should generally be used opposed to []Trustline.
	TrustlineSlice []*Trustline
	// TrustlineHook is the signature for custom Trustline hook methods
	TrustlineHook func(boil.Executor, *Trustline) error

	trustlineQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	trustlineType                 = reflect.TypeOf(&Trustline{})
	trustlineMapping              = queries.MakeStructMapping(trustlineType)
	trustlinePrimaryKeyMapping, _ = queries.BindMapping(trustlineType, trustlineMapping, trustlinePrimaryKeyColumns)
	trustlineInsertCacheMut       sync.RWMutex
	trustlineInsertCache          = make(map[string]insertCache)
	trustlineUpdateCacheMut       sync.RWMutex
	trustlineUpdateCache          = make(map[string]updateCache)
	trustlineUpsertCacheMut       sync.RWMutex
	trustlineUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var trustlineBeforeInsertHooks []TrustlineHook
var trustlineBeforeUpdateHooks []TrustlineHook
var trustlineBeforeDeleteHooks []TrustlineHook
var trustlineBeforeUpsertHooks []TrustlineHook

var trustlineAfterInsertHooks []TrustlineHook
var trustlineAfterSelectHooks []TrustlineHook
var trustlineAfterUpdateHooks []TrustlineHook
var trustlineAfterDeleteHooks []TrustlineHook
var trustlineAfterUpsertHooks []TrustlineHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Trustline) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range trustlineBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Trustline) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range trustlineBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Trustline) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range trustlineBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Trustline) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range trustlineBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Trustline) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range trustlineAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Trustline) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range trustlineAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Trustline) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range trustlineAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Trustline) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range trustlineAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Trustline) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range trustlineAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTrustlineHook registers your hook function for all future operations.
func AddTrustlineHook(hookPoint boil.HookPoint, trustlineHook TrustlineHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		trustlineBeforeInsertHooks = append(trustlineBeforeInsertHooks, trustlineHook)
	case boil.BeforeUpdateHook:
		trustlineBeforeUpdateHooks = append(trustlineBeforeUpdateHooks, trustlineHook)
	case boil.BeforeDeleteHook:
		trustlineBeforeDeleteHooks = append(trustlineBeforeDeleteHooks, trustlineHook)
	case boil.BeforeUpsertHook:
		trustlineBeforeUpsertHooks = append(trustlineBeforeUpsertHooks, trustlineHook)
	case boil.AfterInsertHook:
		trustlineAfterInsertHooks = append(trustlineAfterInsertHooks, trustlineHook)
	case boil.AfterSelectHook:
		trustlineAfterSelectHooks = append(trustlineAfterSelectHooks, trustlineHook)
	case boil.AfterUpdateHook:
		trustlineAfterUpdateHooks = append(trustlineAfterUpdateHooks, trustlineHook)
	case boil.AfterDeleteHook:
		trustlineAfterDeleteHooks = append(trustlineAfterDeleteHooks, trustlineHook)
	case boil.AfterUpsertHook:
		trustlineAfterUpsertHooks = append(trustlineAfterUpsertHooks, trustlineHook)
	}
}

// OneP returns a single trustline record from the query, and panics on error.
func (q trustlineQuery) OneP() *Trustline {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single trustline record from the query.
func (q trustlineQuery) One() (*Trustline, error) {
	o := &Trustline{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "modelscore: failed to execute a one query for trustlines")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Trustline records from the query, and panics on error.
func (q trustlineQuery) AllP() TrustlineSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Trustline records from the query.
func (q trustlineQuery) All() (TrustlineSlice, error) {
	var o []*Trustline

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "modelscore: failed to assign all query results to Trustline slice")
	}

	if len(trustlineAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Trustline records in the query, and panics on error.
func (q trustlineQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Trustline records in the query.
func (q trustlineQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "modelscore: failed to count trustlines rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q trustlineQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q trustlineQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "modelscore: failed to check if trustlines exists")
	}

	return count > 0, nil
}

// TrustlinesG retrieves all records.
func TrustlinesG(mods ...qm.QueryMod) trustlineQuery {
	return Trustlines(boil.GetDB(), mods...)
}

// Trustlines retrieves all the records using an executor.
func Trustlines(exec boil.Executor, mods ...qm.QueryMod) trustlineQuery {
	mods = append(mods, qm.From("\"trustlines\""))
	return trustlineQuery{NewQuery(exec, mods...)}
}

// FindTrustlineG retrieves a single record by ID.
func FindTrustlineG(accountid string, issuer string, assetcode string, selectCols ...string) (*Trustline, error) {
	return FindTrustline(boil.GetDB(), accountid, issuer, assetcode, selectCols...)
}

// FindTrustlineGP retrieves a single record by ID, and panics on error.
func FindTrustlineGP(accountid string, issuer string, assetcode string, selectCols ...string) *Trustline {
	retobj, err := FindTrustline(boil.GetDB(), accountid, issuer, assetcode, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindTrustline retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTrustline(exec boil.Executor, accountid string, issuer string, assetcode string, selectCols ...string) (*Trustline, error) {
	trustlineObj := &Trustline{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"trustlines\" where \"accountid\"=$1 AND \"issuer\"=$2 AND \"assetcode\"=$3", sel,
	)

	q := queries.Raw(exec, query, accountid, issuer, assetcode)

	err := q.Bind(trustlineObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "modelscore: unable to select from trustlines")
	}

	return trustlineObj, nil
}

// FindTrustlineP retrieves a single record by ID with an executor, and panics on error.
func FindTrustlineP(exec boil.Executor, accountid string, issuer string, assetcode string, selectCols ...string) *Trustline {
	retobj, err := FindTrustline(exec, accountid, issuer, assetcode, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Trustline) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Trustline) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Trustline) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Trustline) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("modelscore: no trustlines provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trustlineColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	trustlineInsertCacheMut.RLock()
	cache, cached := trustlineInsertCache[key]
	trustlineInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			trustlineColumns,
			trustlineColumnsWithDefault,
			trustlineColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(trustlineType, trustlineMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(trustlineType, trustlineMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"trustlines\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"trustlines\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "modelscore: unable to insert into trustlines")
	}

	if !cached {
		trustlineInsertCacheMut.Lock()
		trustlineInsertCache[key] = cache
		trustlineInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Trustline record. See Update for
// whitelist behavior description.
func (o *Trustline) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Trustline record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Trustline) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Trustline, and panics on error.
// See Update for whitelist behavior description.
func (o *Trustline) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Trustline.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Trustline) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	trustlineUpdateCacheMut.RLock()
	cache, cached := trustlineUpdateCache[key]
	trustlineUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			trustlineColumns,
			trustlinePrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("modelscore: unable to update trustlines, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"trustlines\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, trustlinePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(trustlineType, trustlineMapping, append(wl, trustlinePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "modelscore: unable to update trustlines row")
	}

	if !cached {
		trustlineUpdateCacheMut.Lock()
		trustlineUpdateCache[key] = cache
		trustlineUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q trustlineQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q trustlineQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "modelscore: unable to update all for trustlines")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TrustlineSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o TrustlineSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o TrustlineSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TrustlineSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("modelscore: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trustlinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"trustlines\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, trustlinePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "modelscore: unable to update all in trustline slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Trustline) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Trustline) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Trustline) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Trustline) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("modelscore: no trustlines provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trustlineColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	trustlineUpsertCacheMut.RLock()
	cache, cached := trustlineUpsertCache[key]
	trustlineUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			trustlineColumns,
			trustlineColumnsWithDefault,
			trustlineColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			trustlineColumns,
			trustlinePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("modelscore: unable to upsert trustlines, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(trustlinePrimaryKeyColumns))
			copy(conflict, trustlinePrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"trustlines\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(trustlineType, trustlineMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(trustlineType, trustlineMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "modelscore: unable to upsert trustlines")
	}

	if !cached {
		trustlineUpsertCacheMut.Lock()
		trustlineUpsertCache[key] = cache
		trustlineUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Trustline record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Trustline) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Trustline record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Trustline) DeleteG() error {
	if o == nil {
		return errors.New("modelscore: no Trustline provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Trustline record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Trustline) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Trustline record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Trustline) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("modelscore: no Trustline provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), trustlinePrimaryKeyMapping)
	sql := "DELETE FROM \"trustlines\" WHERE \"accountid\"=$1 AND \"issuer\"=$2 AND \"assetcode\"=$3"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "modelscore: unable to delete from trustlines")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q trustlineQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q trustlineQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("modelscore: no trustlineQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "modelscore: unable to delete all from trustlines")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o TrustlineSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o TrustlineSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("modelscore: no Trustline slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o TrustlineSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TrustlineSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("modelscore: no Trustline slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(trustlineBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trustlinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"trustlines\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, trustlinePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "modelscore: unable to delete all from trustline slice")
	}

	if len(trustlineAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Trustline) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Trustline) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Trustline) ReloadG() error {
	if o == nil {
		return errors.New("modelscore: no Trustline provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Trustline) Reload(exec boil.Executor) error {
	ret, err := FindTrustline(exec, o.Accountid, o.Issuer, o.Assetcode)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TrustlineSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TrustlineSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TrustlineSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("modelscore: empty TrustlineSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TrustlineSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	trustlines := TrustlineSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trustlinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"trustlines\".* FROM \"trustlines\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, trustlinePrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&trustlines)
	if err != nil {
		return errors.Wrap(err, "modelscore: unable to reload all in TrustlineSlice")
	}

	*o = trustlines

	return nil
}

// TrustlineExists checks if the Trustline row exists.
func TrustlineExists(exec boil.Executor, accountid string, issuer string, assetcode string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"trustlines\" where \"accountid\"=$1 AND \"issuer\"=$2 AND \"assetcode\"=$3 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, accountid, issuer, assetcode)
	}

	row := exec.QueryRow(sql, accountid, issuer, assetcode)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "modelscore: unable to check if trustlines exists")
	}

	return exists, nil
}

// TrustlineExistsG checks if the Trustline row exists.
func TrustlineExistsG(accountid string, issuer string, assetcode string) (bool, error) {
	return TrustlineExists(boil.GetDB(), accountid, issuer, assetcode)
}

// TrustlineExistsGP checks if the Trustline row exists. Panics on error.
func TrustlineExistsGP(accountid string, issuer string, assetcode string) bool {
	e, err := TrustlineExists(boil.GetDB(), accountid, issuer, assetcode)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// TrustlineExistsP checks if the Trustline row exists. Panics on error.
func TrustlineExistsP(exec boil.Executor, accountid string, issuer string, assetcode string) bool {
	e, err := TrustlineExists(exec, accountid, issuer, assetcode)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
