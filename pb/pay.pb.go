// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pay.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ExchangeCurrency struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ExchangeCurrencyType string   `protobuf:"bytes,2,opt,name=exchange_currency_type,json=exchangeCurrencyType,proto3" json:"exchange_currency_type,omitempty"`
	AssetCode            string   `protobuf:"bytes,3,opt,name=asset_code,json=assetCode,proto3" json:"asset_code,omitempty"`
	DenomAssetCode       string   `protobuf:"bytes,4,opt,name=denom_asset_code,json=denomAssetCode,proto3" json:"denom_asset_code,omitempty"`
	Decimals             int64    `protobuf:"varint,5,opt,name=decimals,proto3" json:"decimals,omitempty"`
	PaymentNetwork       string   `protobuf:"bytes,6,opt,name=payment_network,json=paymentNetwork,proto3" json:"payment_network,omitempty"`
	EcAssetIssuerPk      string   `protobuf:"bytes,7,opt,name=ec_asset_issuer_pk,json=ecAssetIssuerPk,proto3" json:"ec_asset_issuer_pk,omitempty"`
	DenomPricePerToken   string   `protobuf:"bytes,8,opt,name=denom_price_per_token,json=denomPricePerToken,proto3" json:"denom_price_per_token,omitempty"`
	PricePerToken        string   `protobuf:"bytes,9,opt,name=price_per_token,json=pricePerToken,proto3" json:"price_per_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExchangeCurrency) Reset()         { *m = ExchangeCurrency{} }
func (m *ExchangeCurrency) String() string { return proto.CompactTextString(m) }
func (*ExchangeCurrency) ProtoMessage()    {}
func (*ExchangeCurrency) Descriptor() ([]byte, []int) {
	return fileDescriptor_0564d675d5c516e0, []int{0}
}

func (m *ExchangeCurrency) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExchangeCurrency.Unmarshal(m, b)
}
func (m *ExchangeCurrency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExchangeCurrency.Marshal(b, m, deterministic)
}
func (m *ExchangeCurrency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExchangeCurrency.Merge(m, src)
}
func (m *ExchangeCurrency) XXX_Size() int {
	return xxx_messageInfo_ExchangeCurrency.Size(m)
}
func (m *ExchangeCurrency) XXX_DiscardUnknown() {
	xxx_messageInfo_ExchangeCurrency.DiscardUnknown(m)
}

var xxx_messageInfo_ExchangeCurrency proto.InternalMessageInfo

func (m *ExchangeCurrency) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ExchangeCurrency) GetExchangeCurrencyType() string {
	if m != nil {
		return m.ExchangeCurrencyType
	}
	return ""
}

func (m *ExchangeCurrency) GetAssetCode() string {
	if m != nil {
		return m.AssetCode
	}
	return ""
}

func (m *ExchangeCurrency) GetDenomAssetCode() string {
	if m != nil {
		return m.DenomAssetCode
	}
	return ""
}

func (m *ExchangeCurrency) GetDecimals() int64 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *ExchangeCurrency) GetPaymentNetwork() string {
	if m != nil {
		return m.PaymentNetwork
	}
	return ""
}

func (m *ExchangeCurrency) GetEcAssetIssuerPk() string {
	if m != nil {
		return m.EcAssetIssuerPk
	}
	return ""
}

func (m *ExchangeCurrency) GetDenomPricePerToken() string {
	if m != nil {
		return m.DenomPricePerToken
	}
	return ""
}

func (m *ExchangeCurrency) GetPricePerToken() string {
	if m != nil {
		return m.PricePerToken
	}
	return ""
}

type PhaseDataResponse struct {
	Id                       int64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IcoId                    int64               `protobuf:"varint,2,opt,name=ico_id,json=icoId,proto3" json:"ico_id,omitempty"`
	IcoPhaseName             string              `protobuf:"bytes,3,opt,name=ico_phase_name,json=icoPhaseName,proto3" json:"ico_phase_name,omitempty"`
	IcoPhaseStatus           string              `protobuf:"bytes,4,opt,name=ico_phase_status,json=icoPhaseStatus,proto3" json:"ico_phase_status,omitempty"`
	IcoTokenAsset            string              `protobuf:"bytes,5,opt,name=ico_token_asset,json=icoTokenAsset,proto3" json:"ico_token_asset,omitempty"`
	StartTime                int64               `protobuf:"varint,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime                  int64               `protobuf:"varint,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	TokensLeft               int64               `protobuf:"varint,8,opt,name=tokens_left,json=tokensLeft,proto3" json:"tokens_left,omitempty"`
	TokenMaxOrderAmount      int64               `protobuf:"varint,9,opt,name=token_max_order_amount,json=tokenMaxOrderAmount,proto3" json:"token_max_order_amount,omitempty"`
	TokenMinOrderAmount      int64               `protobuf:"varint,10,opt,name=token_min_order_amount,json=tokenMinOrderAmount,proto3" json:"token_min_order_amount,omitempty"`
	MaxUserOrders            int64               `protobuf:"varint,11,opt,name=max_user_orders,json=maxUserOrders,proto3" json:"max_user_orders,omitempty"`
	ActiveExchangeCurrencies []*ExchangeCurrency `protobuf:"bytes,12,rep,name=active_exchange_currencies,json=activeExchangeCurrencies,proto3" json:"active_exchange_currencies,omitempty"`
	IcoIssuerPk              string              `protobuf:"bytes,13,opt,name=ico_issuer_pk,json=icoIssuerPk,proto3" json:"ico_issuer_pk,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}            `json:"-"`
	XXX_unrecognized         []byte              `json:"-"`
	XXX_sizecache            int32               `json:"-"`
}

func (m *PhaseDataResponse) Reset()         { *m = PhaseDataResponse{} }
func (m *PhaseDataResponse) String() string { return proto.CompactTextString(m) }
func (*PhaseDataResponse) ProtoMessage()    {}
func (*PhaseDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0564d675d5c516e0, []int{1}
}

func (m *PhaseDataResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhaseDataResponse.Unmarshal(m, b)
}
func (m *PhaseDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhaseDataResponse.Marshal(b, m, deterministic)
}
func (m *PhaseDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhaseDataResponse.Merge(m, src)
}
func (m *PhaseDataResponse) XXX_Size() int {
	return xxx_messageInfo_PhaseDataResponse.Size(m)
}
func (m *PhaseDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PhaseDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PhaseDataResponse proto.InternalMessageInfo

func (m *PhaseDataResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PhaseDataResponse) GetIcoId() int64 {
	if m != nil {
		return m.IcoId
	}
	return 0
}

func (m *PhaseDataResponse) GetIcoPhaseName() string {
	if m != nil {
		return m.IcoPhaseName
	}
	return ""
}

func (m *PhaseDataResponse) GetIcoPhaseStatus() string {
	if m != nil {
		return m.IcoPhaseStatus
	}
	return ""
}

func (m *PhaseDataResponse) GetIcoTokenAsset() string {
	if m != nil {
		return m.IcoTokenAsset
	}
	return ""
}

func (m *PhaseDataResponse) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *PhaseDataResponse) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *PhaseDataResponse) GetTokensLeft() int64 {
	if m != nil {
		return m.TokensLeft
	}
	return 0
}

func (m *PhaseDataResponse) GetTokenMaxOrderAmount() int64 {
	if m != nil {
		return m.TokenMaxOrderAmount
	}
	return 0
}

func (m *PhaseDataResponse) GetTokenMinOrderAmount() int64 {
	if m != nil {
		return m.TokenMinOrderAmount
	}
	return 0
}

func (m *PhaseDataResponse) GetMaxUserOrders() int64 {
	if m != nil {
		return m.MaxUserOrders
	}
	return 0
}

func (m *PhaseDataResponse) GetActiveExchangeCurrencies() []*ExchangeCurrency {
	if m != nil {
		return m.ActiveExchangeCurrencies
	}
	return nil
}

func (m *PhaseDataResponse) GetIcoIssuerPk() string {
	if m != nil {
		return m.IcoIssuerPk
	}
	return ""
}

type CoinPriceRequest struct {
	Base                 *BaseRequest `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	CoinAmount           int64        `protobuf:"varint,2,opt,name=coin_amount,json=coinAmount,proto3" json:"coin_amount,omitempty"`
	ExchangeCurrencyId   int64        `protobuf:"varint,3,opt,name=exchange_currency_id,json=exchangeCurrencyId,proto3" json:"exchange_currency_id,omitempty"`
	IcoPhaseId           int64        `protobuf:"varint,4,opt,name=ico_phase_id,json=icoPhaseId,proto3" json:"ico_phase_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CoinPriceRequest) Reset()         { *m = CoinPriceRequest{} }
func (m *CoinPriceRequest) String() string { return proto.CompactTextString(m) }
func (*CoinPriceRequest) ProtoMessage()    {}
func (*CoinPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0564d675d5c516e0, []int{2}
}

func (m *CoinPriceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoinPriceRequest.Unmarshal(m, b)
}
func (m *CoinPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoinPriceRequest.Marshal(b, m, deterministic)
}
func (m *CoinPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinPriceRequest.Merge(m, src)
}
func (m *CoinPriceRequest) XXX_Size() int {
	return xxx_messageInfo_CoinPriceRequest.Size(m)
}
func (m *CoinPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CoinPriceRequest proto.InternalMessageInfo

func (m *CoinPriceRequest) GetBase() *BaseRequest {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *CoinPriceRequest) GetCoinAmount() int64 {
	if m != nil {
		return m.CoinAmount
	}
	return 0
}

func (m *CoinPriceRequest) GetExchangeCurrencyId() int64 {
	if m != nil {
		return m.ExchangeCurrencyId
	}
	return 0
}

func (m *CoinPriceRequest) GetIcoPhaseId() int64 {
	if m != nil {
		return m.IcoPhaseId
	}
	return 0
}

type CoinPriceResponse struct {
	ExchangeAmount             string   `protobuf:"bytes,1,opt,name=exchange_amount,json=exchangeAmount,proto3" json:"exchange_amount,omitempty"`
	ExchangeAmountDenomination string   `protobuf:"bytes,2,opt,name=exchange_amount_denomination,json=exchangeAmountDenomination,proto3" json:"exchange_amount_denomination,omitempty"`
	ExchangeAssetCode          string   `protobuf:"bytes,3,opt,name=exchange_asset_code,json=exchangeAssetCode,proto3" json:"exchange_asset_code,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *CoinPriceResponse) Reset()         { *m = CoinPriceResponse{} }
func (m *CoinPriceResponse) String() string { return proto.CompactTextString(m) }
func (*CoinPriceResponse) ProtoMessage()    {}
func (*CoinPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0564d675d5c516e0, []int{3}
}

func (m *CoinPriceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoinPriceResponse.Unmarshal(m, b)
}
func (m *CoinPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoinPriceResponse.Marshal(b, m, deterministic)
}
func (m *CoinPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinPriceResponse.Merge(m, src)
}
func (m *CoinPriceResponse) XXX_Size() int {
	return xxx_messageInfo_CoinPriceResponse.Size(m)
}
func (m *CoinPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CoinPriceResponse proto.InternalMessageInfo

func (m *CoinPriceResponse) GetExchangeAmount() string {
	if m != nil {
		return m.ExchangeAmount
	}
	return ""
}

func (m *CoinPriceResponse) GetExchangeAmountDenomination() string {
	if m != nil {
		return m.ExchangeAmountDenomination
	}
	return ""
}

func (m *CoinPriceResponse) GetExchangeAssetCode() string {
	if m != nil {
		return m.ExchangeAssetCode
	}
	return ""
}

type CreateOrderRequest struct {
	Base                 *BaseRequest `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	UserId               int64        `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IcoPhaseId           int64        `protobuf:"varint,3,opt,name=ico_phase_id,json=icoPhaseId,proto3" json:"ico_phase_id,omitempty"`
	TokenAmount          int64        `protobuf:"varint,4,opt,name=token_amount,json=tokenAmount,proto3" json:"token_amount,omitempty"`
	ExchangeCurrencyId   int64        `protobuf:"varint,5,opt,name=exchange_currency_id,json=exchangeCurrencyId,proto3" json:"exchange_currency_id,omitempty"`
	UserPublicKey        string       `protobuf:"bytes,6,opt,name=user_public_key,json=userPublicKey,proto3" json:"user_public_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CreateOrderRequest) Reset()         { *m = CreateOrderRequest{} }
func (m *CreateOrderRequest) String() string { return proto.CompactTextString(m) }
func (*CreateOrderRequest) ProtoMessage()    {}
func (*CreateOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0564d675d5c516e0, []int{4}
}

func (m *CreateOrderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateOrderRequest.Unmarshal(m, b)
}
func (m *CreateOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateOrderRequest.Marshal(b, m, deterministic)
}
func (m *CreateOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOrderRequest.Merge(m, src)
}
func (m *CreateOrderRequest) XXX_Size() int {
	return xxx_messageInfo_CreateOrderRequest.Size(m)
}
func (m *CreateOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOrderRequest proto.InternalMessageInfo

func (m *CreateOrderRequest) GetBase() *BaseRequest {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *CreateOrderRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CreateOrderRequest) GetIcoPhaseId() int64 {
	if m != nil {
		return m.IcoPhaseId
	}
	return 0
}

func (m *CreateOrderRequest) GetTokenAmount() int64 {
	if m != nil {
		return m.TokenAmount
	}
	return 0
}

func (m *CreateOrderRequest) GetExchangeCurrencyId() int64 {
	if m != nil {
		return m.ExchangeCurrencyId
	}
	return 0
}

func (m *CreateOrderRequest) GetUserPublicKey() string {
	if m != nil {
		return m.UserPublicKey
	}
	return ""
}

type CreateOrderResponse struct {
	OrderId                     int64    `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	OrderStatus                 string   `protobuf:"bytes,2,opt,name=order_status,json=orderStatus,proto3" json:"order_status,omitempty"`
	ExchangeValueToPay          string   `protobuf:"bytes,3,opt,name=exchange_value_to_pay,json=exchangeValueToPay,proto3" json:"exchange_value_to_pay,omitempty"`
	ExchangeValueDenominator    string   `protobuf:"bytes,4,opt,name=exchange_value_denominator,json=exchangeValueDenominator,proto3" json:"exchange_value_denominator,omitempty"`
	ExchangeValueDenomAssetCode string   `protobuf:"bytes,5,opt,name=exchange_value_denom_asset_code,json=exchangeValueDenomAssetCode,proto3" json:"exchange_value_denom_asset_code,omitempty"`
	PaymentAddress              string   `protobuf:"bytes,6,opt,name=payment_address,json=paymentAddress,proto3" json:"payment_address,omitempty"`
	PaymentQrImage              []byte   `protobuf:"bytes,7,opt,name=payment_qr_image,json=paymentQrImage,proto3" json:"payment_qr_image,omitempty"`
	FiatBic                     string   `protobuf:"bytes,8,opt,name=fiat_bic,json=fiatBic,proto3" json:"fiat_bic,omitempty"`
	FiatIban                    string   `protobuf:"bytes,9,opt,name=fiat_iban,json=fiatIban,proto3" json:"fiat_iban,omitempty"`
	FiatRecepientName           string   `protobuf:"bytes,10,opt,name=fiat_recepient_name,json=fiatRecepientName,proto3" json:"fiat_recepient_name,omitempty"`
	FiatPaymentUsage            string   `protobuf:"bytes,11,opt,name=fiat_payment_usage,json=fiatPaymentUsage,proto3" json:"fiat_payment_usage,omitempty"`
	FiatBankName                string   `protobuf:"bytes,12,opt,name=fiat_bank_name,json=fiatBankName,proto3" json:"fiat_bank_name,omitempty"`
	UserPublicKey               string   `protobuf:"bytes,13,opt,name=user_public_key,json=userPublicKey,proto3" json:"user_public_key,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *CreateOrderResponse) Reset()         { *m = CreateOrderResponse{} }
func (m *CreateOrderResponse) String() string { return proto.CompactTextString(m) }
func (*CreateOrderResponse) ProtoMessage()    {}
func (*CreateOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0564d675d5c516e0, []int{5}
}

func (m *CreateOrderResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateOrderResponse.Unmarshal(m, b)
}
func (m *CreateOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateOrderResponse.Marshal(b, m, deterministic)
}
func (m *CreateOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOrderResponse.Merge(m, src)
}
func (m *CreateOrderResponse) XXX_Size() int {
	return xxx_messageInfo_CreateOrderResponse.Size(m)
}
func (m *CreateOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOrderResponse proto.InternalMessageInfo

func (m *CreateOrderResponse) GetOrderId() int64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *CreateOrderResponse) GetOrderStatus() string {
	if m != nil {
		return m.OrderStatus
	}
	return ""
}

func (m *CreateOrderResponse) GetExchangeValueToPay() string {
	if m != nil {
		return m.ExchangeValueToPay
	}
	return ""
}

func (m *CreateOrderResponse) GetExchangeValueDenominator() string {
	if m != nil {
		return m.ExchangeValueDenominator
	}
	return ""
}

func (m *CreateOrderResponse) GetExchangeValueDenomAssetCode() string {
	if m != nil {
		return m.ExchangeValueDenomAssetCode
	}
	return ""
}

func (m *CreateOrderResponse) GetPaymentAddress() string {
	if m != nil {
		return m.PaymentAddress
	}
	return ""
}

func (m *CreateOrderResponse) GetPaymentQrImage() []byte {
	if m != nil {
		return m.PaymentQrImage
	}
	return nil
}

func (m *CreateOrderResponse) GetFiatBic() string {
	if m != nil {
		return m.FiatBic
	}
	return ""
}

func (m *CreateOrderResponse) GetFiatIban() string {
	if m != nil {
		return m.FiatIban
	}
	return ""
}

func (m *CreateOrderResponse) GetFiatRecepientName() string {
	if m != nil {
		return m.FiatRecepientName
	}
	return ""
}

func (m *CreateOrderResponse) GetFiatPaymentUsage() string {
	if m != nil {
		return m.FiatPaymentUsage
	}
	return ""
}

func (m *CreateOrderResponse) GetFiatBankName() string {
	if m != nil {
		return m.FiatBankName
	}
	return ""
}

func (m *CreateOrderResponse) GetUserPublicKey() string {
	if m != nil {
		return m.UserPublicKey
	}
	return ""
}

type UserOrdersCountRequest struct {
	Base                 *BaseRequest `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	UserId               int64        `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PhaseId              int64        `protobuf:"varint,3,opt,name=phase_id,json=phaseId,proto3" json:"phase_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UserOrdersCountRequest) Reset()         { *m = UserOrdersCountRequest{} }
func (m *UserOrdersCountRequest) String() string { return proto.CompactTextString(m) }
func (*UserOrdersCountRequest) ProtoMessage()    {}
func (*UserOrdersCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0564d675d5c516e0, []int{6}
}

func (m *UserOrdersCountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserOrdersCountRequest.Unmarshal(m, b)
}
func (m *UserOrdersCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserOrdersCountRequest.Marshal(b, m, deterministic)
}
func (m *UserOrdersCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserOrdersCountRequest.Merge(m, src)
}
func (m *UserOrdersCountRequest) XXX_Size() int {
	return xxx_messageInfo_UserOrdersCountRequest.Size(m)
}
func (m *UserOrdersCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserOrdersCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserOrdersCountRequest proto.InternalMessageInfo

func (m *UserOrdersCountRequest) GetBase() *BaseRequest {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *UserOrdersCountRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserOrdersCountRequest) GetPhaseId() int64 {
	if m != nil {
		return m.PhaseId
	}
	return 0
}

type UserOrdersRequest struct {
	Base                 *BaseRequest `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	UserId               int64        `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OrderStatus          string       `protobuf:"bytes,3,opt,name=order_status,json=orderStatus,proto3" json:"order_status,omitempty"`
	OrderId              int64        `protobuf:"varint,4,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	IcoPhaseId           int64        `protobuf:"varint,5,opt,name=ico_phase_id,json=icoPhaseId,proto3" json:"ico_phase_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UserOrdersRequest) Reset()         { *m = UserOrdersRequest{} }
func (m *UserOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*UserOrdersRequest) ProtoMessage()    {}
func (*UserOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0564d675d5c516e0, []int{7}
}

func (m *UserOrdersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserOrdersRequest.Unmarshal(m, b)
}
func (m *UserOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserOrdersRequest.Marshal(b, m, deterministic)
}
func (m *UserOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserOrdersRequest.Merge(m, src)
}
func (m *UserOrdersRequest) XXX_Size() int {
	return xxx_messageInfo_UserOrdersRequest.Size(m)
}
func (m *UserOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserOrdersRequest proto.InternalMessageInfo

func (m *UserOrdersRequest) GetBase() *BaseRequest {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *UserOrdersRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserOrdersRequest) GetOrderStatus() string {
	if m != nil {
		return m.OrderStatus
	}
	return ""
}

func (m *UserOrdersRequest) GetOrderId() int64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *UserOrdersRequest) GetIcoPhaseId() int64 {
	if m != nil {
		return m.IcoPhaseId
	}
	return 0
}

type UserOrder struct {
	Id                                 int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OrderStatus                        string   `protobuf:"bytes,2,opt,name=order_status,json=orderStatus,proto3" json:"order_status,omitempty"`
	IcoPhaseId                         int64    `protobuf:"varint,3,opt,name=ico_phase_id,json=icoPhaseId,proto3" json:"ico_phase_id,omitempty"`
	TokenAmount                        int64    `protobuf:"varint,4,opt,name=token_amount,json=tokenAmount,proto3" json:"token_amount,omitempty"`
	StellarUserPublicKey               string   `protobuf:"bytes,5,opt,name=stellar_user_public_key,json=stellarUserPublicKey,proto3" json:"stellar_user_public_key,omitempty"`
	ExchangeCurrencyId                 int64    `protobuf:"varint,6,opt,name=exchange_currency_id,json=exchangeCurrencyId,proto3" json:"exchange_currency_id,omitempty"`
	ExchangeCurrencyDenominationAmount string   `protobuf:"bytes,7,opt,name=exchange_currency_denomination_amount,json=exchangeCurrencyDenominationAmount,proto3" json:"exchange_currency_denomination_amount,omitempty"`
	PaymentNetwork                     string   `protobuf:"bytes,8,opt,name=payment_network,json=paymentNetwork,proto3" json:"payment_network,omitempty"`
	PaymentAddress                     string   `protobuf:"bytes,9,opt,name=payment_address,json=paymentAddress,proto3" json:"payment_address,omitempty"`
	StellarTransactionId               string   `protobuf:"bytes,10,opt,name=stellar_transaction_id,json=stellarTransactionId,proto3" json:"stellar_transaction_id,omitempty"`
	PaymentRefundTxId                  string   `protobuf:"bytes,11,opt,name=payment_refund_tx_id,json=paymentRefundTxId,proto3" json:"payment_refund_tx_id,omitempty"`
	PaymentQrImage                     []byte   `protobuf:"bytes,12,opt,name=payment_qr_image,json=paymentQrImage,proto3" json:"payment_qr_image,omitempty"`
	ExchangeAmount                     string   `protobuf:"bytes,13,opt,name=exchange_amount,json=exchangeAmount,proto3" json:"exchange_amount,omitempty"`
	ExchangeAssetCode                  string   `protobuf:"bytes,14,opt,name=exchange_asset_code,json=exchangeAssetCode,proto3" json:"exchange_asset_code,omitempty"`
	ExchangeDenomAssetCode             string   `protobuf:"bytes,15,opt,name=exchange_denom_asset_code,json=exchangeDenomAssetCode,proto3" json:"exchange_denom_asset_code,omitempty"`
	FiatBic                            string   `protobuf:"bytes,16,opt,name=fiat_bic,json=fiatBic,proto3" json:"fiat_bic,omitempty"`
	FiatIban                           string   `protobuf:"bytes,17,opt,name=fiat_iban,json=fiatIban,proto3" json:"fiat_iban,omitempty"`
	FiatRecepientName                  string   `protobuf:"bytes,18,opt,name=fiat_recepient_name,json=fiatRecepientName,proto3" json:"fiat_recepient_name,omitempty"`
	FiatPaymentUsage                   string   `protobuf:"bytes,19,opt,name=fiat_payment_usage,json=fiatPaymentUsage,proto3" json:"fiat_payment_usage,omitempty"`
	FiatBankName                       string   `protobuf:"bytes,20,opt,name=fiat_bank_name,json=fiatBankName,proto3" json:"fiat_bank_name,omitempty"`
	ExchangeCurrencyType               string   `protobuf:"bytes,21,opt,name=exchange_currency_type,json=exchangeCurrencyType,proto3" json:"exchange_currency_type,omitempty"`
	AmountReceived                     string   `protobuf:"bytes,22,opt,name=amount_received,json=amountReceived,proto3" json:"amount_received,omitempty"`
	XXX_NoUnkeyedLiteral               struct{} `json:"-"`
	XXX_unrecognized                   []byte   `json:"-"`
	XXX_sizecache                      int32    `json:"-"`
}

func (m *UserOrder) Reset()         { *m = UserOrder{} }
func (m *UserOrder) String() string { return proto.CompactTextString(m) }
func (*UserOrder) ProtoMessage()    {}
func (*UserOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_0564d675d5c516e0, []int{8}
}

func (m *UserOrder) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserOrder.Unmarshal(m, b)
}
func (m *UserOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserOrder.Marshal(b, m, deterministic)
}
func (m *UserOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserOrder.Merge(m, src)
}
func (m *UserOrder) XXX_Size() int {
	return xxx_messageInfo_UserOrder.Size(m)
}
func (m *UserOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_UserOrder.DiscardUnknown(m)
}

var xxx_messageInfo_UserOrder proto.InternalMessageInfo

func (m *UserOrder) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserOrder) GetOrderStatus() string {
	if m != nil {
		return m.OrderStatus
	}
	return ""
}

func (m *UserOrder) GetIcoPhaseId() int64 {
	if m != nil {
		return m.IcoPhaseId
	}
	return 0
}

func (m *UserOrder) GetTokenAmount() int64 {
	if m != nil {
		return m.TokenAmount
	}
	return 0
}

func (m *UserOrder) GetStellarUserPublicKey() string {
	if m != nil {
		return m.StellarUserPublicKey
	}
	return ""
}

func (m *UserOrder) GetExchangeCurrencyId() int64 {
	if m != nil {
		return m.ExchangeCurrencyId
	}
	return 0
}

func (m *UserOrder) GetExchangeCurrencyDenominationAmount() string {
	if m != nil {
		return m.ExchangeCurrencyDenominationAmount
	}
	return ""
}

func (m *UserOrder) GetPaymentNetwork() string {
	if m != nil {
		return m.PaymentNetwork
	}
	return ""
}

func (m *UserOrder) GetPaymentAddress() string {
	if m != nil {
		return m.PaymentAddress
	}
	return ""
}

func (m *UserOrder) GetStellarTransactionId() string {
	if m != nil {
		return m.StellarTransactionId
	}
	return ""
}

func (m *UserOrder) GetPaymentRefundTxId() string {
	if m != nil {
		return m.PaymentRefundTxId
	}
	return ""
}

func (m *UserOrder) GetPaymentQrImage() []byte {
	if m != nil {
		return m.PaymentQrImage
	}
	return nil
}

func (m *UserOrder) GetExchangeAmount() string {
	if m != nil {
		return m.ExchangeAmount
	}
	return ""
}

func (m *UserOrder) GetExchangeAssetCode() string {
	if m != nil {
		return m.ExchangeAssetCode
	}
	return ""
}

func (m *UserOrder) GetExchangeDenomAssetCode() string {
	if m != nil {
		return m.ExchangeDenomAssetCode
	}
	return ""
}

func (m *UserOrder) GetFiatBic() string {
	if m != nil {
		return m.FiatBic
	}
	return ""
}

func (m *UserOrder) GetFiatIban() string {
	if m != nil {
		return m.FiatIban
	}
	return ""
}

func (m *UserOrder) GetFiatRecepientName() string {
	if m != nil {
		return m.FiatRecepientName
	}
	return ""
}

func (m *UserOrder) GetFiatPaymentUsage() string {
	if m != nil {
		return m.FiatPaymentUsage
	}
	return ""
}

func (m *UserOrder) GetFiatBankName() string {
	if m != nil {
		return m.FiatBankName
	}
	return ""
}

func (m *UserOrder) GetExchangeCurrencyType() string {
	if m != nil {
		return m.ExchangeCurrencyType
	}
	return ""
}

func (m *UserOrder) GetAmountReceived() string {
	if m != nil {
		return m.AmountReceived
	}
	return ""
}

type UserOrdersResponse struct {
	UserOrders           []*UserOrder `protobuf:"bytes,1,rep,name=UserOrders,proto3" json:"UserOrders,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UserOrdersResponse) Reset()         { *m = UserOrdersResponse{} }
func (m *UserOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*UserOrdersResponse) ProtoMessage()    {}
func (*UserOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0564d675d5c516e0, []int{9}
}

func (m *UserOrdersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserOrdersResponse.Unmarshal(m, b)
}
func (m *UserOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserOrdersResponse.Marshal(b, m, deterministic)
}
func (m *UserOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserOrdersResponse.Merge(m, src)
}
func (m *UserOrdersResponse) XXX_Size() int {
	return xxx_messageInfo_UserOrdersResponse.Size(m)
}
func (m *UserOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserOrdersResponse proto.InternalMessageInfo

func (m *UserOrdersResponse) GetUserOrders() []*UserOrder {
	if m != nil {
		return m.UserOrders
	}
	return nil
}

type PayGetTransactionRequest struct {
	Base                 *BaseRequest `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	UserId               int64        `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OrderId              int64        `protobuf:"varint,3,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PayGetTransactionRequest) Reset()         { *m = PayGetTransactionRequest{} }
func (m *PayGetTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*PayGetTransactionRequest) ProtoMessage()    {}
func (*PayGetTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0564d675d5c516e0, []int{10}
}

func (m *PayGetTransactionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PayGetTransactionRequest.Unmarshal(m, b)
}
func (m *PayGetTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PayGetTransactionRequest.Marshal(b, m, deterministic)
}
func (m *PayGetTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayGetTransactionRequest.Merge(m, src)
}
func (m *PayGetTransactionRequest) XXX_Size() int {
	return xxx_messageInfo_PayGetTransactionRequest.Size(m)
}
func (m *PayGetTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PayGetTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PayGetTransactionRequest proto.InternalMessageInfo

func (m *PayGetTransactionRequest) GetBase() *BaseRequest {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *PayGetTransactionRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *PayGetTransactionRequest) GetOrderId() int64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

type PayGetTransactionResponse struct {
	Transaction          string   `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	ErrorCode            int64    `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayGetTransactionResponse) Reset()         { *m = PayGetTransactionResponse{} }
func (m *PayGetTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*PayGetTransactionResponse) ProtoMessage()    {}
func (*PayGetTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0564d675d5c516e0, []int{11}
}

func (m *PayGetTransactionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PayGetTransactionResponse.Unmarshal(m, b)
}
func (m *PayGetTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PayGetTransactionResponse.Marshal(b, m, deterministic)
}
func (m *PayGetTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayGetTransactionResponse.Merge(m, src)
}
func (m *PayGetTransactionResponse) XXX_Size() int {
	return xxx_messageInfo_PayGetTransactionResponse.Size(m)
}
func (m *PayGetTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PayGetTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PayGetTransactionResponse proto.InternalMessageInfo

func (m *PayGetTransactionResponse) GetTransaction() string {
	if m != nil {
		return m.Transaction
	}
	return ""
}

func (m *PayGetTransactionResponse) GetErrorCode() int64 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type PayExecuteTransactionRequest struct {
	Base                 *BaseRequest `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	UserId               int64        `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OrderId              int64        `protobuf:"varint,3,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Transaction          string       `protobuf:"bytes,4,opt,name=transaction,proto3" json:"transaction,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PayExecuteTransactionRequest) Reset()         { *m = PayExecuteTransactionRequest{} }
func (m *PayExecuteTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*PayExecuteTransactionRequest) ProtoMessage()    {}
func (*PayExecuteTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0564d675d5c516e0, []int{12}
}

func (m *PayExecuteTransactionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PayExecuteTransactionRequest.Unmarshal(m, b)
}
func (m *PayExecuteTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PayExecuteTransactionRequest.Marshal(b, m, deterministic)
}
func (m *PayExecuteTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayExecuteTransactionRequest.Merge(m, src)
}
func (m *PayExecuteTransactionRequest) XXX_Size() int {
	return xxx_messageInfo_PayExecuteTransactionRequest.Size(m)
}
func (m *PayExecuteTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PayExecuteTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PayExecuteTransactionRequest proto.InternalMessageInfo

func (m *PayExecuteTransactionRequest) GetBase() *BaseRequest {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *PayExecuteTransactionRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *PayExecuteTransactionRequest) GetOrderId() int64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *PayExecuteTransactionRequest) GetTransaction() string {
	if m != nil {
		return m.Transaction
	}
	return ""
}

type TestTransaction struct {
	Base                 *BaseRequest `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	PaymentChannel       string       `protobuf:"bytes,2,opt,name=payment_channel,json=paymentChannel,proto3" json:"payment_channel,omitempty"`
	TxHash               string       `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	RecipientAddress     string       `protobuf:"bytes,4,opt,name=recipient_address,json=recipientAddress,proto3" json:"recipient_address,omitempty"`
	DenomAmount          int64        `protobuf:"varint,5,opt,name=denom_amount,json=denomAmount,proto3" json:"denom_amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TestTransaction) Reset()         { *m = TestTransaction{} }
func (m *TestTransaction) String() string { return proto.CompactTextString(m) }
func (*TestTransaction) ProtoMessage()    {}
func (*TestTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_0564d675d5c516e0, []int{13}
}

func (m *TestTransaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestTransaction.Unmarshal(m, b)
}
func (m *TestTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestTransaction.Marshal(b, m, deterministic)
}
func (m *TestTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestTransaction.Merge(m, src)
}
func (m *TestTransaction) XXX_Size() int {
	return xxx_messageInfo_TestTransaction.Size(m)
}
func (m *TestTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_TestTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_TestTransaction proto.InternalMessageInfo

func (m *TestTransaction) GetBase() *BaseRequest {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *TestTransaction) GetPaymentChannel() string {
	if m != nil {
		return m.PaymentChannel
	}
	return ""
}

func (m *TestTransaction) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *TestTransaction) GetRecipientAddress() string {
	if m != nil {
		return m.RecipientAddress
	}
	return ""
}

func (m *TestTransaction) GetDenomAmount() int64 {
	if m != nil {
		return m.DenomAmount
	}
	return 0
}

func init() {
	proto.RegisterType((*ExchangeCurrency)(nil), "pb.ExchangeCurrency")
	proto.RegisterType((*PhaseDataResponse)(nil), "pb.PhaseDataResponse")
	proto.RegisterType((*CoinPriceRequest)(nil), "pb.CoinPriceRequest")
	proto.RegisterType((*CoinPriceResponse)(nil), "pb.CoinPriceResponse")
	proto.RegisterType((*CreateOrderRequest)(nil), "pb.CreateOrderRequest")
	proto.RegisterType((*CreateOrderResponse)(nil), "pb.CreateOrderResponse")
	proto.RegisterType((*UserOrdersCountRequest)(nil), "pb.UserOrdersCountRequest")
	proto.RegisterType((*UserOrdersRequest)(nil), "pb.UserOrdersRequest")
	proto.RegisterType((*UserOrder)(nil), "pb.UserOrder")
	proto.RegisterType((*UserOrdersResponse)(nil), "pb.UserOrdersResponse")
	proto.RegisterType((*PayGetTransactionRequest)(nil), "pb.PayGetTransactionRequest")
	proto.RegisterType((*PayGetTransactionResponse)(nil), "pb.PayGetTransactionResponse")
	proto.RegisterType((*PayExecuteTransactionRequest)(nil), "pb.PayExecuteTransactionRequest")
	proto.RegisterType((*TestTransaction)(nil), "pb.TestTransaction")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PayServiceClient is the client API for PayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PayServiceClient interface {
	GetPhaseData(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*PhaseDataResponse, error)
	GetExchangeCurrencyData(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*ExchangeCurrency, error)
	GetUserOrderCount(ctx context.Context, in *UserOrdersCountRequest, opts ...grpc.CallOption) (*IntResponse, error)
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
	GetCoinPrice(ctx context.Context, in *CoinPriceRequest, opts ...grpc.CallOption) (*CoinPriceResponse, error)
	GetUserOrders(ctx context.Context, in *UserOrdersRequest, opts ...grpc.CallOption) (*UserOrdersResponse, error)
	FakePaymentTransaction(ctx context.Context, in *TestTransaction, opts ...grpc.CallOption) (*BoolResponse, error)
	PayGetTransaction(ctx context.Context, in *PayGetTransactionRequest, opts ...grpc.CallOption) (*PayGetTransactionResponse, error)
	PayExecuteTransaction(ctx context.Context, in *PayExecuteTransactionRequest, opts ...grpc.CallOption) (*Empty, error)
}

type payServiceClient struct {
	cc *grpc.ClientConn
}

func NewPayServiceClient(cc *grpc.ClientConn) PayServiceClient {
	return &payServiceClient{cc}
}

func (c *payServiceClient) GetPhaseData(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*PhaseDataResponse, error) {
	out := new(PhaseDataResponse)
	err := c.cc.Invoke(ctx, "/pb.PayService/GetPhaseData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) GetExchangeCurrencyData(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*ExchangeCurrency, error) {
	out := new(ExchangeCurrency)
	err := c.cc.Invoke(ctx, "/pb.PayService/GetExchangeCurrencyData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) GetUserOrderCount(ctx context.Context, in *UserOrdersCountRequest, opts ...grpc.CallOption) (*IntResponse, error) {
	out := new(IntResponse)
	err := c.cc.Invoke(ctx, "/pb.PayService/GetUserOrderCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, "/pb.PayService/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) GetCoinPrice(ctx context.Context, in *CoinPriceRequest, opts ...grpc.CallOption) (*CoinPriceResponse, error) {
	out := new(CoinPriceResponse)
	err := c.cc.Invoke(ctx, "/pb.PayService/GetCoinPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) GetUserOrders(ctx context.Context, in *UserOrdersRequest, opts ...grpc.CallOption) (*UserOrdersResponse, error) {
	out := new(UserOrdersResponse)
	err := c.cc.Invoke(ctx, "/pb.PayService/GetUserOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) FakePaymentTransaction(ctx context.Context, in *TestTransaction, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.PayService/FakePaymentTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) PayGetTransaction(ctx context.Context, in *PayGetTransactionRequest, opts ...grpc.CallOption) (*PayGetTransactionResponse, error) {
	out := new(PayGetTransactionResponse)
	err := c.cc.Invoke(ctx, "/pb.PayService/PayGetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) PayExecuteTransaction(ctx context.Context, in *PayExecuteTransactionRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.PayService/PayExecuteTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PayServiceServer is the server API for PayService service.
type PayServiceServer interface {
	GetPhaseData(context.Context, *IDRequest) (*PhaseDataResponse, error)
	GetExchangeCurrencyData(context.Context, *IDRequest) (*ExchangeCurrency, error)
	GetUserOrderCount(context.Context, *UserOrdersCountRequest) (*IntResponse, error)
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	GetCoinPrice(context.Context, *CoinPriceRequest) (*CoinPriceResponse, error)
	GetUserOrders(context.Context, *UserOrdersRequest) (*UserOrdersResponse, error)
	FakePaymentTransaction(context.Context, *TestTransaction) (*BoolResponse, error)
	PayGetTransaction(context.Context, *PayGetTransactionRequest) (*PayGetTransactionResponse, error)
	PayExecuteTransaction(context.Context, *PayExecuteTransactionRequest) (*Empty, error)
}

func RegisterPayServiceServer(s *grpc.Server, srv PayServiceServer) {
	s.RegisterService(&_PayService_serviceDesc, srv)
}

func _PayService_GetPhaseData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).GetPhaseData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PayService/GetPhaseData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).GetPhaseData(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_GetExchangeCurrencyData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).GetExchangeCurrencyData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PayService/GetExchangeCurrencyData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).GetExchangeCurrencyData(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_GetUserOrderCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOrdersCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).GetUserOrderCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PayService/GetUserOrderCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).GetUserOrderCount(ctx, req.(*UserOrdersCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PayService/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_GetCoinPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).GetCoinPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PayService/GetCoinPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).GetCoinPrice(ctx, req.(*CoinPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_GetUserOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).GetUserOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PayService/GetUserOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).GetUserOrders(ctx, req.(*UserOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_FakePaymentTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).FakePaymentTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PayService/FakePaymentTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).FakePaymentTransaction(ctx, req.(*TestTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_PayGetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayGetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).PayGetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PayService/PayGetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).PayGetTransaction(ctx, req.(*PayGetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_PayExecuteTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayExecuteTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).PayExecuteTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PayService/PayExecuteTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).PayExecuteTransaction(ctx, req.(*PayExecuteTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PayService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PayService",
	HandlerType: (*PayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPhaseData",
			Handler:    _PayService_GetPhaseData_Handler,
		},
		{
			MethodName: "GetExchangeCurrencyData",
			Handler:    _PayService_GetExchangeCurrencyData_Handler,
		},
		{
			MethodName: "GetUserOrderCount",
			Handler:    _PayService_GetUserOrderCount_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _PayService_CreateOrder_Handler,
		},
		{
			MethodName: "GetCoinPrice",
			Handler:    _PayService_GetCoinPrice_Handler,
		},
		{
			MethodName: "GetUserOrders",
			Handler:    _PayService_GetUserOrders_Handler,
		},
		{
			MethodName: "FakePaymentTransaction",
			Handler:    _PayService_FakePaymentTransaction_Handler,
		},
		{
			MethodName: "PayGetTransaction",
			Handler:    _PayService_PayGetTransaction_Handler,
		},
		{
			MethodName: "PayExecuteTransaction",
			Handler:    _PayService_PayExecuteTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pay.proto",
}

func init() { proto.RegisterFile("pay.proto", fileDescriptor_0564d675d5c516e0) }

var fileDescriptor_0564d675d5c516e0 = []byte{
	// 1563 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0xef, 0x6e, 0x1b, 0xc7,
	0x11, 0x37, 0x45, 0x49, 0x14, 0x87, 0xa4, 0x28, 0xae, 0x24, 0x8a, 0xa2, 0x6d, 0x58, 0x66, 0x5b,
	0x5b, 0x80, 0x5b, 0xb5, 0xfe, 0xd3, 0x02, 0x05, 0x5a, 0xc0, 0xb2, 0x64, 0xab, 0x44, 0x5b, 0x87,
	0x3e, 0xcb, 0xf9, 0x14, 0xe0, 0xb0, 0xbc, 0x1b, 0x59, 0x0b, 0x92, 0x77, 0xe7, 0xbb, 0xa5, 0x42,
	0x3e, 0x49, 0x90, 0x77, 0x08, 0x02, 0xe4, 0x11, 0xf2, 0x2d, 0x5f, 0xf3, 0x1e, 0x41, 0x80, 0xbc,
	0x41, 0xb0, 0xb3, 0x7b, 0xc7, 0xe3, 0xf1, 0xe8, 0xc8, 0x80, 0x90, 0x8f, 0x37, 0xff, 0x76, 0x76,
	0xf6, 0x37, 0xbf, 0xd9, 0x3d, 0x28, 0x07, 0x7c, 0x7a, 0x14, 0x84, 0xbe, 0xf4, 0xd9, 0x4a, 0xd0,
	0x6f, 0x57, 0xdf, 0x0f, 0xfd, 0x3e, 0x1f, 0x6a, 0x49, 0xe7, 0xe7, 0x15, 0xd8, 0x7a, 0x39, 0x71,
	0x2e, 0xb9, 0xf7, 0x1e, 0x4f, 0xc6, 0x61, 0x88, 0x9e, 0x33, 0x65, 0x9b, 0xb0, 0x22, 0xdc, 0x56,
	0xe1, 0xa0, 0x70, 0x58, 0xb4, 0x56, 0x84, 0xcb, 0x9e, 0x41, 0x13, 0x8d, 0x8d, 0xed, 0x18, 0x23,
	0x5b, 0x4e, 0x03, 0x6c, 0xad, 0x1c, 0x14, 0x0e, 0xcb, 0xd6, 0x0e, 0x66, 0x22, 0x9c, 0x4f, 0x03,
	0x64, 0x77, 0x01, 0x78, 0x14, 0xa1, 0xb4, 0x1d, 0xdf, 0xc5, 0x56, 0x91, 0x2c, 0xcb, 0x24, 0x39,
	0xf1, 0x5d, 0x64, 0x87, 0xb0, 0xe5, 0xa2, 0xe7, 0x8f, 0xec, 0x94, 0xd1, 0x2a, 0x19, 0x6d, 0x92,
	0xfc, 0x38, 0xb1, 0x6c, 0xc3, 0x86, 0x8b, 0x8e, 0x18, 0xf1, 0x61, 0xd4, 0x5a, 0xa3, 0xa4, 0x92,
	0x6f, 0xf6, 0x10, 0xea, 0x01, 0x9f, 0x8e, 0xd0, 0x93, 0xb6, 0x87, 0xf2, 0x4b, 0x3f, 0x1c, 0xb4,
	0xd6, 0x75, 0x10, 0x23, 0x7e, 0xad, 0xa5, 0xec, 0x11, 0x30, 0x74, 0xcc, 0x5a, 0x22, 0x8a, 0xc6,
	0x18, 0xda, 0xc1, 0xa0, 0x55, 0x22, 0xdb, 0x3a, 0x3a, 0xb4, 0x5a, 0x97, 0xe4, 0xbd, 0x01, 0x7b,
	0x0c, 0xbb, 0x3a, 0xb7, 0x20, 0x14, 0x0e, 0xda, 0x01, 0x86, 0xb6, 0xf4, 0x07, 0xe8, 0xb5, 0x36,
	0xc8, 0x9e, 0x91, 0xb2, 0xa7, 0x74, 0x3d, 0x0c, 0xcf, 0x95, 0x86, 0x3d, 0x80, 0x7a, 0xd6, 0xb8,
	0x4c, 0xc6, 0xb5, 0x20, 0x6d, 0xd7, 0xf9, 0x6a, 0x15, 0x1a, 0xbd, 0x4b, 0x1e, 0xe1, 0x29, 0x97,
	0xdc, 0xc2, 0x28, 0xf0, 0xbd, 0x08, 0x17, 0x2a, 0xbe, 0x0b, 0xeb, 0xc2, 0xf1, 0x6d, 0xe1, 0x52,
	0x85, 0x8b, 0xd6, 0x9a, 0x70, 0xfc, 0xae, 0xcb, 0xfe, 0x08, 0x9b, 0x4a, 0x1c, 0x28, 0x7f, 0xdb,
	0xe3, 0xa3, 0xb8, 0xac, 0x55, 0xe1, 0xf8, 0x14, 0xf4, 0x35, 0x1f, 0x51, 0x65, 0x67, 0x56, 0x91,
	0xe4, 0x72, 0x1c, 0xc5, 0x95, 0x8d, 0xed, 0xde, 0x92, 0x54, 0x25, 0xad, 0x2c, 0x29, 0x5d, 0x5d,
	0x1b, 0x2a, 0x70, 0xd9, 0xaa, 0x09, 0xc7, 0xa7, 0x7c, 0xa9, 0x2e, 0xea, 0x28, 0x23, 0xc9, 0x43,
	0x69, 0x4b, 0x31, 0x42, 0x2a, 0x70, 0xd1, 0x2a, 0x93, 0xe4, 0x5c, 0x8c, 0x90, 0xed, 0xc3, 0x06,
	0x7a, 0xae, 0x56, 0x96, 0x48, 0x59, 0x42, 0xcf, 0x25, 0xd5, 0x3d, 0xa8, 0x50, 0xf4, 0xc8, 0x1e,
	0xe2, 0x85, 0xa4, 0xfa, 0x15, 0x2d, 0xd0, 0xa2, 0xff, 0xe1, 0x85, 0x64, 0x4f, 0xa1, 0xa9, 0x97,
	0x1f, 0xf1, 0x89, 0xed, 0x87, 0x2e, 0x86, 0x36, 0x1f, 0xf9, 0x63, 0x4f, 0x52, 0xf9, 0x8a, 0xd6,
	0x36, 0x69, 0xff, 0xcf, 0x27, 0x9f, 0x29, 0xdd, 0x31, 0xa9, 0x52, 0x4e, 0xc2, 0x9b, 0x77, 0x82,
	0xb4, 0x93, 0xf0, 0xd2, 0x4e, 0x0f, 0xa0, 0xae, 0xd6, 0x18, 0x47, 0x18, 0x6a, 0x9f, 0xa8, 0x55,
	0x21, 0xeb, 0xda, 0x88, 0x4f, 0xde, 0x45, 0x18, 0x92, 0x71, 0xc4, 0x2c, 0x68, 0x73, 0x47, 0x8a,
	0x2b, 0xb4, 0xb3, 0xa0, 0x17, 0x18, 0xb5, 0xaa, 0x07, 0xc5, 0xc3, 0xca, 0x93, 0x9d, 0xa3, 0xa0,
	0x7f, 0x94, 0xed, 0x1b, 0xab, 0xa5, 0xfd, 0x32, 0x72, 0x81, 0x11, 0xeb, 0x40, 0x8d, 0xce, 0x33,
	0x01, 0x5e, 0x8d, 0xca, 0x5c, 0x51, 0xc7, 0x6a, 0x40, 0xd7, 0xf9, 0xa6, 0x00, 0x5b, 0x27, 0xbe,
	0xf0, 0x08, 0x57, 0x16, 0x7e, 0x18, 0x63, 0x24, 0xd9, 0x1f, 0x60, 0xb5, 0xcf, 0x23, 0x24, 0x68,
	0x54, 0x9e, 0xd4, 0xd5, 0xb2, 0x2f, 0x78, 0x14, 0xab, 0x2d, 0x52, 0xaa, 0x22, 0x3b, 0xbe, 0xf0,
	0xe2, 0x1a, 0x68, 0xc8, 0x80, 0x12, 0x99, 0xad, 0xff, 0x0d, 0x76, 0x16, 0x1b, 0x58, 0xb8, 0x84,
	0x9e, 0xa2, 0xc5, 0xb2, 0xed, 0xdb, 0x75, 0xd9, 0x01, 0x54, 0x67, 0x18, 0x12, 0x2e, 0xe1, 0xa7,
	0x68, 0x41, 0x8c, 0x9f, 0xae, 0xdb, 0xf9, 0xb6, 0x00, 0x8d, 0x54, 0xba, 0x06, 0xc8, 0x0f, 0xa1,
	0x9e, 0xac, 0x64, 0xd2, 0x29, 0x68, 0xe8, 0xc5, 0x62, 0x93, 0xd2, 0x73, 0xb8, 0x93, 0x31, 0xb4,
	0xa9, 0xab, 0x84, 0xc7, 0xa5, 0xf0, 0x3d, 0xc3, 0x2c, 0xed, 0x79, 0xaf, 0xd3, 0x94, 0x05, 0x3b,
	0x82, 0xed, 0x59, 0x84, 0x2c, 0xd1, 0x34, 0x12, 0xc7, 0x98, 0x46, 0x3a, 0xbf, 0x14, 0x80, 0x9d,
	0x84, 0xc8, 0x25, 0xd2, 0x41, 0x7f, 0x52, 0x85, 0xf7, 0xa0, 0x44, 0xb8, 0x49, 0x1a, 0x72, 0x5d,
	0x7d, 0xe6, 0xd4, 0xa9, 0x98, 0xad, 0x13, 0xbb, 0x0f, 0x55, 0xd3, 0x5f, 0xba, 0x1c, 0xba, 0x92,
	0xba, 0x2b, 0x7e, 0xe3, 0x78, 0xd6, 0x96, 0x1e, 0xcf, 0x03, 0xa8, 0x53, 0x3e, 0xc1, 0xb8, 0x3f,
	0x14, 0x8e, 0x3d, 0xc0, 0xa9, 0xa1, 0xbd, 0x9a, 0x12, 0xf7, 0x48, 0xfa, 0x5f, 0x9c, 0x76, 0xbe,
	0x5f, 0x85, 0xed, 0xb9, 0x3d, 0x9b, 0x63, 0xda, 0x87, 0x0d, 0xdd, 0x36, 0x09, 0xeb, 0x94, 0xe8,
	0x5b, 0xe7, 0xab, 0x55, 0x86, 0x39, 0xf4, 0x41, 0x54, 0x48, 0x66, 0x68, 0xe3, 0x31, 0xec, 0x26,
	0xf9, 0x5e, 0xf1, 0xe1, 0x18, 0x6d, 0xe9, 0xdb, 0x01, 0x9f, 0x9a, 0xda, 0x27, 0x09, 0x7f, 0xae,
	0x74, 0xe7, 0x7e, 0x8f, 0x4f, 0xd9, 0xbf, 0xa0, 0x9d, 0x71, 0x49, 0x4e, 0xdb, 0x0f, 0x0d, 0x3b,
	0xb5, 0xe6, 0xfc, 0x4e, 0x67, 0x7a, 0x76, 0x0a, 0xf7, 0xf2, 0xbc, 0xd3, 0xc7, 0xae, 0x79, 0xeb,
	0xf6, 0x62, 0x88, 0xd9, 0x1c, 0x49, 0xcd, 0x0a, 0xee, 0xba, 0x21, 0x46, 0x51, 0x66, 0x56, 0x1c,
	0x6b, 0xa9, 0x22, 0xd0, 0xd8, 0xf0, 0x43, 0x68, 0x8b, 0x11, 0x7f, 0xaf, 0x79, 0xad, 0x9a, 0x58,
	0xbe, 0x09, 0xbb, 0x4a, 0xaa, 0xea, 0x78, 0x21, 0xb8, 0xb4, 0xfb, 0xc2, 0x31, 0xb3, 0xa1, 0xa4,
	0xbe, 0x5f, 0x08, 0x87, 0xdd, 0x86, 0x32, 0xa9, 0x44, 0x9f, 0xc7, 0xa3, 0x80, 0x6c, 0xbb, 0x7d,
	0x4e, 0xd8, 0x25, 0x65, 0x88, 0x0e, 0x06, 0x82, 0xa6, 0x97, 0x62, 0x73, 0xd0, 0xd8, 0x55, 0x2a,
	0x2b, 0xd6, 0x10, 0xa5, 0xff, 0x19, 0x18, 0xd9, 0xc7, 0x69, 0x8d, 0x23, 0x95, 0x53, 0x85, 0xcc,
	0xb7, 0x94, 0xa6, 0xa7, 0x15, 0xef, 0x94, 0x5c, 0x8d, 0x09, 0x9d, 0x15, 0xf7, 0x06, 0x3a, 0x70,
	0x55, 0x8f, 0x09, 0xca, 0x8d, 0x7b, 0x03, 0x8a, 0x99, 0x83, 0xa1, 0x5a, 0x1e, 0x86, 0x3e, 0x40,
	0x73, 0xc6, 0x8e, 0x27, 0x0a, 0xb0, 0x37, 0xd3, 0x3a, 0xfb, 0xb0, 0x91, 0x69, 0x9b, 0x52, 0x60,
	0xb8, 0xe5, 0xbb, 0x02, 0x34, 0x66, 0x6b, 0xde, 0xcc, 0x72, 0x59, 0x5c, 0x17, 0x17, 0x71, 0x9d,
	0xee, 0x8a, 0xd5, 0xf9, 0xae, 0xc8, 0xf6, 0xf9, 0xda, 0x02, 0x1f, 0xfe, 0x58, 0x82, 0x72, 0x92,
	0xf3, 0xc2, 0x40, 0xbf, 0x46, 0x57, 0xdd, 0x08, 0x95, 0xfc, 0x1d, 0xf6, 0x22, 0x89, 0xc3, 0x21,
	0x0f, 0xed, 0xec, 0xe1, 0xea, 0x0e, 0xd9, 0x31, 0xea, 0x77, 0xe9, 0x33, 0x5e, 0xca, 0x40, 0xeb,
	0x4b, 0x19, 0xe8, 0x0d, 0xfc, 0x69, 0xd1, 0x23, 0xcd, 0xe0, 0x71, 0x92, 0xfa, 0x8a, 0xd5, 0xc9,
	0x86, 0x48, 0x53, 0xb9, 0xc9, 0x3d, 0xe7, 0x2e, 0xb7, 0x91, 0x7b, 0x97, 0xcb, 0x69, 0xe4, 0x72,
	0x6e, 0x23, 0x3f, 0x83, 0x66, 0x5c, 0x0d, 0x19, 0x72, 0x2f, 0x52, 0xf3, 0xd9, 0xf7, 0xd4, 0xc6,
	0x60, 0xae, 0x18, 0xe7, 0x33, 0x65, 0xd7, 0x65, 0x7f, 0x85, 0x9d, 0x38, 0x7c, 0x88, 0x17, 0x63,
	0x75, 0xb3, 0x99, 0x28, 0x1f, 0xdd, 0x6e, 0x0d, 0xa3, 0xb3, 0x48, 0x75, 0x3e, 0xe9, 0xba, 0xb9,
	0x7c, 0x51, 0xcd, 0xe5, 0x8b, 0x9c, 0xf1, 0x58, 0xcb, 0x1d, 0x8f, 0x4b, 0x86, 0xdb, 0xe6, 0x92,
	0xe1, 0xc6, 0xfe, 0x09, 0xfb, 0x89, 0xfd, 0x02, 0x37, 0xd6, 0xc9, 0x2b, 0xb9, 0xc3, 0x67, 0x68,
	0x31, 0xcd, 0x61, 0x5b, 0x1f, 0xe1, 0xb0, 0xc6, 0xf5, 0x38, 0x8c, 0x7d, 0x1a, 0x87, 0x6d, 0x5f,
	0x9b, 0xc3, 0x76, 0x72, 0x38, 0x6c, 0xf9, 0xcb, 0x64, 0xf7, 0x23, 0x2f, 0x93, 0x87, 0x50, 0x37,
	0x57, 0x0e, 0x95, 0xbb, 0xb8, 0x42, 0xb7, 0xd5, 0xd4, 0xa7, 0xa0, 0xc5, 0x96, 0x91, 0x76, 0x4e,
	0x80, 0xa5, 0x69, 0xc8, 0x0c, 0xcf, 0xbf, 0x00, 0xcc, 0xa4, 0xad, 0x02, 0x5d, 0x08, 0x6b, 0x8a,
	0x8d, 0x12, 0xa9, 0x95, 0x32, 0xe8, 0x44, 0xd0, 0xea, 0xf1, 0xe9, 0x19, 0xca, 0x14, 0xca, 0x6e,
	0x8c, 0x41, 0x13, 0xbe, 0x2a, 0xce, 0xf1, 0x55, 0xe7, 0x0b, 0xd8, 0xcf, 0x59, 0xd4, 0x6c, 0xe0,
	0x00, 0x2a, 0xa9, 0x76, 0x30, 0x17, 0xb4, 0xb4, 0x48, 0x5d, 0xf8, 0x31, 0x0c, 0xfd, 0x50, 0xe3,
	0x47, 0xaf, 0x5a, 0x26, 0x09, 0x5d, 0xa5, 0xbe, 0x2e, 0xc0, 0x9d, 0x1e, 0x9f, 0xbe, 0x9c, 0xa0,
	0x33, 0x96, 0xf8, 0x3b, 0xee, 0x2b, 0x9b, 0xfa, 0xea, 0x42, 0xea, 0x9d, 0x1f, 0x0a, 0x50, 0x3f,
	0xc7, 0x28, 0xbd, 0xf1, 0xeb, 0xa5, 0x93, 0x62, 0x15, 0x85, 0x19, 0x0f, 0x87, 0x86, 0xa5, 0xe3,
	0x26, 0x3e, 0xd1, 0x52, 0x95, 0xb7, 0x9c, 0xd8, 0x97, 0x3c, 0xba, 0x34, 0x43, 0x64, 0x5d, 0x4e,
	0xfe, 0xc3, 0xa3, 0x4b, 0xf6, 0x08, 0x1a, 0x21, 0x3a, 0x42, 0x37, 0x43, 0xcc, 0x4c, 0x3a, 0xc5,
	0xad, 0x44, 0x11, 0x73, 0xd3, 0x7d, 0xa8, 0x9a, 0x46, 0xd5, 0x3c, 0xa0, 0x27, 0x4a, 0x45, 0xbf,
	0x7d, 0x49, 0xf4, 0xe4, 0xa7, 0x55, 0x80, 0x1e, 0x9f, 0xbe, 0xc5, 0xf0, 0x4a, 0x38, 0xc8, 0xfe,
	0x01, 0xd5, 0x33, 0x94, 0xc9, 0xe3, 0x91, 0x11, 0xe6, 0xba, 0xa7, 0x66, 0x17, 0xed, 0x5d, 0xf5,
	0xb9, 0xf0, 0xb4, 0xec, 0xdc, 0x62, 0xcf, 0x61, 0xef, 0x0c, 0x65, 0xf6, 0xb5, 0x92, 0x17, 0x22,
	0xf7, 0x59, 0xd3, 0xb9, 0xc5, 0x5e, 0x40, 0xe3, 0x0c, 0x65, 0x82, 0x69, 0xba, 0x04, 0xb0, 0xf6,
	0x1c, 0xe4, 0xe7, 0x6e, 0x06, 0x6d, 0x2a, 0x71, 0x57, 0x7d, 0xa7, 0xb2, 0xa8, 0xa4, 0x6e, 0xa2,
	0xac, 0xa9, 0x2c, 0x16, 0xaf, 0xe3, 0xed, 0xbd, 0x05, 0x79, 0x12, 0xe1, 0xdf, 0xb4, 0xff, 0xe4,
	0xcd, 0xc1, 0x28, 0xdb, 0xec, 0x8b, 0x49, 0x97, 0x61, 0xe1, 0x61, 0x42, 0x09, 0xd4, 0xd2, 0x9b,
	0x88, 0xd8, 0xee, 0xfc, 0x06, 0xe2, 0x00, 0xcd, 0xac, 0x38, 0x89, 0x70, 0x0c, 0xcd, 0x57, 0x7c,
	0x80, 0x86, 0xa7, 0xd2, 0x00, 0xdb, 0x56, 0x3e, 0x19, 0xd4, 0xb5, 0xb7, 0x08, 0x67, 0xbe, 0x3f,
	0x4c, 0x85, 0xb0, 0xa0, 0xb1, 0xd0, 0x97, 0xec, 0x0e, 0x9d, 0xdc, 0x12, 0x8e, 0x68, 0xdf, 0x5d,
	0xa2, 0x4d, 0x62, 0xbe, 0x82, 0xdd, 0xdc, 0x66, 0x64, 0x07, 0xc6, 0x73, 0x69, 0x9f, 0xb6, 0xcb,
	0x74, 0xe0, 0xa3, 0x40, 0x4e, 0x3b, 0xb7, 0xfa, 0xeb, 0xf4, 0x4b, 0xe8, 0xe9, 0xaf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x9d, 0x67, 0x8a, 0x35, 0x31, 0x12, 0x00, 0x00,
}
